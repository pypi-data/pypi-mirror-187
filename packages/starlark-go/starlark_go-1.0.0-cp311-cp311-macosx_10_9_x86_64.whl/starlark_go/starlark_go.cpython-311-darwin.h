/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/caketop/python-starlark-go */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "python_eval.go"

#include "starlark.h"

#line 1 "cgo-generated-wrapper"

#line 3 "python_globals.go"

#include "starlark.h"

extern PyObject *ConversionError;

#line 1 "cgo-generated-wrapper"

#line 3 "python_object.go"

#include "starlark.h"

extern PyObject *StarlarkError;
extern PyObject *SyntaxError;
extern PyObject *EvalError;
extern PyObject *ResolveError;

#line 1 "cgo-generated-wrapper"

#line 3 "python_print.go"

#include "starlark.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern PyObject* Starlark_eval(Starlark* self, PyObject* args, PyObject* kwargs);
extern PyObject* Starlark_exec(Starlark* self, PyObject* args, PyObject* kwargs);
extern PyObject* Starlark_global_names(Starlark* self, PyObject* _);
extern PyObject* Starlark_get_global(Starlark* self, PyObject* args, PyObject* kwargs);
extern PyObject* Starlark_set_globals(Starlark* self, PyObject* args, PyObject* kwargs);
extern PyObject* Starlark_pop_global(Starlark* self, PyObject* args, PyObject* kwargs);
extern PyObject* Starlark_tp_iter(Starlark* self);
extern void ConfigureStarlark(int allowSet, int allowGlobalReassign, int allowRecursion);
extern Starlark* Starlark_new(PyTypeObject* pytype, PyObject* args, PyObject* kwargs);
extern int Starlark_init(Starlark* self, PyObject* args, PyObject* kwargs);
extern void Starlark_dealloc(Starlark* self);
extern PyObject* Starlark_get_print(Starlark* self, void* closure);
extern int Starlark_set_print(Starlark* self, PyObject* value, void* closure);

#ifdef __cplusplus
}
#endif
