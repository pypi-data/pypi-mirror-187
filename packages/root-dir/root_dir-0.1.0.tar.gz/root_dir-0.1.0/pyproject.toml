# configuration approach followed:
# - whenever possible, prefer pyproject.toml
# - for configurations insufficiently supported by pyproject.toml, use setup.cfg instead
# - setup.py discouraged; minimal stub included only for compatibility with legacy tools

[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "root_dir"
description = "Manage a hierarchy of directories - mostly for data storage and access"
authors = [
    { name = "Nicolas Deutschmann", email = "deu@zurich.ibm.com" },
]
readme = "README.md"
# due to how PEP 440 defines version matching, prefer [incl, excl) definitions like below:
requires-python = ">=3.7, <3.11"
dependencies = ["liblog", "environment_files", "python-dotenv"]
dynamic = ["version"]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
]
dev = [
    "pytest",
    "pytest-cov",
    "black",
    "flake8",
    "pep8-naming",
    "sphinx",
    "sphinx-autodoc-typehints",
    "better-apidoc",
    "six",
    "sphinx_rtd_theme",
    "myst-parser",
    "sphinx-toolbox",
    "python-semantic-release",
    "setuptools>=45",
    "setuptools_scm[toml]>=6.2",
    "build"
]

[tool.setuptools_scm]
version_scheme = "post-release"

[project.urls]
repository = "https://github.ibm.com/DEU/root_dir"

[tool.semantic_release]
# for default values check:
# https://github.com/relekang/python-semantic-release/blob/master/semantic_release/defaults.cfg

version_source = "tag_only"
branch = "main"

# configure types which should trigger minor and patch version bumps respectively
# (note that they must be a subset of the configured allowed types):
parser_angular_allowed_types = "build,chore,ci,docs,feat,fix,perf,style,refactor,test"
parser_angular_minor_types = "feat"
parser_angular_patch_types = "fix,perf"

# unstaging the changelog (i.e. command part before &&) is a workaround for
# https://github.com/relekang/python-semantic-release/issues/381:
build_command = """
git stash -- CHANGELOG.md
echo "new version: $(python -m setuptools_scm)"
NEW_VERSION=v$(python -m setuptools_scm)
if [[ $(python -m setuptools_scm | grep -v .post) ]]; then
    python -m build -s -w
    git checkout -b changelogs/$NEW_VERSION
    git stash pop
    git add CHANGELOG.md
    git commit -m "$NEW_VERSION changelog"
    git push --set-upstream origin changelogs/$NEW_VERSION
else
    echo "Repo is dirty, skipping build"
fi
"""

repository_url = "https://eu.artifactory.swg-devops.com/artifactory/api/pypi/res-sysbio-team-chcls-public-pypi-local"

github_token_var = "GITHUB_TOKEN"
upload_to_repository = true
remove_dist = false

hvcs_domain="github.ibm.com"
hvcs_api_domain="github.ibm.com/api/v3"  # see https://ibm-analytics.slack.com/archives/C3SSJ6CSE/p1660313562338669?thread_ts=1660300230.162449&cid=C3SSJ6CSE

[tool.black]
line-length = 88
skip-string-normalization = false
target-version = ['py37']

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
force_to_top = ["rdkit", "scikit-learn"]

[tool.pytest.ini_options]
filterwarnings = "ignore::DeprecationWarning"
addopts = "--pdbcls=IPython.terminal.debugger:Pdb"
