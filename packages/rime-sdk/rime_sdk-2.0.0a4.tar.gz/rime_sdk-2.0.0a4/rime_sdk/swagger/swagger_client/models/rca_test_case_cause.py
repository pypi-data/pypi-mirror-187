# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcaTestCaseCause(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_case_id': 'RcaTestCaseID',
        'description': 'str',
        'confidence_score': 'float'
    }

    attribute_map = {
        'test_case_id': 'testCaseId',
        'description': 'description',
        'confidence_score': 'confidenceScore'
    }

    def __init__(self, test_case_id=None, description=None, confidence_score=None):  # noqa: E501
        """RcaTestCaseCause - a model defined in Swagger"""  # noqa: E501
        self._test_case_id = None
        self._description = None
        self._confidence_score = None
        self.discriminator = None
        if test_case_id is not None:
            self.test_case_id = test_case_id
        if description is not None:
            self.description = description
        if confidence_score is not None:
            self.confidence_score = confidence_score

    @property
    def test_case_id(self):
        """Gets the test_case_id of this RcaTestCaseCause.  # noqa: E501


        :return: The test_case_id of this RcaTestCaseCause.  # noqa: E501
        :rtype: RcaTestCaseID
        """
        return self._test_case_id

    @test_case_id.setter
    def test_case_id(self, test_case_id):
        """Sets the test_case_id of this RcaTestCaseCause.


        :param test_case_id: The test_case_id of this RcaTestCaseCause.  # noqa: E501
        :type: RcaTestCaseID
        """

        self._test_case_id = test_case_id

    @property
    def description(self):
        """Gets the description of this RcaTestCaseCause.  # noqa: E501

        Human-readable explanation of how the test case might have caused the degradation event.  # noqa: E501

        :return: The description of this RcaTestCaseCause.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RcaTestCaseCause.

        Human-readable explanation of how the test case might have caused the degradation event.  # noqa: E501

        :param description: The description of this RcaTestCaseCause.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def confidence_score(self):
        """Gets the confidence_score of this RcaTestCaseCause.  # noqa: E501

        Confidence that TestCaseCause explains the issue with the feature. Used to rank TestCaseCauses. In range [0,1].  # noqa: E501

        :return: The confidence_score of this RcaTestCaseCause.  # noqa: E501
        :rtype: float
        """
        return self._confidence_score

    @confidence_score.setter
    def confidence_score(self, confidence_score):
        """Sets the confidence_score of this RcaTestCaseCause.

        Confidence that TestCaseCause explains the issue with the feature. Used to rank TestCaseCauses. In range [0,1].  # noqa: E501

        :param confidence_score: The confidence_score of this RcaTestCaseCause.  # noqa: E501
        :type: float
        """

        self._confidence_score = confidence_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcaTestCaseCause, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcaTestCaseCause):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
