# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchematestrunTestRunConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'RimeUUID',
        'model_id': 'RimeUUID',
        'data_info': 'TestrunDataInfo',
        'agent_id': 'str',
        'test_config': 'SchematestrunTestConfig',
        'run_name': 'str',
        'silent_errors': 'bool',
        'ram_request_megabytes': 'str',
        'cpu_request_millicores': 'str',
        'random_seed': 'str'
    }

    attribute_map = {
        'project_id': 'projectId',
        'model_id': 'modelId',
        'data_info': 'dataInfo',
        'agent_id': 'agentId',
        'test_config': 'testConfig',
        'run_name': 'runName',
        'silent_errors': 'silentErrors',
        'ram_request_megabytes': 'ramRequestMegabytes',
        'cpu_request_millicores': 'cpuRequestMillicores',
        'random_seed': 'randomSeed'
    }

    def __init__(self, project_id=None, model_id=None, data_info=None, agent_id=None, test_config=None, run_name=None, silent_errors=None, ram_request_megabytes=None, cpu_request_millicores=None, random_seed=None):  # noqa: E501
        """SchematestrunTestRunConfig - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._model_id = None
        self._data_info = None
        self._agent_id = None
        self._test_config = None
        self._run_name = None
        self._silent_errors = None
        self._ram_request_megabytes = None
        self._cpu_request_millicores = None
        self._random_seed = None
        self.discriminator = None
        if project_id is not None:
            self.project_id = project_id
        if model_id is not None:
            self.model_id = model_id
        if data_info is not None:
            self.data_info = data_info
        if agent_id is not None:
            self.agent_id = agent_id
        if test_config is not None:
            self.test_config = test_config
        if run_name is not None:
            self.run_name = run_name
        if silent_errors is not None:
            self.silent_errors = silent_errors
        if ram_request_megabytes is not None:
            self.ram_request_megabytes = ram_request_megabytes
        if cpu_request_millicores is not None:
            self.cpu_request_millicores = cpu_request_millicores
        if random_seed is not None:
            self.random_seed = random_seed

    @property
    def project_id(self):
        """Gets the project_id of this SchematestrunTestRunConfig.  # noqa: E501


        :return: The project_id of this SchematestrunTestRunConfig.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SchematestrunTestRunConfig.


        :param project_id: The project_id of this SchematestrunTestRunConfig.  # noqa: E501
        :type: RimeUUID
        """

        self._project_id = project_id

    @property
    def model_id(self):
        """Gets the model_id of this SchematestrunTestRunConfig.  # noqa: E501


        :return: The model_id of this SchematestrunTestRunConfig.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this SchematestrunTestRunConfig.


        :param model_id: The model_id of this SchematestrunTestRunConfig.  # noqa: E501
        :type: RimeUUID
        """

        self._model_id = model_id

    @property
    def data_info(self):
        """Gets the data_info of this SchematestrunTestRunConfig.  # noqa: E501


        :return: The data_info of this SchematestrunTestRunConfig.  # noqa: E501
        :rtype: TestrunDataInfo
        """
        return self._data_info

    @data_info.setter
    def data_info(self, data_info):
        """Sets the data_info of this SchematestrunTestRunConfig.


        :param data_info: The data_info of this SchematestrunTestRunConfig.  # noqa: E501
        :type: TestrunDataInfo
        """

        self._data_info = data_info

    @property
    def agent_id(self):
        """Gets the agent_id of this SchematestrunTestRunConfig.  # noqa: E501

        agent_id is the agent this job should be run on. If not specified, the default agent for the workspace is used.  # noqa: E501

        :return: The agent_id of this SchematestrunTestRunConfig.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this SchematestrunTestRunConfig.

        agent_id is the agent this job should be run on. If not specified, the default agent for the workspace is used.  # noqa: E501

        :param agent_id: The agent_id of this SchematestrunTestRunConfig.  # noqa: E501
        :type: str
        """

        self._agent_id = agent_id

    @property
    def test_config(self):
        """Gets the test_config of this SchematestrunTestRunConfig.  # noqa: E501


        :return: The test_config of this SchematestrunTestRunConfig.  # noqa: E501
        :rtype: SchematestrunTestConfig
        """
        return self._test_config

    @test_config.setter
    def test_config(self, test_config):
        """Sets the test_config of this SchematestrunTestRunConfig.


        :param test_config: The test_config of this SchematestrunTestRunConfig.  # noqa: E501
        :type: SchematestrunTestConfig
        """

        self._test_config = test_config

    @property
    def run_name(self):
        """Gets the run_name of this SchematestrunTestRunConfig.  # noqa: E501


        :return: The run_name of this SchematestrunTestRunConfig.  # noqa: E501
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this SchematestrunTestRunConfig.


        :param run_name: The run_name of this SchematestrunTestRunConfig.  # noqa: E501
        :type: str
        """

        self._run_name = run_name

    @property
    def silent_errors(self):
        """Gets the silent_errors of this SchematestrunTestRunConfig.  # noqa: E501


        :return: The silent_errors of this SchematestrunTestRunConfig.  # noqa: E501
        :rtype: bool
        """
        return self._silent_errors

    @silent_errors.setter
    def silent_errors(self, silent_errors):
        """Sets the silent_errors of this SchematestrunTestRunConfig.


        :param silent_errors: The silent_errors of this SchematestrunTestRunConfig.  # noqa: E501
        :type: bool
        """

        self._silent_errors = silent_errors

    @property
    def ram_request_megabytes(self):
        """Gets the ram_request_megabytes of this SchematestrunTestRunConfig.  # noqa: E501

        Megabytes of RAM requested for the stress test job. The limit is 2x the megabytes requested.  # noqa: E501

        :return: The ram_request_megabytes of this SchematestrunTestRunConfig.  # noqa: E501
        :rtype: str
        """
        return self._ram_request_megabytes

    @ram_request_megabytes.setter
    def ram_request_megabytes(self, ram_request_megabytes):
        """Sets the ram_request_megabytes of this SchematestrunTestRunConfig.

        Megabytes of RAM requested for the stress test job. The limit is 2x the megabytes requested.  # noqa: E501

        :param ram_request_megabytes: The ram_request_megabytes of this SchematestrunTestRunConfig.  # noqa: E501
        :type: str
        """

        self._ram_request_megabytes = ram_request_megabytes

    @property
    def cpu_request_millicores(self):
        """Gets the cpu_request_millicores of this SchematestrunTestRunConfig.  # noqa: E501

        Millicores of CPU requested for the stress test job. The limit is 2x the millicores requested.  # noqa: E501

        :return: The cpu_request_millicores of this SchematestrunTestRunConfig.  # noqa: E501
        :rtype: str
        """
        return self._cpu_request_millicores

    @cpu_request_millicores.setter
    def cpu_request_millicores(self, cpu_request_millicores):
        """Sets the cpu_request_millicores of this SchematestrunTestRunConfig.

        Millicores of CPU requested for the stress test job. The limit is 2x the millicores requested.  # noqa: E501

        :param cpu_request_millicores: The cpu_request_millicores of this SchematestrunTestRunConfig.  # noqa: E501
        :type: str
        """

        self._cpu_request_millicores = cpu_request_millicores

    @property
    def random_seed(self):
        """Gets the random_seed of this SchematestrunTestRunConfig.  # noqa: E501


        :return: The random_seed of this SchematestrunTestRunConfig.  # noqa: E501
        :rtype: str
        """
        return self._random_seed

    @random_seed.setter
    def random_seed(self, random_seed):
        """Sets the random_seed of this SchematestrunTestRunConfig.


        :param random_seed: The random_seed of this SchematestrunTestRunConfig.  # noqa: E501
        :type: str
        """

        self._random_seed = random_seed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchematestrunTestRunConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchematestrunTestRunConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
