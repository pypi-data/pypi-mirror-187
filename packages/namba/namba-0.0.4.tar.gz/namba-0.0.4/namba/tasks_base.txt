{"id": 1, "unit": "karenina", "task_text": "Определить 200 самых частотных слов в тексте (вывести на экран эти слова и их частоты). Среди найденных слов определить слова, не входящие в стандартный список стоп-слов. Вывести эти слова на экран", "task_solution_code_analytics": "task_Anna_Karenina_1"}
{"id": 2, "unit": "karenina", "task_text": "Найти в книге как минимум 3 пары близких, но не совпадающих коротких предложений. Редакционное расстояние между ними не должно превышать 3, длина предложений не должна быть более 40 символов. Рекомендация: для повышения скорости решения задачи учитывайте длину сравниваемых предложений при поиске близких предложений.", "task_solution_code_analytics": "task_Anna_Karenina_2"}
{"id": 3, "unit": "karenina", "task_text": "Для имени собственного одного из главных персонажей книги найти частоту различных форм склонения имени по падежам. Вывести результат (словоформы имени и их частоты) на экран. При решении задачи использовать лемматизацию. Рекомендация (не обязательная): для ускорения работы решения можно учитывать длину слов и использовать мемоизацию.", "task_solution_code_analytics": "task_Anna_Karenina_3"}
{"id": 4, "unit": "accounts", "task_text": "В accounts.*.csv найти id, для которого в столбце ammount встречается наибольшее количество значений между кратных 5 и не кратных 10. Выполнить задание с использованием Dask, распаралелив процесс обработки данных. Выполнить задание с использование Dask(корректным!), распаралелив процесс обработки данных (использование Dask должно приводить к истинной паралелльной обработке данных", "task_solution_code_analytics": "task_accounts_1"}
{"id": 5, "unit": "accounts", "task_text": "В accounts.*.csv найти id, для которого в столбце amount встречается наибольшее количество значений между 1000 и 1500. Выполнить задание с использованием Dask, распараллелив процесс обработки данных. Выполнить задание с использованием Dask (корректным!), распараллелив процесс обработки данных (использование Dask должно приводить к истинной параллельной обработке данных)", "task_solution_code_analytics": "task_accounts_2"}
{"id": 6, "unit": "accounts", "task_text": "В accounts.*.csv найти id, для которого сумма положительных значений в столбце amount наибольшая. Выполнить задание с использованием Dask, распараллелив процесс обработки данных. Выполнить задание с использованием Dask (корректным!), распараллелив процесс обработки данных (использование Dask должно приводить к истинной параллельной обработке данных).", "task_solution_code_analytics": "task_accounts_3"}
{"id": 7, "unit": "accounts", "task_text": "В accounts.*.csv найти id, для которого в столбце amount встречается наибольшее количество значений, кратных трем. Выполнить задание с использованием Dask, распараллелив процесс обработки данных. Выполнить задание с использованием Dask (корректным!), распараллелив процесс обработки данных (использование Dask должно приводить к истинной параллельной обработке данных).", "task_solution_code_analytics": "task_accounts_4"}
{"id": 8, "unit": "sp500hst", "task_text": "Сохранить в sp500hst names.txt CSV с добавленным столбцом с расшифровкой названия тикера. Использовать для этого данные из файла sp_data2.csv. В случае нехватки данных об именах тикеров корректно обработать такую ситуацию (в новом столбце для этих случаев должно быть пустое значение). Решить задачу средствами numpy и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.", "task_solution_code_analytics": "task_sp500hst_1"}
{"id": 9, "unit": "sp500hst", "task_text": "Рассчитать среднее значение за 2010 год для показателей каждого из столбцов 3-6 для одинаковых значений тикеров из столбца 2 и сохранить рассчитанную таблицу со столбцами Тикер, open , high, low, closing (где OHLC содержат среднее значение для данного тикера за 2010 год) в новом CSV файле. Решить задачу средствами numpy и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.", "task_solution_code_analytics": "task_sp500hst_2"}
{"id": 10, "unit": "sp500hst", "task_text": "Для тикера NVDA посчитать, скольео дней прошло между максимальным и минимальным значением цены акции открытий рынка, и суммарный объем торгов за этот период (аключая дни максимума и минимума). Решить задачу средствами numpy/pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможность данных библиотек.", "task_solution_code_analytics": "task_sp500hst_3"}
{"id": 11, "unit": "sp500hst", "task_text": "Создать таблицу, в которой индексом являются даты торгов, столбцами - наименования тикеров, а в ячейках хранятся объемы торгов. Заполнить эту таблицу данными из sp500hst.txt (в случае отсутствия информации для определенных сочетаний тикер-дата, сохранить в ячейке пустое значение). Сохранить результат в новый CSV файл. Решить задачу средствами numpy и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.", "task_solution_code_analytics": "task_sp500hst_4"}
{"id": 12, "unit": "sp500hst", "task_text": "Создать DataFrame, в котором присутствует столбец, отражающий разницу в объемах торгов по NVDA и AAPL в одинаковые дни, и который содержит исходные данные об объеме торгов этими акциями. Создать модификацию этого DataFrame, в которой сохранены только строки для дней, когда и акции NVDA, и акции AAPL дорожали (цена закрытия была выше цены открытия). Решить задачу средствами numpy и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.", "task_solution_code_analytics": "task_sp500hst_5"}
{"id": 13, "unit": "random", "task_text": "В массиве чисел, хранящихся в файле random.hdf5, посчитать долю значений, превышающих среднее значение более чем на 3 стандартных отклонения. Выполнить задание с использованием dask.array, распараллелив процесс обработки данных (использование Dask должна приводить к истинной параллельной обработке данных)", "task_solution_code_analytics": "task_random_1"}
{"id": 14, "unit": "random", "task_text": "В массиве чисел, хранящихся в файле random.hdf5, подсчитать количество значений, не отклоняющихся от среднего значения более чем на 3 стандартных отклонения. Выполнить задание с использованием disk.array, распараллелив процесс обработки данных (использование Dask должно приводить к истинной параллельной обработке данных).", "task_solution_code_analytics": "task_random_2"}
{"id": 15, "unit": "random", "task_text": "В массиве чисел, хранящихся в файле random. hdf5, подсчитать количество строк, в которых более 600 значений, превышающих среднее значение по всему массиву. Выполнить задание с использованием dask.array, распараллелив процесс обработки данных (использование Dask должно приводить к истинной параллельной обработке данных).", "task_solution_code_analytics": "task_random_3"}
{"id": 16, "unit": "random", "task_text": "В массиве чисел, хранящихся в файле random.hdf5, найти строку (вывести ее индекс и содержащиеся значения), в которой более всего значений превышающих среднее значение по всему массиву. Выполнить задание с использованием disk.array, распараллелив процесс обработки данных (использование Dask должно приводить к истинной параллельной обработке данных).", "task_solution_code_analytics": "task_random_4"}
{"id": 17, "unit": "all_k", "task_text": "Подсчитать, сколько раз во всех текстовых файлах, лежащих в all k.zip, встречаются реплики прямой речи, оформленные в виде диалога (В этом случае каждая реплика начинается с новой строки, перед репликами ставится тире (перед тире возможны различные пробельные символы). Выполнить задание с использованием Dask, распараллелив процесс обработки данных. Выполнить задание с использованием Dask (корректным!), распараллелив процесс обработки данных (использование Dask должно приводить к истинной параллельной обработке данных).", "task_solution_code_analytics": "task_all_k_1:"}
{"id": 18, "unit": "all_k", "task_text": "Подсчитать, сколько раз в текстовых файлах, лежащих в all k.zip, встречаются предложения трех видов: вопросительные (в окончании имеют вопросительный знак), побудительные (в окончании имеют восклицательный знак и не имеют вопросительного) и повествовательные (в окончании имеют точку или троеточие, при этом нужно исключить учет точек, встречающихся в сокращениях, таких как \"т.к.\"). Выполнить задание с использованием Dask (корректным!), распараллелив процесс обработки данных (использование Dask должно приводить к истинной параллельной обработке данных).", "task_solution_code_analytics": "task_all_k_2:"}
{"id": 19, "unit": "all_k", "task_text": "Подсчитать, сколько раз встречается каждая из заглавных русских букв в текстовых файлах, лежащих в all_k.zip. Выполнить задание с использованием Dask (корректным!), распараллелив процесс обработки данных (использование Dask должно приводить к истинной параллельной обработке данных).", "task_solution_code_analytics": "task_all_k_3:"}
{"id": 20, "unit": "all_k", "task_text": "Подсчитать, сколько раз встречается каждое из личных местоимений в именительном падеже (полный список: я, ты, он, она, оно, мы, вы, они) в текстовых файлах, лежащих в папке: all k.zip. Выполнить задание с использованием Dask (корректным!), распараллелив процесс обработки данных (использование Dask должно приводить к истинной параллельной обработке данных).", "task_solution_code_analytics": "task_all_k_4:"}
{"id": 21, "unit": "adressbook", "task_text": "По данным из addres-book-q.xml сформировать 2 кортежа, у мужчин добавить имя компанию телефон рабочий, женщинам имя и телефон персональный Сохранить данную структуру данных в файл формата npy и считать его.", "task_solution_code_analytics": "task_addres_book_1:"}
{"id": 22, "unit": "adressbook", "task_text": "По данным из файла addres-book-q.xml сформировать два списка кортежей. В первом будет информация только о мужчинах и кортеж будет состоять из имени, названии компании и рабочего телефона, а во втором списке будет только информация о женщинах и кортеж будет состоять из имени и личного телефона. Сохранить списки в два разных файла формата pickle и загрузить и оттуда.", "task_solution_code_analytics": "task_addres_book_2:"}
{"id": 23, "unit": "adressbook", "task_text": "По данным из файла addres-book-q.xml сформировать словарь, в котором по должности можно получить список людей с данной должностью и для каждого человека по соответствующему ключу можно получить имя, компанию и список всех доступных телефонов. Сохранить данную структуру данных в файл формата json и прочитать ее, показав идентичность структуры данных после сохранения/загрузки.", "task_solution_code_analytics": "task_addres_book_3:"}
{ "id" : 24, "unit": "chinok", "task_text": r'С помощью кода на Python с использованием sqlite3 и SQL решить задачу. Реализовать функции на Python: 1) Которая возвращает всех имеющихся артистов. 2) Которая по имени артиста возвращает все его альбомы с количеством треков в них.', "task_solution_code_analytics": """ task_chinok_sqlite_1 """ }
{ "id" : 25, "unit": "chinok", "task_text": r'С помощью кода на Python с использованием sqlite3 и SQL решить задачу. Реализовать функции на Python: 1) Которая по имени исполнителя возвращает все его альбомы. 2) Которая по имени исполнителя и имени альбома возвращает количество треков в нем и их суммарную продолжительность.', "task_solution_code_analytics": """ task_chinok_sqlite_2 """ }
{ "id" : 26, "unit": "chinok", "task_text": r'С помощью кода на Python с использованием sqlite3 и SQL решить задачу. Реализовать функции на Python: 1) Которая возвращает все имеющиеся плейлисты. 2) Которая по имени плейлиста возвращает количество треков и их суммарную продолжительность', "task_solution_code_analytics": """ task_chinok_sqlite_3 """ }
{ "id" : 27, "unit": "titanik", "task_text": r'Заменить все пропущенные числовые значения возраста на значения, равные среднему значению для представителей этого класса пассажиров данного пола (не выполнять операцию, если неизвестен и возраст, и класс билета пассажира или его пол). Решить задачу средствами numpy и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.', "task_solution_code_analytics": """ task_titanic_1 """ }
{"id": 28, "unit": "speach_parts", "task_text": "выведите информацию о частях речи слов, входящих в предложение, в следующем виде:", "task_solution_code_analytics": "task_out_of_ds_1"}
{"id": 29, "unit": "movies", "task_text": "Из названий фильмов, заданных в файле movies.txt, выделить первое слово, последнее слово (если оно отличается от первого) и остальные слова (для названий, состоящих из 3х и более слов). Словом считается любой выделенный разделителями набор символов, не относящихся к знакам препинания (отдельно стоящий символ \"&\" считается словом). Найти по 2 самых длинных слова, относящихся к каждой из 3х групп. Сформировать из 6 найденных слов список. Распараллелить расчёт при помощи dask.delayed .", "task_solution_code_analytics": "task_movies_1"}
{"id": 30, "unit": "movies", "task_text": "Из названий фильмов, заданных в файле movies.txt, выделить первое слово, второе слово, третье слово и остальные слова. Второе и последующие слова выделяются, если они имеются, остальные слова названия включают четвёртое и все последующие слова названия. Словом считается любой выделенный разделителями набор символов, не относящихся к знакам препинания (отдельно стоящий символ \"&\" считается словом). Найти по 2 самых популярных слова, относящихся к каждой из 4х групп. Сформировать из 8 найденных слов список. Распараллелить расчёт при помощи disk.delayed.", "task_solution_code_analytics": "task_movies_2"}
{"id": 31, "unit": "money", "task_text": "С помощью кода на Python с использованием xlwings решить задачу. Вынести цены ресурсов (из всех таблиц на листе Рецептура) в новую таблицу на новом листе \"Цена ресурсов\". Заменить фиксированные цены ресурсов на листе \"Рецептура\" на ссылки на лист \"Цена ресурсов\".", "task_solution_code_analytics": "task_money_1"}
{"id": 32, "unit": "money", "task_text": "С помощью кода на Python с использованием xlwings решить задачу. В верхней таблице для строки \"Средний физический расход ресурсов\" пересчитать значения и сделать их равными среднему значению по рецептурам, содержащимся в данной таблице.", "task_solution_code_analytics": "task_money_2"}
{"id": 33, "unit": "other", "task_text": "Построить \"one-hot encoding\" для одномерного массива numpy из целых неотрицательных чисел (длина массива и максимальное значение в массиве заранее неизвестно). Протестировать свое решение на случайно сгенерированном одномерном массиве, соответствующем условию. Пример \"one-hot encoding\": для вектора \"np.arrav([2, 3, 2, 2, 2, 1]) ожидается результат: Решить задачу средствами numpy и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.", "task_solution_code_analytics": "task_other_1"}
{"id": 34, "unit": "other", "task_text": "Дан массив А. Построить массив В той же размерности, состояний из элементов, являющихся суммой минимального элемента массива А по соответствующей строке и минимального элемента А по соответствующему столбу. Решить задачу средствами петру и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.", "task_solution_code_analytics": "task_other_2"}
{"id": 35, "unit": "other", "task_text": "Задан двухмерный массив ar1 размерности (25, 4), состоящий из случайных целых чисел в пределах от 0 до 15. Определить, в каких столбцах не менее 5 раз встречается значение, максимальное по своей строке (вывести индексы этих столбцов на экран с соответствующим комментарием). Для столбца, в котором таких значений наибольшее количество, заменить максимумы по строке назначения -1. Решить задачу средствами numру и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.", "task_solution_code_analytics": "task_other_3"}
{"id": 36, "unit": "other", "task_text": "С помощью кода на Python с использованием регулярных выражений решить задачу. Реализовать функцию, которая ищет в тексте все слова, представляющие из себя последовательности латинских букв в нижнем регистре, разделенных одним символом подчеркивания (\"_\") и имеющие после подчеркивания один или более символ \"@\". Продемонстрировать корректную работу функции на примерах и контрпримерах.", "task_solution_code_analytics": "task_other_4"}
{"id": 37, "unit": "other", "task_text": "Задать два двухмерных массива ar1 и ar2 размерности (5, 15), состоящих из случайных целых чисел в интервале от -5 до 5. Если значение в ar2 имеет тот же знак, что и соответствующие (по расположению) значение из url, то прибавить это значение соответствующему значению ar1. Решить задачу средствами numpy и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.", "task_solution_code_analytics": "task_other_5"}
{"id": 38, "unit": "other", "task_text": "Создать двумерный массив 30 на 4, содержащий случайные целые числа от 0 до 100. Интерпретируя массив как 30 векторов из 4х компонент, вернуть массив 5 на 4, состоящий из векторов с наибольшей длиной (евклидовой нормой). Решить задачу средствами numpy и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.", "task_solution_code_analytics": "task_other_6"}
{"id": 39, "unit": "other", "task_text": " Создать массив arr размерности (10, 4) из случайных целых чисел от 0 до 50. Найти самое частое число в массиве (вывести на экран его значение и информацию о расположении всех этих значений в исходном массиве). Вернуть массив (3, 4), содержащий 3 строки из исходного массива, в которых находится наибольшее количество самых частотных значений. Код должен корректно работать в случае, если сразу несколько чисел являются самыми частотными. Решить задачу средствами numpy и/или pandas. Не использовать циклы и конструкции стандартного Python там, где можно использовать возможности данных библиотек.", "task_solution_code_analytics": "task_other_7"}
{"id": 40, "unit": "other", "task_text": "Необходимо найти все пары целых чисел от 1 до 3000, для которых sin от произведения чисел из пары будет иметь значение больше 0.99999999. Ответ представляет собой список пар (целое число1, целое число2, значение синуса для их произведения), для которых значение синуса удолетворяет условию. Решение этой задачи распараллелить, используя multiprocessing Pool. Сравнить продолжительность последовательного и параллельного решения задачи.", "task_solution_code_analytics": "task_other_8"}
{"id": 41, "unit": "other", "task_text": "Необходимо найти все целые числа от 1 до 400 000, для которых sin от этого числа будет иметь не менее 9 одинаковых цифр (например, sin(139198)=0.30763333543133703; sin(139198)=0.30763333543133703 т.е. имеет 9 троек). Ответ представляет собой список пар (целое число, значение синуса для него), для которых значение синуса удовлетворяет условию. Решение этой задачи распараллелить, используя multiprocessing Pool. Сравнить продолжительность последовательного и параллельного решения задачи.", "task_solution_code_analytics": "task_other_9"}