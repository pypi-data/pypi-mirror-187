# coding: utf-8

"""
    ELEMENTS API

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import elements_sdk
from elements_sdk.models.share_partial_update import SharePartialUpdate  # noqa: E501
from elements_sdk.rest import ApiException

class TestSharePartialUpdate(unittest.TestCase):
    """SharePartialUpdate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SharePartialUpdate
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = elements_sdk.models.share_partial_update.SharePartialUpdate()  # noqa: E501
        if include_optional :
            return SharePartialUpdate(
                sharing_nfs_permissions = [
                    '0'
                    ], 
                volume = elements_sdk.models.volume_reference.VolumeReference(
                    id = 56, 
                    name = '0', 
                    path = '0', 
                    nodes = [
                        56
                        ], 
                    display_name = '0', 
                    visual_tag = '0', 
                    is_default = True, 
                    use_for_homes = True, 
                    use_for_workspaces = True, 
                    type = 'generic', 
                    snm_enabled = True, 
                    snfs_name = '0', 
                    simulated_quotas = True, 
                    fs_properties = elements_sdk.models.fs_properties.FSProperties(
                        supports_directory_quotas = True, 
                        supports_soft_quotas = True, 
                        supports_user_quotas = True, 
                        supports_group_quotas = True, 
                        supports_xattrs = True, 
                        supports_snapshots = True, 
                        creating_directory_quota_destroys_content = True, 
                        removing_directory_quota_destroys_content = True, ), 
                    backend = elements_sdk.models.backend.Backend(
                        name = '0', 
                        properties = elements_sdk.models.backend_properties.BackendProperties(
                            supports_sharing_rw_permissions_priority = True, 
                            supports_sharing_afp = True, 
                            supports_sharing_smb_require_logon = True, 
                            supports_sharing_smb_recycle_bin = True, 
                            supports_sharing_smb_xattrs = True, 
                            supports_sharing_smb_symlinks = True, 
                            supports_sharing_smb_custom_options = True, 
                            supports_sharing_nfs_permissions = True, ), ), 
                    status = elements_sdk.models.volume_status.VolumeStatus(
                        online = True, 
                        size_total = 56, 
                        size_used = 56, 
                        size_free = 56, 
                        snfs = elements_sdk.models.volume_snfs_status.VolumeSNFSStatus(
                            stripe_groups = [
                                elements_sdk.models.snfs_stripe_group.SNFSStripeGroup(
                                    name = '0', 
                                    status_tags = [
                                        '0'
                                        ], 
                                    affinity = '0', 
                                    size_total = 56, 
                                    size_used = 56, 
                                    size_free = 56, )
                                ], ), 
                        lizardfs = elements_sdk.models.volume_lizard_fs_status.VolumeLizardFSStatus(
                            master = elements_sdk.models.storage_node_mini.StorageNodeMini(
                                id = 56, 
                                name = '0', 
                                address = '0', 
                                type = 1, ), 
                            nodes = [
                                elements_sdk.models.lizard_fs_node.LizardFSNode(
                                    node = elements_sdk.models.storage_node_mini.StorageNodeMini(
                                        id = 56, 
                                        name = '0', 
                                        address = '0', 
                                        type = 1, ), 
                                    host = '0', 
                                    online = True, 
                                    version = '0', 
                                    chunks = 56, 
                                    size_total = 56, 
                                    size_used = 56, 
                                    size_free = 56, 
                                    chunks_for_removal = 56, 
                                    label = '0', )
                                ], 
                            disks = [
                                elements_sdk.models.lizard_fs_disk.LizardFSDisk(
                                    host = '0', 
                                    mountpoint = '0', 
                                    to_delete = True, 
                                    damaged = True, 
                                    scanning = True, 
                                    error_chunk = 56, 
                                    error_timestamp = 56, 
                                    size_total = 56, 
                                    size_used = 56, 
                                    size_free = 56, 
                                    chunks = 56, )
                                ], ), 
                        beegfs = elements_sdk.models.volume_bee_gfs_status.VolumeBeeGFSStatus(
                            nodes = [
                                elements_sdk.models.bee_gfs_node.BeeGFSNode(
                                    host = '0', 
                                    roles = [
                                        '0'
                                        ], 
                                    addresses = [
                                        '0'
                                        ], )
                                ], 
                            targets = [
                                elements_sdk.models.bee_gfs_target.BeeGFSTarget(
                                    id = 56, 
                                    host = '0', 
                                    storage_pool = 56, 
                                    size_total = 56, 
                                    size_used = 56, 
                                    size_free = 56, 
                                    online = True, 
                                    consistent = True, 
                                    errors = [
                                        '0'
                                        ], )
                                ], ), ), ), 
                name = '0', 
                path = '0', 
                share_smb = True, 
                share_nfs = True, 
                share_afp = True, 
                sharing_read_only = True, 
                sharing_hidden = True, 
                sharing_require_login = True, 
                smb_extra_config = '0', 
                afp_extra_config = '0', 
                rw_access_group = 56, 
                ro_access_group = 56
            )
        else :
            return SharePartialUpdate(
        )

    def testSharePartialUpdate(self):
        """Test SharePartialUpdate"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
