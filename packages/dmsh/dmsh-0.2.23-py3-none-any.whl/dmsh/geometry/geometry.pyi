from ..helpers import find_feature_points as find_feature_points
from _typeshed import Incomplete

class Geometry:
    bounding_box: Incomplete
    feature_points: Incomplete
    def __init__(self, bounding_box, feature_points) -> None: ...
    def dist(self, _) -> None: ...
    def plot(self, level_set: bool = ...) -> None: ...
    def show(self, *args, **kwargs) -> None: ...
    def __add__(self, obj): ...
    def __radd__(self, obj): ...
    def __sub__(self, obj): ...
    def __and__(self, obj): ...
    def __or__(self, obj): ...
    def __mul__(self, alpha: float): ...
    def __rmul__(self, alpha: float): ...
    def stretch(self, obj): ...

class Union(Geometry):
    geometries: Incomplete
    paths: Incomplete
    def __init__(self, geometries) -> None: ...
    def dist(self, x): ...
    def boundary_step(self, x, tol: float = ..., max_steps: int = ...): ...

class Stretch(Geometry):
    geometry: Incomplete
    alpha: Incomplete
    v: Incomplete
    def __init__(self, geometry, v) -> None: ...
    def dist(self, x): ...
    def boundary_step(self, x): ...

class Difference(Geometry):
    geo0: Incomplete
    geo1: Incomplete
    paths: Incomplete
    def __init__(self, geo0, geo1) -> None: ...
    def dist(self, x): ...
    def boundary_step(self, x, tol: float = ..., max_steps: int = ...): ...

class Translation(Geometry):
    geometry: Incomplete
    v: Incomplete
    def __init__(self, geometry, v) -> None: ...
    def dist(self, x): ...
    def boundary_step(self, x): ...

class Intersection(Geometry):
    geometries: Incomplete
    paths: Incomplete
    def __init__(self, geometries) -> None: ...
    def dist(self, x): ...
    def boundary_step(self, x, tol: float = ..., max_steps: int = ...): ...

class Scaling(Geometry):
    geometry: Incomplete
    alpha: Incomplete
    def __init__(self, geometry: Geometry, alpha: float) -> None: ...
    def dist(self, x): ...
    def boundary_step(self, x): ...
