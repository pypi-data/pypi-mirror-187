from __future__ import print_function
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.models import load_model
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from common.metrics_cal import metrics_cal
import numpy as np
import sys
import os


aa = len(sys.argv)
if aa >1:
    lr = float(sys.argv[1])
else:
    lr=0.01

batch_size = 32
num_classes = 10
epochs = 1
data_augmentation = True
num_predictions = 20


# The data, split between train and test sets:
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

# initiate RMSprop optimizer
#opt = keras.optimizers.RMSprop(learning_rate=0.0001, decay=1e-6)
opt = keras.optimizers.SGD(lr=lr,decay=1e-6,momentum=0.9, nesterov=True)
# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
def set_real_time(data_augmentation):
    if not data_augmentation:
        print('Not using data augmentation.')
        model.fit(x_train, y_train,
                  batch_size=batch_size,
                  epochs=epochs,
                  validation_data=(x_test, y_test),
                  shuffle=True)
    else:
        print('Using real-time data augmentation.')
        # This will do preprocessing and realtime data augmentation:
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            zca_epsilon=1e-06,  # epsilon for ZCA whitening
            rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
            # randomly shift images horizontally (fraction of total width)
            width_shift_range=0.1,
            # randomly shift images vertically (fraction of total height)
            height_shift_range=0.1,
            shear_range=0.,  # set range for random shear
            zoom_range=0.,  # set range for random zoom
            channel_shift_range=0.,  # set range for random channel shifts
            # set mode for filling points outside the input boundaries
            fill_mode='nearest',
            cval=0.,  # value used for fill_mode = "constant"
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False,  # randomly flip images
            # set rescaling factor (applied before any other transformation)
            rescale=None,
            # set function that will be applied on each input
            preprocessing_function=None,
            # image data format, either "channels_first" or "channels_last"
            data_format=None,
            # fraction of images reserved for validation (strictly between 0 and 1)
            validation_split=0.0)
    
        # Compute quantities required for feature-wise normalization
        # (std, mean, and principal components if ZCA whitening is applied).
        datagen.fit(x_train)
    
        # Fit the model on the batches generated by datagen.flow().
        model.fit_generator(datagen.flow(x_train, y_train,
                                         batch_size=batch_size),
                            epochs=epochs,
                            validation_data=(x_test, y_test),
                            workers=4, verbose=2)
    return datagen

datagen = set_real_time(True)
save_dir = os.path.join(os.getcwd(), 'saved_models')
model_name = '0epoch_keras_cifar10_trained_model.h5'
if not os.path.isdir(save_dir):
    os.makedirs(save_dir)
weight_name = '0epoch_weight.h5'
model_path = os.path.join(save_dir, model_name)
weight_path = os.path.join(save_dir, weight_name)
model.save(model_path)
model.save_weights(weight_path)
file_name = 'keras_cifar-10_detailed.txt'
file_path= os.path.join(save_dir,file_name)    
file_ =open(file_path, 'w')
print('Saved trained model at %s ' % model_path, file_path)
#datagen = set_real_time(True)
#model.save_weights(weight_path)
predic = model.predict(x_test)
scala_predic = np.empty(0)
scala_y_test = np.empty(0)
for h in range(len(predic)): 
    predic_val = np.argmax(predic[h])
    y_test_val = np.argmax(y_test[h])
    scala_predic = np.hstack([scala_predic,predic_val])
    scala_y_test = np.hstack([scala_y_test,y_test_val])
    
val = metrics_cal()
val.metrics_num(scala_y_test, scala_predic)

print('accuracy_arr: ',val.accuracy_arr,'\n confusion_arr: ',val.confusion_arr,'\n precision_arr: ',val.precision_arr,'\n recall_arr: ', val.recall_arr,'\n mmc_arr: ',val.mmc_arr,'\n sensitivity_arr: ',val.sensitivity_arr,'\n specificity_arr: ',val.specificity_arr, file=file_)
print('accuracy: ',val.accuracy_avg,' confusion: ',val.confusion_avg,' precision: ',val.precision_avg,' recall: ', val.recall_avg,' mmc: ',val.mmc_avg, ' sensitivity: ',val.sensitivity_avg, ' specificity: ',val.specificity_avg,file=file_)  
val.metrics_plot(scala_y_test, scala_predic,'keras',0, save_dir)
scores = model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', scores[0], file_)
print('Test accuracy:', scores[1], file_)

iterations=100
for i in range(int(iterations)):
    model_s = load_model(model_path)
    model_s.load_weights(weight_path)
    
    opt = keras.optimizers.SGD(lr=0.01,decay=1e-6,momentum=0.9, nesterov=True)
    # Let's train the model using RMSprop
    model_s.compile(loss='categorical_crossentropy',
                  optimizer=opt,
                  metrics=['accuracy'])
    #datagen = set_real_time(True)
    # Fit the model on the batches generated by datagen.flow().
    
    
    model_s.fit_generator(datagen.flow(x_train, y_train,
                                     batch_size=batch_size),
                        epochs=1,
                        validation_data=(x_test, y_test),
                        workers=4)
                        
    if not os.path.isdir(save_dir):
        os.makedirs(save_dir)
    weight_name = str(i+1)+'epoch_weight.h5'
    model_name = str(i+1)+'_keras_cifar10_trained_model.h5'
    model_path = os.path.join(save_dir, model_name)
    weight_path = os.path.join(save_dir, weight_name)
    model_s.save(model_path)
    model_s.save_weights(weight_path)
    print('Saved trained model at %s ' % model_path)
    #datagen = set_real_time(True)
    #model.save_weights(weight_path)
    predic = model_s.predict(x_test)
    scala_predic = np.empty(0)
    scala_y_test = np.empty(0)
    for h in range(len(predic)): 
        predic_val = np.argmax(predic[h])
        y_test_val = np.argmax(y_test[h])
        scala_predic = np.hstack([scala_predic,predic_val])
        scala_y_test = np.hstack([scala_y_test,y_test_val])
        
    val = metrics_cal()
    val.metrics_num(scala_y_test, scala_predic)
    
    print('accuracy_arr: ',val.accuracy_arr,'\n confusion_arr: ',val.confusion_arr,'\n precision_arr: ',val.precision_arr,'\n recall_arr: ', val.recall_arr,'\n mmc_arr: ',val.mmc_arr,'\n sensitivity_arr: ',val.sensitivity_arr,'\n specificity_arr: ',val.specificity_arr, file=file_)
    print('accuracy: ',val.accuracy_avg,' confusion: ',val.confusion_avg,' precision: ',val.precision_avg,' recall: ', val.recall_avg,' mmc: ',val.mmc_avg, ' sensitivity: ',val.sensitivity_avg, ' specificity: ',val.specificity_avg,file=file_)  
    val.metrics_plot(scala_y_test, scala_predic,'keras',i+1, save_dir)
    scores = model_s.evaluate(x_test, y_test, verbose=1)
    print('Test loss:', scores[0], file_)
    print('Test accuracy:', scores[1], file_)
file_.close()