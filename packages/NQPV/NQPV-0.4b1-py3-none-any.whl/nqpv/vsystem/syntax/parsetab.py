
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ABORT ASSIGN AT AXIOM DEF DO ELSE END EPS EXAMPLE FALSE FLOAT_NUM ID IDENTICAL_VAR_CHECK IF IMPORT INIT INV LOAD MUL_EQ OPERATOR OPT_PRESERVING PROGRAM PROOF SAVE SCOPE SDP_PRECISION SETTING SHOW SILENT SKIP STRING THEN TRUE WHILE\n    scope   : cmd\n            | scope cmd\n    \n    cmd     : definition\n            | example\n            | axiom\n            | show\n            | setting\n            | save\n    \n    save    : SAVE var AT STRING END\n    \n    setting : SETTING EPS ASSIGN FLOAT_NUM END\n            | SETTING SDP_PRECISION ASSIGN FLOAT_NUM END\n            | SETTING SILENT ASSIGN TRUE END\n            | SETTING SILENT ASSIGN FALSE END\n            | SETTING IDENTICAL_VAR_CHECK ASSIGN TRUE END\n            | SETTING IDENTICAL_VAR_CHECK ASSIGN FALSE END\n            | SETTING OPT_PRESERVING ASSIGN TRUE END\n            | SETTING OPT_PRESERVING ASSIGN FALSE END\n    \n    show    : SHOW expression END\n    \n    definition  : DEF id ASSIGN expression END\n    \n    example : EXAMPLE ASSIGN expression END\n    \n    axiom   : AXIOM id ':' predicate PROGRAM qvar_ls predicate END\n    \n    type    : PROGRAM qvar_ls\n            | PROOF qvar_ls\n            | SCOPE\n            | OPERATOR\n    \n    expression  : expr_data\n                | var\n    \n    expr_data   : type ':' prog\n                | type ':' proof\n                | scope\n                | load\n                | import\n    \n    import  : IMPORT STRING\n    \n    load    : LOAD STRING\n    \n    qvar_ls : qvar_ls_pre ']'\n    \n    qvar_ls_pre : '[' id\n                | qvar_ls_pre id\n    \n    predicate   : predicate_pre '}'\n    \n    predicate_pre   : '{' var qvar_ls\n                    | predicate_pre var qvar_ls\n    \n    prog    : statement\n            | prog ';' statement\n    \n    statement : skip\n                | abort\n                | init\n                | unitary\n                | if\n                | while\n                | nondet\n    \n    skip    : SKIP\n    \n    abort   : ABORT\n    \n    init    : id INIT\n            | qvar_ls INIT\n    \n    unitary : id MUL_EQ var\n            | qvar_ls MUL_EQ var\n    \n    if      : IF var qvar_ls THEN prog ELSE prog END\n    \n    while   : WHILE var qvar_ls DO prog END\n    \n    nondet  : nondet_pre '#' prog ')'\n    \n    nondet_pre  : '(' prog\n                | nondet_pre '#' prog\n    \n    proof   : predicate ';' proof_mid ';' predicate\n    \n    proof_mid   : proof_statement\n                | proof_mid ';' proof_statement\n    \n    proof_statement : skip\n                    | abort\n                    | init\n                    | unitary\n                    | if_proof\n                    | while_proof\n                    | nondet_proof\n                    | union_proof\n                    | predicate\n    \n    if_proof    : IF var qvar_ls THEN proof_mid ELSE proof_mid END\n    \n    while_proof : inv ';' WHILE var qvar_ls DO proof_mid END\n    \n    nondet_proof  : nondet_proof_pre '#' proof_mid ')'\n    \n    nondet_proof_pre    : '(' proof_mid\n                        | nondet_proof_pre '#' proof_mid\n    \n    union_proof : union_proof_pre ',' proof_mid ')'\n    \n    union_proof_pre : '(' proof_mid\n                    | union_proof_pre ',' proof_mid\n    \n    inv     : inv_pre '}'\n    \n    inv_pre : '{' INV ':' var qvar_ls\n            | inv_pre var qvar_ls\n    \n    var     : id\n            | var_pre id\n    \n    var_pre : id '.'\n            | var_pre id '.'\n    \n    id      : ID\n    "
    
_lr_action_items = {'DEF':([0,1,2,3,4,5,6,7,8,12,15,18,24,41,44,61,97,112,113,114,115,116,117,118,119,120,161,],[9,9,-1,-3,-4,-5,-6,-7,-8,9,-2,9,9,9,-18,-20,-19,-10,-11,-12,-13,-14,-15,-16,-17,-9,-21,]),'EXAMPLE':([0,1,2,3,4,5,6,7,8,12,15,18,24,41,44,61,97,112,113,114,115,116,117,118,119,120,161,],[10,10,-1,-3,-4,-5,-6,-7,-8,10,-2,10,10,10,-18,-20,-19,-10,-11,-12,-13,-14,-15,-16,-17,-9,-21,]),'AXIOM':([0,1,2,3,4,5,6,7,8,12,15,18,24,41,44,61,97,112,113,114,115,116,117,118,119,120,161,],[11,11,-1,-3,-4,-5,-6,-7,-8,11,-2,11,11,11,-18,-20,-19,-10,-11,-12,-13,-14,-15,-16,-17,-9,-21,]),'SHOW':([0,1,2,3,4,5,6,7,8,12,15,18,24,41,44,61,97,112,113,114,115,116,117,118,119,120,161,],[12,12,-1,-3,-4,-5,-6,-7,-8,12,-2,12,12,12,-18,-20,-19,-10,-11,-12,-13,-14,-15,-16,-17,-9,-21,]),'SETTING':([0,1,2,3,4,5,6,7,8,12,15,18,24,41,44,61,97,112,113,114,115,116,117,118,119,120,161,],[13,13,-1,-3,-4,-5,-6,-7,-8,13,-2,13,13,13,-18,-20,-19,-10,-11,-12,-13,-14,-15,-16,-17,-9,-21,]),'SAVE':([0,1,2,3,4,5,6,7,8,12,15,18,24,41,44,61,97,112,113,114,115,116,117,118,119,120,161,],[14,14,-1,-3,-4,-5,-6,-7,-8,14,-2,14,14,14,-18,-20,-19,-10,-11,-12,-13,-14,-15,-16,-17,-9,-21,]),'$end':([1,2,3,4,5,6,7,8,15,44,61,97,112,113,114,115,116,117,118,119,120,161,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-18,-20,-19,-10,-11,-12,-13,-14,-15,-16,-17,-9,-21,]),'END':([2,3,4,5,6,7,8,15,17,20,21,22,24,25,26,27,42,44,47,52,53,60,61,65,66,67,69,70,71,72,73,74,75,76,77,88,89,90,91,92,93,94,95,96,97,99,104,106,112,113,114,115,116,117,118,119,120,124,125,127,128,129,130,131,132,133,134,135,143,144,148,160,161,162,163,172,175,176,179,183,186,187,188,189,190,],[-1,-3,-4,-5,-6,-7,-8,-2,-88,44,-26,-27,-30,-31,-32,-84,61,-18,-85,-34,-33,97,-20,-28,-29,-41,-43,-44,-45,-46,-47,-48,-49,-50,-51,112,113,114,115,116,117,118,119,120,-19,-38,-52,-53,-10,-11,-12,-13,-14,-15,-16,-17,-9,-42,-72,-62,-64,-65,-66,-67,-68,-69,-70,-71,-54,-55,161,-58,-21,-61,-63,179,-75,-78,-57,186,-56,189,190,-73,-74,]),'ID':([9,11,12,14,17,18,28,41,45,46,49,50,63,64,80,81,83,84,85,86,87,102,103,105,107,110,122,123,136,140,141,142,149,152,153,158,159,165,168,169,170,173,178,182,184,185,],[17,17,17,17,-88,17,17,17,17,-86,17,17,17,17,17,17,17,-87,-35,-37,-36,17,17,17,17,17,-40,-39,17,17,17,17,17,17,17,17,17,17,-83,17,17,17,17,-82,17,17,]),'ASSIGN':([10,16,17,35,36,37,38,39,],[18,41,-88,54,55,56,57,58,]),'PROGRAM':([12,18,41,62,99,],[29,29,29,98,-38,]),'PROOF':([12,18,41,],[30,30,30,]),'SCOPE':([12,18,41,],[31,31,31,]),'OPERATOR':([12,18,41,],[32,32,32,]),'LOAD':([12,18,41,],[33,33,33,]),'IMPORT':([12,18,41,],[34,34,34,]),'EPS':([13,],[35,]),'SDP_PRECISION':([13,],[36,]),'SILENT':([13,],[37,]),'IDENTICAL_VAR_CHECK':([13,],[38,]),'OPT_PRESERVING':([13,],[39,]),':':([17,19,23,31,32,48,51,85,157,],[-88,43,45,-24,-25,-22,-23,-35,170,]),'.':([17,27,47,],[-88,46,84,]),'AT':([17,27,40,47,],[-88,-84,59,-85,]),'[':([17,27,29,30,45,47,83,98,100,101,102,103,108,109,110,141,149,150,152,153,155,158,159,169,173,174,177,178,184,185,],[-88,-84,50,50,50,-85,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),';':([17,27,47,65,67,68,69,70,71,72,73,74,75,76,77,99,104,106,111,124,125,126,127,128,129,130,131,132,133,134,135,137,143,144,147,154,156,160,162,163,166,167,171,172,175,176,179,180,183,186,187,188,189,190,],[-88,-84,-85,102,-41,103,-43,-44,-45,-46,-47,-48,-49,-50,-51,-38,-52,-53,102,-42,-72,149,-62,-64,-65,-66,-67,-68,-69,-70,-71,151,-54,-55,102,-81,169,-58,-72,-63,169,169,102,102,-75,-78,-57,169,102,-56,169,169,-73,-74,]),'#':([17,27,47,67,69,70,71,72,73,74,75,76,77,82,99,104,106,111,124,125,127,128,129,130,131,132,133,134,135,138,143,144,147,156,160,163,166,175,176,179,186,189,190,],[-88,-84,-85,-41,-43,-44,-45,-46,-47,-48,-49,-50,-51,110,-38,-52,-53,-59,-42,-72,-62,-64,-65,-66,-67,-68,-69,-70,-71,152,-54,-55,-60,-76,-58,-63,-77,-75,-78,-57,-56,-73,-74,]),')':([17,27,47,67,69,70,71,72,73,74,75,76,77,99,104,106,124,125,127,128,129,130,131,132,133,134,135,143,144,147,160,163,166,167,175,176,179,186,189,190,],[-88,-84,-85,-41,-43,-44,-45,-46,-47,-48,-49,-50,-51,-38,-52,-53,-42,-72,-62,-64,-65,-66,-67,-68,-69,-70,-71,-54,-55,160,-58,-63,175,176,-75,-78,-57,-56,-73,-74,]),'ELSE':([17,27,47,67,69,70,71,72,73,74,75,76,77,99,104,106,124,125,127,128,129,130,131,132,133,134,135,143,144,160,163,171,175,176,179,180,186,189,190,],[-88,-84,-85,-41,-43,-44,-45,-46,-47,-48,-49,-50,-51,-38,-52,-53,-42,-72,-62,-64,-65,-66,-67,-68,-69,-70,-71,-54,-55,-58,-63,178,-75,-78,-57,184,-56,-73,-74,]),',':([17,27,47,76,77,99,104,106,125,127,128,129,130,131,132,133,134,135,139,143,144,156,163,167,175,176,189,190,],[-88,-84,-85,-50,-51,-38,-52,-53,-72,-62,-64,-65,-66,-67,-68,-69,-70,-71,153,-54,-55,-79,-63,-80,-75,-78,-73,-74,]),'INIT':([17,78,79,85,],[-88,104,106,-35,]),'MUL_EQ':([17,78,79,85,],[-88,105,107,-35,]),']':([17,49,86,87,],[-88,85,-37,-36,]),'STRING':([33,34,59,],[52,53,96,]),'{':([43,45,85,103,121,141,149,152,153,169,173,184,185,],[64,64,-35,142,64,142,142,142,142,142,142,142,142,]),'SKIP':([45,83,102,103,110,141,149,152,153,158,159,169,173,178,184,185,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'ABORT':([45,83,102,103,110,141,149,152,153,158,159,169,173,178,184,185,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'IF':([45,83,102,103,110,141,149,152,153,158,159,169,173,178,184,185,],[80,80,80,136,80,136,136,136,136,80,80,136,136,80,136,136,]),'WHILE':([45,83,102,110,151,158,159,178,],[81,81,81,81,165,81,81,81,]),'(':([45,83,102,103,110,141,149,152,153,158,159,169,173,178,184,185,],[83,83,83,141,83,141,141,141,141,83,83,141,141,83,141,141,]),'FLOAT_NUM':([54,55,],[88,89,]),'TRUE':([56,57,58,],[90,92,94,]),'FALSE':([56,57,58,],[91,93,95,]),'}':([63,85,122,123,140,168,182,],[99,-35,-40,-39,154,-83,-82,]),'THEN':([85,145,164,],[-35,158,173,]),'DO':([85,146,181,],[-35,159,185,]),'INV':([142,],[157,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'scope':([0,12,18,41,],[1,24,24,24,]),'cmd':([0,1,12,18,24,41,],[2,15,2,2,15,2,]),'definition':([0,1,12,18,24,41,],[3,3,3,3,3,3,]),'example':([0,1,12,18,24,41,],[4,4,4,4,4,4,]),'axiom':([0,1,12,18,24,41,],[5,5,5,5,5,5,]),'show':([0,1,12,18,24,41,],[6,6,6,6,6,6,]),'setting':([0,1,12,18,24,41,],[7,7,7,7,7,7,]),'save':([0,1,12,18,24,41,],[8,8,8,8,8,8,]),'id':([9,11,12,14,18,28,41,45,49,50,63,64,80,81,83,102,103,105,107,110,136,140,141,142,149,152,153,158,159,165,169,170,173,178,184,185,],[16,19,27,27,27,47,27,78,86,87,27,27,27,27,78,78,78,27,27,78,27,27,78,27,78,78,78,78,78,27,78,27,78,78,78,78,]),'expression':([12,18,41,],[20,42,60,]),'expr_data':([12,18,41,],[21,21,21,]),'var':([12,14,18,41,63,64,80,81,105,107,136,140,142,165,170,],[22,40,22,22,100,101,108,109,143,144,150,155,101,174,177,]),'type':([12,18,41,],[23,23,23,]),'load':([12,18,41,],[25,25,25,]),'import':([12,18,41,],[26,26,26,]),'var_pre':([12,14,18,41,63,64,80,81,105,107,136,140,142,165,170,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'qvar_ls':([29,30,45,83,98,100,101,102,103,108,109,110,141,149,150,152,153,155,158,159,169,173,174,177,178,184,185,],[48,51,79,79,121,122,123,79,79,145,146,79,79,79,164,79,79,168,79,79,79,79,181,182,79,79,79,]),'qvar_ls_pre':([29,30,45,83,98,100,101,102,103,108,109,110,141,149,150,152,153,155,158,159,169,173,174,177,178,184,185,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'predicate':([43,45,103,121,141,149,152,153,169,173,184,185,],[62,68,125,148,125,162,125,125,125,125,125,125,]),'predicate_pre':([43,45,103,121,141,149,152,153,169,173,184,185,],[63,63,63,63,63,63,63,63,63,63,63,63,]),'prog':([45,83,110,158,159,178,],[65,111,147,171,172,183,]),'proof':([45,],[66,]),'statement':([45,83,102,110,158,159,178,],[67,67,124,67,67,67,67,]),'skip':([45,83,102,103,110,141,149,152,153,158,159,169,173,178,184,185,],[69,69,69,128,69,128,128,128,128,69,69,128,128,69,128,128,]),'abort':([45,83,102,103,110,141,149,152,153,158,159,169,173,178,184,185,],[70,70,70,129,70,129,129,129,129,70,70,129,129,70,129,129,]),'init':([45,83,102,103,110,141,149,152,153,158,159,169,173,178,184,185,],[71,71,71,130,71,130,130,130,130,71,71,130,130,71,130,130,]),'unitary':([45,83,102,103,110,141,149,152,153,158,159,169,173,178,184,185,],[72,72,72,131,72,131,131,131,131,72,72,131,131,72,131,131,]),'if':([45,83,102,110,158,159,178,],[73,73,73,73,73,73,73,]),'while':([45,83,102,110,158,159,178,],[74,74,74,74,74,74,74,]),'nondet':([45,83,102,110,158,159,178,],[75,75,75,75,75,75,75,]),'nondet_pre':([45,83,102,110,158,159,178,],[82,82,82,82,82,82,82,]),'proof_mid':([103,141,152,153,173,184,185,],[126,156,166,167,180,187,188,]),'proof_statement':([103,141,149,152,153,169,173,184,185,],[127,127,163,127,127,163,127,127,127,]),'if_proof':([103,141,149,152,153,169,173,184,185,],[132,132,132,132,132,132,132,132,132,]),'while_proof':([103,141,149,152,153,169,173,184,185,],[133,133,133,133,133,133,133,133,133,]),'nondet_proof':([103,141,149,152,153,169,173,184,185,],[134,134,134,134,134,134,134,134,134,]),'union_proof':([103,141,149,152,153,169,173,184,185,],[135,135,135,135,135,135,135,135,135,]),'inv':([103,141,149,152,153,169,173,184,185,],[137,137,137,137,137,137,137,137,137,]),'nondet_proof_pre':([103,141,149,152,153,169,173,184,185,],[138,138,138,138,138,138,138,138,138,]),'union_proof_pre':([103,141,149,152,153,169,173,184,185,],[139,139,139,139,139,139,139,139,139,]),'inv_pre':([103,141,149,152,153,169,173,184,185,],[140,140,140,140,140,140,140,140,140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> scope","S'",1,None,None,None),
  ('scope -> cmd','scope',1,'p_scope','vparser.py',37),
  ('scope -> scope cmd','scope',2,'p_scope','vparser.py',38),
  ('cmd -> definition','cmd',1,'p_cmd','vparser.py',50),
  ('cmd -> example','cmd',1,'p_cmd','vparser.py',51),
  ('cmd -> axiom','cmd',1,'p_cmd','vparser.py',52),
  ('cmd -> show','cmd',1,'p_cmd','vparser.py',53),
  ('cmd -> setting','cmd',1,'p_cmd','vparser.py',54),
  ('cmd -> save','cmd',1,'p_cmd','vparser.py',55),
  ('save -> SAVE var AT STRING END','save',5,'p_save','vparser.py',64),
  ('setting -> SETTING EPS ASSIGN FLOAT_NUM END','setting',5,'p_setting','vparser.py',73),
  ('setting -> SETTING SDP_PRECISION ASSIGN FLOAT_NUM END','setting',5,'p_setting','vparser.py',74),
  ('setting -> SETTING SILENT ASSIGN TRUE END','setting',5,'p_setting','vparser.py',75),
  ('setting -> SETTING SILENT ASSIGN FALSE END','setting',5,'p_setting','vparser.py',76),
  ('setting -> SETTING IDENTICAL_VAR_CHECK ASSIGN TRUE END','setting',5,'p_setting','vparser.py',77),
  ('setting -> SETTING IDENTICAL_VAR_CHECK ASSIGN FALSE END','setting',5,'p_setting','vparser.py',78),
  ('setting -> SETTING OPT_PRESERVING ASSIGN TRUE END','setting',5,'p_setting','vparser.py',79),
  ('setting -> SETTING OPT_PRESERVING ASSIGN FALSE END','setting',5,'p_setting','vparser.py',80),
  ('show -> SHOW expression END','show',3,'p_show','vparser.py',102),
  ('definition -> DEF id ASSIGN expression END','definition',5,'p_definition','vparser.py',111),
  ('example -> EXAMPLE ASSIGN expression END','example',4,'p_example','vparser.py',120),
  ('axiom -> AXIOM id : predicate PROGRAM qvar_ls predicate END','axiom',8,'p_axiom','vparser.py',129),
  ('type -> PROGRAM qvar_ls','type',2,'p_type','vparser.py',138),
  ('type -> PROOF qvar_ls','type',2,'p_type','vparser.py',139),
  ('type -> SCOPE','type',1,'p_type','vparser.py',140),
  ('type -> OPERATOR','type',1,'p_type','vparser.py',141),
  ('expression -> expr_data','expression',1,'p_expression','vparser.py',158),
  ('expression -> var','expression',1,'p_expression','vparser.py',159),
  ('expr_data -> type : prog','expr_data',3,'p_expr_data','vparser.py',171),
  ('expr_data -> type : proof','expr_data',3,'p_expr_data','vparser.py',172),
  ('expr_data -> scope','expr_data',1,'p_expr_data','vparser.py',173),
  ('expr_data -> load','expr_data',1,'p_expr_data','vparser.py',174),
  ('expr_data -> import','expr_data',1,'p_expr_data','vparser.py',175),
  ('import -> IMPORT STRING','import',2,'p_import','vparser.py',190),
  ('load -> LOAD STRING','load',2,'p_load','vparser.py',200),
  ('qvar_ls -> qvar_ls_pre ]','qvar_ls',2,'p_qvar_ls','vparser.py',209),
  ('qvar_ls_pre -> [ id','qvar_ls_pre',2,'p_qvar_ls_pre','vparser.py',218),
  ('qvar_ls_pre -> qvar_ls_pre id','qvar_ls_pre',2,'p_qvar_ls_pre','vparser.py',219),
  ('predicate -> predicate_pre }','predicate',2,'p_predicate','vparser.py',231),
  ('predicate_pre -> { var qvar_ls','predicate_pre',3,'p_predicate_pre','vparser.py',240),
  ('predicate_pre -> predicate_pre var qvar_ls','predicate_pre',3,'p_predicate_pre','vparser.py',241),
  ('prog -> statement','prog',1,'p_prog','vparser.py',254),
  ('prog -> prog ; statement','prog',3,'p_prog','vparser.py',255),
  ('statement -> skip','statement',1,'p_statement','vparser.py',267),
  ('statement -> abort','statement',1,'p_statement','vparser.py',268),
  ('statement -> init','statement',1,'p_statement','vparser.py',269),
  ('statement -> unitary','statement',1,'p_statement','vparser.py',270),
  ('statement -> if','statement',1,'p_statement','vparser.py',271),
  ('statement -> while','statement',1,'p_statement','vparser.py',272),
  ('statement -> nondet','statement',1,'p_statement','vparser.py',273),
  ('skip -> SKIP','skip',1,'p_skip','vparser.py',283),
  ('abort -> ABORT','abort',1,'p_abort','vparser.py',292),
  ('init -> id INIT','init',2,'p_init','vparser.py',301),
  ('init -> qvar_ls INIT','init',2,'p_init','vparser.py',302),
  ('unitary -> id MUL_EQ var','unitary',3,'p_unitary','vparser.py',315),
  ('unitary -> qvar_ls MUL_EQ var','unitary',3,'p_unitary','vparser.py',316),
  ('if -> IF var qvar_ls THEN prog ELSE prog END','if',8,'p_if','vparser.py',329),
  ('while -> WHILE var qvar_ls DO prog END','while',6,'p_while','vparser.py',338),
  ('nondet -> nondet_pre # prog )','nondet',4,'p_nondet','vparser.py',347),
  ('nondet_pre -> ( prog','nondet_pre',2,'p_nondet_pre','vparser.py',356),
  ('nondet_pre -> nondet_pre # prog','nondet_pre',3,'p_nondet_pre','vparser.py',357),
  ('proof -> predicate ; proof_mid ; predicate','proof',5,'p_proof','vparser.py',369),
  ('proof_mid -> proof_statement','proof_mid',1,'p_proof_mid','vparser.py',378),
  ('proof_mid -> proof_mid ; proof_statement','proof_mid',3,'p_proof_mid','vparser.py',379),
  ('proof_statement -> skip','proof_statement',1,'p_proof_statement','vparser.py',391),
  ('proof_statement -> abort','proof_statement',1,'p_proof_statement','vparser.py',392),
  ('proof_statement -> init','proof_statement',1,'p_proof_statement','vparser.py',393),
  ('proof_statement -> unitary','proof_statement',1,'p_proof_statement','vparser.py',394),
  ('proof_statement -> if_proof','proof_statement',1,'p_proof_statement','vparser.py',395),
  ('proof_statement -> while_proof','proof_statement',1,'p_proof_statement','vparser.py',396),
  ('proof_statement -> nondet_proof','proof_statement',1,'p_proof_statement','vparser.py',397),
  ('proof_statement -> union_proof','proof_statement',1,'p_proof_statement','vparser.py',398),
  ('proof_statement -> predicate','proof_statement',1,'p_proof_statement','vparser.py',399),
  ('if_proof -> IF var qvar_ls THEN proof_mid ELSE proof_mid END','if_proof',8,'p_if_proof','vparser.py',408),
  ('while_proof -> inv ; WHILE var qvar_ls DO proof_mid END','while_proof',8,'p_while_proof','vparser.py',417),
  ('nondet_proof -> nondet_proof_pre # proof_mid )','nondet_proof',4,'p_nondet_proof','vparser.py',426),
  ('nondet_proof_pre -> ( proof_mid','nondet_proof_pre',2,'p_nondet_proof_pre','vparser.py',435),
  ('nondet_proof_pre -> nondet_proof_pre # proof_mid','nondet_proof_pre',3,'p_nondet_proof_pre','vparser.py',436),
  ('union_proof -> union_proof_pre , proof_mid )','union_proof',4,'p_union_proof','vparser.py',448),
  ('union_proof_pre -> ( proof_mid','union_proof_pre',2,'p_union_proof_pre','vparser.py',457),
  ('union_proof_pre -> union_proof_pre , proof_mid','union_proof_pre',3,'p_union_proof_pre','vparser.py',458),
  ('inv -> inv_pre }','inv',2,'p_inv','vparser.py',471),
  ('inv_pre -> { INV : var qvar_ls','inv_pre',5,'p_inv_pre','vparser.py',480),
  ('inv_pre -> inv_pre var qvar_ls','inv_pre',3,'p_inv_pre','vparser.py',481),
  ('var -> id','var',1,'p_var','vparser.py',493),
  ('var -> var_pre id','var',2,'p_var','vparser.py',494),
  ('var_pre -> id .','var_pre',2,'p_var_pre','vparser.py',506),
  ('var_pre -> var_pre id .','var_pre',3,'p_var_pre','vparser.py',507),
  ('id -> ID','id',1,'p_id','vparser.py',519),
]
