# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['corpus_base', 'corpus_base.utils']

package_data = \
{'': ['*'], 'corpus_base': ['templates/*']}

install_requires = \
['citation-utils>=0.0.17,<0.0.18',
 'corpus-pax>=0.1.10,<0.2.0',
 'markdownify>=0.11.6,<0.12.0',
 'unidecode>=1.3.6,<2.0.0']

setup_kwargs = {
    'name': 'corpus-base',
    'version': '0.1.7',
    'description': 'Add justice, decision, citation, voting, opinion, and segment tables to pre-existing corpus-pax database.',
    'long_description': '# Corpus-Base\n\n## Overview\n\n```mermaid\nflowchart TD\npax(corpus-pax)--github api--->sc\nsubgraph /corpus\n  1(justices)\n  2(decisions/sc)\n  3(decisions/legacy)\nend\nsubgraph local\n  1--github api---sc\n  2--local copy of corpus---sc\n  3--local copy of corpus---sc\n  sc(corpus-base)--run setup_base--->db[(sqlite.db)]\nend\n```\n\n## Concept\n\nIn tandem with [corpus-pax](https://github.com/justmars/corpus-pax), `corpus-base` creates [sqlpyd](https://github.com/justmars/sqlpyd) tables related to decisions of the Philippine Supreme Court, thereby adding the following:\n\n1. Justices\n2. Decisions\n   - Citations\n   - Votelines\n   - Titletags\n   - Opinions\n\n## Run\n\n```python shell\n>>> from corpus_pax import setup_pax_base\n>>> db_name =  # assume target db to be created/recreated is in the present working directory\n>>> setup_pax_base(\'test.db\') # takes ~20 to 30 minutes to create/recreate in working dir\n```\n\n## Caveats\n\n### Flow\n\n1. Unlike `corpus-pax` which operates over API calls, `corpus-base` operates locally.\n2. It implies parsing through a locally downloaded repository `corpus` to populate tables.\n3. _Opinions_ are limited. Save for 1 or 2 sample situations, the present `corpus` only includes the Ponencia.\n\n### Data\n\nThe path location of the downloaded `corpus` repository is [hard-coded](./corpus_base/utils/resources.py) since this package is intended to be run locally.\n\nInstructions for downloading and updating the repository are discussed elsewhere.\n\nNow toying with the idea of placing the entire `corpus` in a bucket like AWS S3 or Cloudflare R2. So that all access can be cloud-based.\n\n### Dependency\n\nSee [citation-report](https://github.com/justmars/citation-report) on reason why Python version is limited to `3.11.0` in both:\n\n1. [pyproject.toml](pyproject.toml); and\n2. [github workflow](.github/workflows/main.yml)\n\n## Repositories\n\nTo review the different repositories involved so far:\n\nrepository | type | purpose\n:--|:--:|:--\n[lawsql-articles](https://github.com/justmars/lawsql-articles) | data source | used by _corpus-pax_\n[corpus-entities](https://github.com/justmars/corpus-entities) | data source | used by _corpus-pax_\n[corpus](https://github.com/justmars/corpus) | data source | used by _corpus-base_\n[corpus-pax](https://github.com/justmars/corpus-pax) | sqlite i/o | functions to create pax-related tables\n_corpus-base_ | sqlite i/o | functions to create sc-related tables\n\n## Related features\n\n### Insert records\n\nCan add all pydantic validated records from the local copy of justices to the database.\n\n```python shell\n>>> from corpus_base import Justice\n>>> Justice.init_justices_tbl(c) # c = instantiated Connection\n<Table justices_tbl (first_name, last_name, suffix, full_name, gender, id, alias, start_term, end_term, chief_date, birth_date, retire_date, inactive_date)>\n```\n\n### Clean raw ponente string\n\nEach `ponente` name stored in `decisions_tbl` of the database has been made uniform, e.g.:\n\n```python shell\n>>> from corpus_base import RawPonente\n>>> RawPonente.clean("REYES , J.B.L, Acting C.J.") # sample name 1\n"reyes, j.b.l."\n>>> RawPonente.clean("REYES, J, B. L. J.") # sample name 2\n"reyes, j.b.l."\n```\n\nWe can see  most common names in the `ponente` field and the covered dates, e.g. from 1954 to 1972 (dates found in the decisions), there have been 1053 decisions marked with `jbl` (as cleaned):\n\n```python shell\n>>> from corpus_base.helpers import most_popular\n>>> [i for i in most_popular(c, db)] # excluding per curiams and unidentified cases\n[\n    (\'1994-07-04\', \'2017-08-09\', \'mendoza\', 1297), # note multiple personalities named mendoza, hence long range from 1994-2017\n    (\'1921-10-22\', \'1992-07-03\', \'paras\', 1287), # note multiple personalities named paras, hence long range from 1921-1992\n    (\'2009-03-17\', \'2021-03-24\', \'peralta\', 1243),\n    (\'1998-06-18\', \'2009-10-30\', \'quisumbing\', 1187),\n    (\'1999-06-28\', \'2011-06-02\', \'ynares-santiago\', 1184),\n    (\'1956-04-28\', \'2008-04-04\', \'panganiban\', 1102),\n    (\'1936-11-19\', \'2009-11-05\', \'concepcion\', 1058), # note multiple personalities named concepcion, hence long range from 1936-2009\n    (\'1954-07-30\', \'1972-08-18\', \'reyes, j.b.l.\', 1053),\n    (\'1903-11-21\', \'1932-03-31\', \'johnson\', 1043),\n    (\'1950-11-16\', \'1999-05-23\', \'bautista angelo\', 1028), # this looks like bad data\n    (\'2001-11-20\', \'2019-10-15\', \'carpio\', 1011),\n    ...\n]\n```\n\n### Isolate active justices on date\n\nWhen selecting a ponente or voting members, create a candidate list of justices based on date:\n\n```python shell\n>>> from corpus_base import Justice\n>>> Justice.get_active_on_date(c, \'Dec. 1, 1995\') # target date\n[\n    {\n        \'id\': 137,\n        \'surname\': \'panganiban\',\n        \'alias\': None,\n        \'start_term\': \'1995-10-05\', # since start date is greater than target date, record is included\n        \'inactive_date\': \'2006-12-06\',\n        \'chief_date\': \'2005-12-20\'\n    },\n    {\n        \'id\': 136,\n        \'surname\': \'hermosisima\',\n        \'alias\': \'hermosisima jr.\',\n        \'start_term\': \'1995-01-10\',\n        \'inactive_date\': \'1997-10-18\',\n        \'chief_date\': None\n    },\n]\n```\n\n### Designation as chief or associate\n\nSince we already have candidates, we can cleaning desired option to get the `id` and `designation`:\n\n```python shell\n>>> from corpus_base import RawPonente\n>>> RawPonente.clean(\'Panganiban, Acting Cj\')\n\'panganiban\'\n>>> Justice.get_justice_on_date(c, \'2005-09-08\', \'panganiban\')\n{\n    \'id\': 137,\n    \'surname\': \'Panganiban\',\n    \'start_term\': \'1995-10-05\',\n    \'inactive_date\': \'2006-12-06\',\n    \'chief_date\': \'2005-12-20\',\n    \'designation\': \'J.\' # note variance\n}\n```\n\nNote that the raw information above contains \'Acting Cj\' and thus the designation is only \'J.\'\n\nAt present we only track \'C.J.\' and \'J.\' titles.\n\nWith a different date, we can get the \'C.J.\' designation.:\n\n```python shell\n>>> Justice.get_justice_on_date(\'2006-03-30\', \'panganiban\')\n{\n    \'id\': 137,\n    \'surname\': \'Panganiban\',\n    \'start_term\': \'1995-10-05\',\n    \'inactive_date\': \'2006-12-06\',\n    \'chief_date\': \'2005-12-20\',\n    \'designation\': \'C.J.\' # corrected\n}\n```\n\n### View chief justice dates\n\n```python shell\n>>> from corpus_base import Justice\n>>> Justice.view_chiefs(c)\n[\n    {\n        \'id\': 178,\n        \'last_name\': \'Gesmundo\',\n        \'chief_date\': \'2021-04-05\',\n        \'max_end_chief_date\': None,\n        \'actual_inactive_as_chief\': None,\n        \'years_as_chief\': None\n    },\n    {\n        \'id\': 162,\n        \'last_name\': \'Peralta\',\n        \'chief_date\': \'2019-10-23\',\n        \'max_end_chief_date\': \'2021-04-04\',\n        \'actual_inactive_as_chief\': \'2021-03-27\',\n        \'years_as_chief\': 2\n    },\n    {\n        \'id\': 163,\n        \'last_name\': \'Bersamin\',\n        \'chief_date\': \'2018-11-26\',\n        \'max_end_chief_date\': \'2019-10-22\',\n        \'actual_inactive_as_chief\': \'2019-10-18\',\n        \'years_as_chief\': 1\n    },\n    {\n        \'id\': 160,\n        \'last_name\': \'Leonardo-De Castro\',\n        \'chief_date\': \'2018-08-28\',\n        \'max_end_chief_date\': \'2018-11-25\',\n        \'actual_inactive_as_chief\': \'2018-10-08\',\n        \'years_as_chief\': 0\n    }...\n]\n```\n\n### Helper function to do things incrementally\n\n```python shell\n>>> from corpus_base import init_sc_cases\n>>> init_sc_cases(c, test_only=10)\n```\n\nSince there are thousands of cases, can limit the number of downloads via the `test_only` function attribute.\n\n## Segments\n\n### Limit input of segments\n\n`MIN_LENGTH_CHARS_IN_LINE` is the python filtering mechanism that determines what goes into the database. Assuming a minimum of only 10 characters, the number of segment rows can be as many as ~2.9m.\n\n`MIN_LENGTH_CHARS_IN_LINE` | Total Num. of Rows | Time to Create from Scratch\n:--:|:--:|:--:\n10 | ~2.9m | 1.5 hours\n500 | ~700k | 40 minutes\n',
    'author': 'Marcelino G. Veloso III',
    'author_email': 'mars@veloso.one',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://lawdata.xyz',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '==3.11.0',
}


setup(**setup_kwargs)
