Metadata-Version: 2.1
Name: digitalmodel
Version: 0.0.1
Summary: engineering asset digital model(s) for life cycle analysis
Author-email: Vamsee Achanta <vamsee.achanta@aceengineer.com>
License: MIT License
        
        Copyright (c) 2022 Vamsee Achanta
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: repository, https://github.com/vamseeachanta/digitalmodel
Project-URL: documentation, https://github.com/vamseeachanta/digitalmodel/blob/main/README.md
Keywords: finite element,asset representation,structural,physical,engineering,animation,lifecycle,lifecycle analysis,single source of truth,digital model,digital twin
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Provides-Extra: build
Provides-Extra: dev
License-File: LICENSE

# Introduction

Digital models for engineering assets. The objective of digital models is to utilize a single source of ascii inputs (single source of truth) to generate equivalent analytical models to encompass lifecycle operations of a product. 

These operations include (and not limited to) the following:
- Analytical calculations
- Computational analysis
- Compuational 3D animations

# Summary

- High level vision proposed:
<img src="docs/digital_model_architecure.svg" width=auto, height=auto/>


# Usage

A quick way to running code is:
    - Create a virtual environment:
        - Use [conda yaml file](https://raw.githubusercontent.com/vamseeachanta/digitalmodel/master/dev_tools/environment.yml) to create a new environment
        - (or) by installing [digitalmodel]((https://github.com/vamseeachanta/digitalmodel)) package in an environment
- Run the following batch files
    - Download this [digitalmodel repository](https://github.com/vamseeachanta/digitalmodel)
    - activate environment
    - Change command line to "digitalmodel" (outside not in src) folder
        - Run the following python files in tests:
            - python src\digitalmodel\tests\ {change_to_relevant}.py
            - i.e. for catenary riser, python src\digitalmodel\tests\test_catenary_riser.py
        - (or) Run the following batch files in tests:
            - python src\digitalmodel\tests\ {change_to_relevant}.bat
            - i.e. for catenary riser, python src\digitalmodel\tests\test_catenary_riser.bat


## Assets


### SALM

SALM (Single Anchor Line Mooring)

Relevant files:
- python src\digitalmodel\tests\test_fea_model_salm_buoy_01.py
- python src\digitalmodel\tests\test_fea_model_salm_buoy_02.py

### Ships or vessels

Light Service Vessels
Intervention vessels

### Risers

#### Catenary Risers (SCR, SLWR)

SCR - Simple Catenary Riser
SLWR - Simple Lazy Wave Riser

Relevant files:
- python src\digitalmodel\tests\test_catenary_riser.py
- python src\digitalmodel\tests\test_catenary_riser.bat

### Pipelines



### Flexibles or Umbilicals

### Umbilicals

### Rigid Jumpers


## Example Software Runs

### OrcaFlex

Relevant files:
- python src\digitalmodel\tests\test_orcaflex_analysis.py

## Calculations

### Time Series 

Statics
- Fast Fourier Transform analysis as follows:
    - FFT
    - iFFT
    - Peak energy frequency
    - Perform signal integration

## References


### Manufacturing/Fabrication

[ProdSim python packages](https://github.com/FuchsTom/ProdSim)
[ProdSim Background: An Open-source Python Package for Generating High-resolution Synthetic Manufacturing Data on Product, Machine and Shop-Floor Levels](https://www.sciencedirect.com/science/article/pii/S2212827122004395)
