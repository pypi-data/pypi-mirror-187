from indra import api
from .constants import (
    COCO_DS_NAME,
    MNIST_DS_NAME,
    IMAGENET_DS_NAME,
)

from time import time
import pytest


@pytest.mark.parametrize(
    "ds_name,queries",
    [
        (
            COCO_DS_NAME,
            [
                ("SELECT * WHERE categories[0] == 'person'", 22706, None),
                ("SELECT * WHERE shape(categories)[0] == 0", 1021, None),
                ("SELECT * WHERE shape(boxes)[0] == 5", 7712, None),
                ("SELECT * WHERE shape(images)[0] > 200", 118078, None),
                ("SELECT * WHERE shape(images)[1] > 200", 118219, None),
                ("SELECT * WHERE shape(images)[2] == 3", 118060, None),
                ("SELECT * WHERE shape(images)[2] == 2", 0, None),
                (
                    "SELECT * WHERE ALL_STRICT(categories == 'person') or shape(categories)[0] == 0",
                    1375,
                    None,
                ),
                ("SELECT * WHERE ALL(categories == 'person')", 1375, None),
                ("select * where ALL_STRICT(categories == 'person')", 354, None),
                (
                    "select * where ALL_STRICT(\"pose/categories\" == 'person')",
                    64115,
                    None,
                ),
                ("select * where any(categories == 'banana')", 2243, None),
                ("select * where any(categories == 'person')", 64115, None),
                (
                    "select * where all_strict(logical_and(categories == 'car', boxes[:,3] > 200))",
                    5,
                    None,
                ),
                (
                    "select * where any(logical_and(categories == 'car', boxes[:,3] > 200))",
                    1242,
                    None,
                ),
                (
                    "select * where all_strict(logical_or(categories == 'person', categories == 'banana'))",
                    873,
                    None,
                ),
                (
                    "select * where logical_and(categories == 'person', categories == 'person')",
                    208,
                    None,
                ),
                ("SELECT * where images_meta['license'] == 3", 32184, None),
                ("SELECT * where images_meta['id'] > 285529", 60365, None),
                ("SELECT * where contains(categories, '*ers*')", 64115, None),
                ("SELECT * where contains(categories, '?ers*')", 64115, None),
                ("SELECT * order by images_meta['license']", 118287, None),
                (
                    "SELECT * order by images_meta['license'] limit 100",
                    100,
                    [
                        1,
                        7,
                        20,
                        24,
                        25,
                        31,
                        37,
                        41,
                        42,
                        46,
                        48,
                        52,
                        53,
                        56,
                        59,
                        60,
                        61,
                        65,
                        70,
                        71,
                        72,
                        73,
                        75,
                        79,
                        80,
                        86,
                        89,
                        98,
                        99,
                        107,
                        111,
                        117,
                        119,
                        120,
                        127,
                        138,
                        140,
                        148,
                        150,
                        156,
                        158,
                        162,
                        164,
                        167,
                        171,
                        172,
                        180,
                        191,
                        200,
                        205,
                        207,
                        210,
                        211,
                        214,
                        217,
                        228,
                        229,
                        233,
                        234,
                        244,
                        245,
                        248,
                        252,
                        253,
                        262,
                        273,
                        276,
                        280,
                        283,
                        302,
                        313,
                        315,
                        320,
                        326,
                        331,
                        336,
                        337,
                        339,
                        349,
                        351,
                        352,
                        354,
                        355,
                        359,
                        370,
                        383,
                        388,
                        389,
                        392,
                        393,
                        399,
                        400,
                        406,
                        408,
                        409,
                        416,
                        419,
                        430,
                        431,
                        432,
                    ],
                ),
            ],
        ),
        (
            MNIST_DS_NAME,
            [
                ("SELECT * WHERE labels == 0", 5923, None),
                ("SELECT * WHERE SHAPE(images)[0] == 28", 60000, None),
                ("SELECT * WHERE SHAPE(images)[0] == 29", 0, None),
                (
                    "(select * where labels == 4 limit 10) union (select * where labels == 5 limit 10) order by labels",
                    20,
                    [
                        2,
                        9,
                        20,
                        26,
                        53,
                        58,
                        60,
                        61,
                        64,
                        89,
                        0,
                        11,
                        35,
                        47,
                        65,
                        100,
                        132,
                        138,
                        145,
                        173,
                    ],
                ),
                (
                    "SELECT * SAMPLE BY sum_weight(labels == 0: 10, labels == 1: 5) LIMIT 100",
                    100,
                    None,
                ),
                (
                    "SELECT * SAMPLE BY max_weight(labels == 0: 10, labels == 1: 5) LIMIT 100",
                    100,
                    None,
                ),
                ("SELECT * SAMPLE BY labels", 60000, None),
                (
                    "SELECT * SAMPLE BY sum_weight(labels > 5: 1, labels == 0: 3) REPLACE LIMIT 10000",
                    10000,
                    None,
                ),
                (
                    "SELECT * SAMPLE BY max_weight(labels > 5: 1, labels == 0: 3) REPLACE LIMIT 10000",
                    10000,
                    None,
                ),
                ("SELECT * WHERE labels == 0 SAMPLE BY labels", 5923, None),
                ("SELECT * SAMPLE BY 1", 60000, None),
                ("SELECT * SAMPLE BY 0.1", 60000, None),
                ("SELECT * SAMPLE BY 0.1 LIMIT 30000", 30000, None),
                ("SELECT * SAMPLE BY 0.1 REPLACE FALSE LIMIT 190000", 60000, None),
                ("SELECT * SAMPLE BY 0.1 LIMIT 190000", 190000, None),
                ("SELECT * SAMPLE BY 0.1 REPLACE LIMIT 190000", 190000, None),
            ],
        ),
        (
            IMAGENET_DS_NAME,
            [
                ("SELECT * WHERE labels == 'bikini'", 1300, None),
                ("SELECT * WHERE contains(labels, '*iki*')", 2600, None),
                ("SELECT * WHERE contains(labels, '?iki*')", 1300, None),
                ("SELECT * WHERE SHAPE(boxes)[0] > 15", 2, None),
                (
                    "(SELECT * WHERE labels == 'bikini' LIMIT 10) UNION (SELECT * WHERE labels == 1 LIMIT 10) UNION (SELECT * WHERE labels == 43 LIMIT 10)",
                    30,
                    None,
                ),
                (
                    "SELECT * SAMPLE BY sum_weight(labels == 'fur coat': 10, labels == 'bikini': 3) limit 0.1 PERCENT",
                    1281,
                    None,
                ),
                (
                    "SELECT * SAMPLE BY max_weight(labels == 'fur coat': 10, labels == 'bikini': 3) limit 0.1 PERCENT",
                    1281,
                    None,
                ),
                (
                    "SELECT * SAMPLE BY sum_weight(labels == 'fur coat': 10, labels == 'bikini': 3) replace",
                    1281166,
                    None,
                ),
                (
                    "SELECT * SAMPLE BY sum_weight(labels == 'fur coat': 10, labels == 'bikini': 3) replace",
                    1281166,
                    None,
                ),
                (
                    "SELECT * SAMPLE BY max_weight(labels == 'fur coat': 10, True: 0.1)",
                    1281166,
                    None,
                ),
            ],
        ),
        # LAION_400_M_DS_NAME: [
        #    ("SELECT * WHERE CONTAINS(caption, 'blue')", 2783, None),
        #    ("SELECT * WHERE caption[0] == 'A'", 28904, None),
        #    ("SELECT * WHERE SHAPE(image)[0] == 256", 512993, None),
        # ],
        (
            "hub://davitbun/places365-train-challenge",
            [
                ("SELECT * WHERE labels == 'hotel_room'", 32947, None),
                ("SELECT * ORDER by random()", 8026628, None),
            ],
        ),
    ],
)
def test_dataset_query_results(ds_name, queries):
    ds = api.dataset(ds_name)
    for (query, result_size, result_indices) in queries:
        print(f"\tRunning query: {query}")
        start = time()
        result = ds.query(query)
        print("\tQuery time: ", time() - start)
        assert len(result) == result_size
        assert result_indices is None or result.indexes == result_indices
        start = time()
        result = ds.query(query)
        print("\tSecond Query time: ", time() - start)
