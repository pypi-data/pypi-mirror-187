{"version":3,"sources":["webpack://ipyxturtle/./lib/index.js","webpack://ipyxturtle/./lib/ipyxturtle.js","webpack://ipyxturtle/./node_modules/xturtle/assets/idle_turtle.png","webpack://ipyxturtle/./node_modules/xturtle/assets/turtle.png","webpack://ipyxturtle/./node_modules/xturtle/index.js","webpack://ipyxturtle/./node_modules/xturtle/src/sprite.js","webpack://ipyxturtle/./node_modules/xturtle/src/turtle.js","webpack://ipyxturtle/./node_modules/xturtle/src/turtle_component.js","webpack://ipyxturtle/./node_modules/xturtle/src/utils.js","webpack://ipyxturtle/external \"@jupyter-widgets/base\"","webpack://ipyxturtle/webpack/bootstrap","webpack://ipyxturtle/webpack/runtime/compat get default export","webpack://ipyxturtle/webpack/runtime/define property getters","webpack://ipyxturtle/webpack/runtime/hasOwnProperty shorthand","webpack://ipyxturtle/webpack/runtime/make namespace object","webpack://ipyxturtle/webpack/startup"],"names":[],"mappings":";;;;;;;;;AAAA;AACA,kFAA2C;AAC3C,6FAA8D;;;;;;;;;;;;;;;;;;;;ACFpB;AACO;;AAE1C,0BAA0B,iEAAsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,yBAAyB,gEAAqB;AACrD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,oDAAe;;AAEzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kCAAkC,yBAAyB;AAC3D;AACA;;AAEA;AACA,kCAAkC,yBAAyB;AAC3D;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACzGA,iEAAe,8CAA8C,E;;;;;;;;;;;;;;;ACA7D,iEAAe,8CAA8C,E;;;;;;;;;;;;;;;;;ACAO;;AAEpE,kCAAkC,qEAAe;;AAEd;;;;;;;;;;;;;;;;;ACJA;;AAEpB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU,gDAAK;AACf;;AAEA;AACA,YAAY;AACZ;AACA;;;;;;;;;;;;;;;;;AC/EsE;;AAEtE;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B;;AAE5B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,YAAY,gDAAK;AACjB;AACA;;AAEA;AACA,wBAAwB,kDAAkD;AAC1E;;AAEA;AACA,wBAAwB,gDAAgD;AACxE;;AAEA;AACA,wBAAwB,oDAAoD;AAC5E;;AAEA;AACA,wBAAwB,mEAAmE;AAC3F;;AAEA;AACA,wBAAwB,yDAAyD;AACjF;;AAEA;AACA;AACA;;AAEA;AACA,mCAAmC,6CAA6C;AAChF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,6CAA6C;AACrE;;AAEA;AACA,wBAAwB,kDAAkD;AAC1E;;AAEA;AACA;AACA,YAAY,gDAAK;;AAEjB;AACA;;AAEA;AACA,wBAAwB,wCAAwC;AAChE;;AAEA;AACA,wBAAwB,0CAA0C;AAClE;;AAEA;AACA,wBAAwB,oDAAoD;AAC5E;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uBAAuB,4DAAiB;AACxC;AACA;;AAEA;AACA;;AAEA;;AAEA,YAAY,gDAAK;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2EAA2E,yDAAc,2BAA2B,yDAAc;AAClI;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,4CAA4C;AACpE;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,yDAAc;AAClD;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB;;AAEtB;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnUmD;AACL;AACb;AACA;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;;AAEA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD;AACjD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,4DAAU;;AAE/B,eAAe,+CAAM;AACrB;;AAEA;AACA;AACA,qBAAqB,uDAAU;;AAE/B,eAAe,+CAAM;AACrB;;AAEA;AACA,eAAe,+CAAM;AACrB;;AAEA;AACA;;AAEA;AACA;;AAEA,qBAAqB,+CAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEkC;;;;;;;;;;;;;;;;;;;AC1J3B;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjBA,mE;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;UCNA;UACA;UACA;UACA","file":"index.js","sourcesContent":["// Export widget models and views, and the npm package version number.\nmodule.exports = require('./ipyxturtle.js');\nmodule.exports['version'] = require('../package.json').version;\n","import { TurtleComponent } from 'xturtle';\nimport * as widgets from '@jupyter-widgets/base';\n\nexport class CanvasModel extends widgets.DOMWidgetModel {\n    defaults() {\n        return {\n            ...super.defaults(),\n            _model_name: 'CanvasModel',\n            _view_name: 'CanvasView',\n            _model_module: 'ipyxturtle',\n            _view_module: 'ipyxturtle',\n            _model_module_version: '0.1.0',\n            _view_module_version: '0.1.0'\n        }\n    }\n}\n\nexport class CanvasView extends widgets.DOMWidgetView {\n    render() {\n        this.turtles = {};\n        this.create_canvas();\n\n        this.model.on('change:command', this.execute, this);\n        this.model.on('change:last_turtle', this.create_turtle, this);\n    }\n\n    create_turtle() {\n        const turtle = this.model.get('last_turtle');\n\n        if (Number.isInteger(turtle.id)) {\n            this.turtles[turtle.id] = this.canvas.createTurtle();\n        }\n    }\n\n    create_canvas() {\n        const backgroundCanvas = document.createElement('canvas');\n        this.canvas = new TurtleComponent();\n\n        this.canvas.width = this.model.get('width');\n        this.canvas.height = this.model.get('height');\n\n        backgroundCanvas.id = 'bgCanvas';\n        backgroundCanvas.setAttribute('width', this.canvas.width);\n        backgroundCanvas.setAttribute('height', this.canvas.height);\n\n        this.canvas.canvasStyle = this.model.get('canvas_style');\n        this.canvas.spriteScale = this.model.get('sprite_scale');\n        this.canvas.initializeCanvas(this.el);\n\n        this.el.appendChild(backgroundCanvas);\n\n        this.el.style.cssText = `\n            width: ${this.canvas.width};\n            height: ${this.canvas.height};\n            z-index: 999;\n            background-color: white;\n            position: fixed;\n            border-color: grey;\n            border-width: 1px;\n            border: 1px solid grey;\n            right: 0;\n            bottom: 0;\n        `\n        document.body.prepend(this.el);\n\n        this.set_canvas();\n    }\n\n    set_canvas() {\n        this.model.set('canvas', { 'element': this.canvas });\n        this.model.save_changes();\n    }\n\n    set_turtle() {\n        this.model.set('turtle', { 'element': this.turtle });\n        this.model.save_changes();\n    }\n\n    get_canvas() {\n        let canvas = this.model.get('canvas');\n\n        if (canvas) return canvas.element;\n    }\n\n    get_turtle() {\n        let turtle = this.model.get('turtle');\n\n        if (turtle) return turtle.element;\n    }\n\n    execute() {\n        this.command = this.model.get('command');\n\n        if (this.command.function_name) {\n            this.run();\n            this.command = {};\n        }\n    }\n\n    run() {\n        let turtle_id = this.command.turtle_id;\n        let turtle = this.turtles[turtle_id];\n\n        if (turtle) turtle[this.command['function_name']](...this.command['args']);\n    }\n}\n","export default \"js/dist/23d3dc43a7ebe54f7dcbf2bc658de693.png\";","export default \"js/dist/97466b07c2424184308f22f5928448ec.png\";","import { TurtleComponent, Sprite } from './src/turtle_component.js';\n\ncustomElements.define('x-turtle', TurtleComponent);\n\nexport { TurtleComponent, Sprite };\n","import { sleep } from './utils.js';\n\nexport default class Sprite {\n  #rows\n  #columns\n  #image\n  #frameWidth\n  #frameHeight\n  #currentFrame\n  #maxFrame\n  #canvas\n  #spriteScale\n\n  constructor(rows, columns, image, canvas, spriteScale) {\n    this.#rows = rows;\n    this.#columns = columns;\n    this.#image = image;\n    this.#frameWidth = image.width / columns;\n    this.#frameHeight = image.height / rows;\n    this.#currentFrame = 0;\n    this.#maxFrame = columns * rows - 1;\n    this.#canvas = canvas;\n    this.#spriteScale = { width: this.frameWidth * spriteScale, height: this.frameHeight * spriteScale };\n\n    this.#loadImage(image, spriteScale);\n  }\n\n  #loadImage(image, spriteScale) {\n    let onloadFunction = () => {\n      this.#image = image;\n      this.#frameWidth = image.width / this.#columns;\n      this.#frameHeight = image.height / this.#rows;\n      this.#spriteScale = { width: this.#frameWidth * spriteScale, height: this.#frameHeight * spriteScale };\n      this.#currentFrame = 0;\n    }\n\n    image.onload = onloadFunction;\n    this.#reloadImage();\n  }\n\n  #reloadImage() {\n    if (this.#image.complete && this.#image.naturalHeight !== 0) this.#image.onload();\n  }\n\n  setCanvas(canvas) {\n    this.#canvas = canvas;\n    this.#reloadImage();\n  }\n\n  async run(position) {\n    if (!this.#canvas) return;\n\n    this.#currentFrame++;\n\n    if (this.#currentFrame > this.#maxFrame) {\n      this.#currentFrame = 0;\n    }\n\n    let column = this.#currentFrame % this.#columns;\n    let row = Math.floor(this.#currentFrame / this.#columns);\n\n    this.#canvas.drawImage(\n      this.#image,\n      column * this.#frameWidth,\n      row * this.#frameHeight,\n      this.#frameWidth,\n      this.#frameHeight,\n      position.x - this.#getCenterOffset().width,\n      position.y - this.#getCenterOffset().height,\n      this.#spriteScale.width,\n      this.#spriteScale.height\n    );\n\n    await sleep(1000 / this.#maxFrame)\n  }\n\n  #getCenterOffset() {\n    return { width: (this.#spriteScale.width / 2), height: (this.#spriteScale.height / 2) }\n  }\n}\n","import { sleep, angleInRadians, positionWithAngle } from './utils.js';\n\nconst FULL_CIRCUNFERENCE_ANGLE = 360\nconst INVISIBLE_COLOR = 'rgb(0, 0, 0, 0)';\n\nexport default class Turtle {\n  #position\n  #angle\n  #speed\n  #actions\n  #moving\n  #width\n  #height\n  #color\n  #penUp\n\n  #backgroundCanvas\n  #foregroundCanvas\n\n  #idleSprite\n  #moveSprite\n  #spritePosition\n\n  constructor(backgroundCanvas, foregroundCanvas, spriteIdle, spriteMoving, width, height) {\n    this.#position = { x: 0, y: 0 }\n    this.#angle = 0\n    this.#speed = 1\n    this.#moving = false;\n    this.#penUp = false;\n    this.#width = width;\n    this.#height = height;\n    this.#color = 'black';\n\n    this.#backgroundCanvas = backgroundCanvas;\n    this.#foregroundCanvas = foregroundCanvas;\n\n    this.#idleSprite = spriteIdle\n    this.#moveSprite = spriteMoving\n    this.#spritePosition = { x: 0, y: 0 }\n\n    this.#actions = []\n\n    this.runTurtleActionsAndAnimation = this.runTurtleActionsAndAnimation.bind(this)\n  }\n\n  async runTurtleActionsAndAnimation() {\n    const FPS = 33\n\n    let delayUpdate = await this.#update()\n    let delayDraw = await this.#spriteAnimation()\n\n    let delayTotal = (FPS - ((delayUpdate + delayDraw) * 1000))\n\n    if (delayTotal > 0) {\n      await sleep(FPS - delayTotal)\n    }\n  }\n\n  forward(distance) {\n    this.#actions.push({ action: 'forwardAction', parameters: [distance] })\n  }\n\n  backward(value) {\n    this.#actions.push({ action: 'forwardAction', parameters: [-value] })\n  }\n\n  setLineColor(color) {\n    this.#actions.push({ action: 'setLineColorAction', parameters: [color] })\n  }\n\n  circle(radius, circumferenceAngle = FULL_CIRCUNFERENCE_ANGLE) {\n    this.#actions.push({ action: 'circleAction', parameters: [radius, circumferenceAngle] })\n  }\n\n  rectangle(width, height) {\n    this.#actions.push({ action: 'rectangleAction', parameters: [width, height] })\n  }\n\n  async #rectangleAction(width, height) {\n    await this.#backgroundCanvas.rect(this.#position.x, this.#position.y, width, height);\n  }\n\n  speed(speed) {\n    if (speed) this.#actions.push({ action: 'speedAction', parameters: [speed] });\n    else return this.#speed;\n  }\n\n  async clear() {\n    this.#foregroundCanvas.fillStyle = \"rgba(0,0,0,1)\";\n    this.#foregroundCanvas.globalCompositeOperation = \"destination-out\";\n  }\n\n  turtleCommandsList(commands) {\n    this.#actions = commands\n  }\n\n  right(value) {\n    this.#actions.push({ action: 'rightAction', parameters: [value] })\n  }\n\n  setPosition(x, y) {\n    this.#actions.push({ action: 'setPositionAction', parameters: [x, y] })\n  }\n\n  async getPosition() {\n    while (this.#actions.length !== 0)\n      await sleep(33)\n\n    return this.#position\n  }\n\n  penUp() {\n    this.#actions.push({ action: 'penUpAction', parameters: [] });\n  }\n\n  penDown() {\n    this.#actions.push({ action: 'penDownAction', parameters: [] });\n  }\n\n  setLineWidth(width) {\n    this.#actions.push({ action: 'setLineWidthAction', parameters: [width] });\n  }\n\n  // Private Methods\n\n  async #update() {\n    let t0 = performance.now()\n    if (this.#actions.length) {\n      await this.#runAction()\n      this.#actions.splice(0, 1)\n    }\n    let t1 = performance.now()\n    return t1 - t0\n  }\n\n  async #runAction() {\n    switch(this.#actions[0].action) {\n      case \"forwardAction\":\n        await this.#forwardAction(...this.#actions[0].parameters)\n        break;\n      case \"setLineColorAction\":\n        await this.#setLineColorAction(...this.#actions[0].parameters)\n        break;\n      case \"circleAction\":\n        await this.#circleAction(...this.#actions[0].parameters)\n        break;\n      case \"rectangleAction\":\n        await this.#rectangleAction(...this.#actions[0].parameters)\n        break;\n      case \"speedAction\":\n        this.#speedAction(...this.#actions[0].parameters)\n        break;\n      case \"leftAction\":\n        await this.#leftAction(...this.#actions[0].parameters)\n        break;\n      case \"rightAction\":\n        await this.#rightAction(...this.#actions[0].parameters)\n        break;\n      case \"setPositionAction\":\n        await this.#setPositionAction(...this.#actions[0].parameters)\n        break;\n      case \"penUpAction\":\n        await this.#penUpAction(...this.#actions[0].parameters)\n        break;\n      case \"penDownAction\":\n        await this.#penDownAction(...this.#actions[0].parameters)\n        break;\n      case \"setLineWidthAction\":\n        await this.#setLineWidthAction(...this.#actions[0].parameters)\n        break;\n    }\n  }\n\n  async #forwardAction(distance) {\n    this.#backgroundCanvas.beginPath();\n\n    this.#moving = true;\n    distance = parseInt(distance)\n\n    let displacement = null;\n    const FPS = 66\n\n    while (distance) {\n      if (Math.abs(distance) < this.#speed / 10 * FPS) {\n        displacement = distance;\n      }\n      else {\n        if (distance > 0) {\n          displacement = Math.round(this.#speed / 10 * FPS)\n        }\n        else {\n          displacement = Math.round(this.#speed / 10 * FPS) * -1\n        }\n      }\n\n      this.#backgroundCanvas.moveTo(this.#position.x, this.#position.y);\n\n      this.#position = positionWithAngle(this.#angle, displacement, this.#position)\n      this.#spritePosition.x += displacement;\n      this.#backgroundCanvas.lineTo(this.#position.x, this.#position.y);\n\n      this.#backgroundCanvas.stroke();\n      this.#spriteAnimation();\n\n      distance -= displacement\n\n      await sleep(FPS);\n    }\n    this.#moving = false;\n  }\n\n  async #setLineColorAction(color) {\n    this.#color = color;\n\n    if (!this.#penUp) {\n      this.#backgroundCanvas.beginPath();\n      this.#backgroundCanvas.strokeStyle = color;\n    }\n  }\n\n  async #circleAction(radius, circumferenceAngle) {\n    this.#backgroundCanvas.beginPath();\n\n    let circumferenceStartAngle = this.#angle\n    let circumferenceEndAgnle = circumferenceAngle+this.#angle\n\n    if(circumferenceAngle < 0) {\n      circumferenceStartAngle = circumferenceAngle+this.#angle\n      circumferenceEndAgnle = this.#angle\n    }\n\n    this.#backgroundCanvas.arc(this.#position.x, this.#position.y, radius, angleInRadians(circumferenceStartAngle), angleInRadians(circumferenceEndAgnle));\n  }\n\n  async #speedAction(speed) {\n    this.#speed = speed;\n  }\n\n  async #rightAction(value) {\n    this.#rotateLine(value)\n  }\n\n  left(value) {\n    this.#actions.push({ action: 'leftAction', parameters: [value] })\n  }\n\n  async #leftAction(value) {\n    this.#rotateLine(-value)\n  }\n\n  async #rotateLine(value) {\n    this.#angle += parseInt(value)\n\n    while (this.angle >= 360)\n      this.#angle = this.#angle - 360\n\n    this.#rotateForegroundCanvas('right', value)\n  }\n\n  #rotateForegroundCanvas(direction, value) {\n    if (direction == 'left')\n      value *= -1\n\n      this.#foregroundCanvas.translate(this.#spritePosition.x, this.#spritePosition.y);\n      // this rotate works using the center of the canvas defined on translate as reference\n      this.#foregroundCanvas.rotate(angleInRadians(value))\n      this.#foregroundCanvas.translate(-this.#spritePosition.x, -this.#spritePosition.y);\n  }\n\n  async #setPositionAction(x, y) {\n    x = parseFloat(x)\n    y = parseFloat(y)\n\n    y = y * -1\n\n    this.#backgroundCanvas.moveTo(x, y)\n    this.#position = { x: x, y: y }\n\n    this.#foregroundCanvas.setTransform(1, 0, 0, 1, this.#width * 0.5, this.#height * 0.5);\n    this.#spritePosition = { x: x, y: y }\n    this.#rotateForegroundCanvas(\"\", this.#angle)\n  }\n\n  async #penDownAction() {\n    this.#penUp = false;\n    this.#backgroundCanvas.strokeStyle = this.color;\n    this.#backgroundCanvas.beginPath();\n    this.#backgroundCanvas.strokeStyle = this.#color;\n  }\n\n  async #penUpAction() {\n    this.#penUp = true;\n    this.#backgroundCanvas.strokeStyle = INVISIBLE_COLOR;\n    this.#backgroundCanvas.beginPath();\n  }\n\n  async #setLineWidthAction(width) {\n    this.#backgroundCanvas.lineWidth = width;\n  }\n\n  async #spriteAnimation() {\n    var t0 = performance.now()\n    this.#backgroundCanvas.stroke();\n\n    // Implement a better clear thinkin in this magic numbers\n    this.#foregroundCanvas.clearRect(\n      this.#spritePosition.x - this.#width,\n      this.#spritePosition.y - this.#height,\n      this.#width * 3,\n      this.#height * 3\n    );\n\n    if (this.#moving) {\n      await this.#moveSprite.run(this.#spritePosition)\n    }\n    else {\n      await this.#idleSprite.run(this.#spritePosition)\n    }\n\n    var t1 = performance.now()\n\n    return t1 - t0\n  }\n}\n","import idleTurtle from '../assets/idle_turtle.png';\nimport moveTurtle from '../assets/turtle.png';\nimport Sprite from './sprite.js';\nimport Turtle from './turtle.js';\n\nclass TurtleComponent extends HTMLElement {\n  #backgroundCanvas\n  #parentDiv\n  #forwardCanvas\n\n  static get observedAttributes() {\n    return ['width', 'height'];\n  }\n\n  constructor() {\n    super()\n    this.#parentDiv = document.createElement(\"div\")\n    this.#backgroundCanvas = document.createElement(\"canvas\");\n    this.#parentDiv.appendChild(this.#backgroundCanvas);\n  }\n\n  get width() {\n    return this.getAttribute('width');\n  }\n\n  set width(value) {\n    this.setAttribute('width', value);\n  }\n\n  get height() {\n    return this.getAttribute('height');\n  }\n\n  set height(value) {\n    this.setAttribute('height', value);\n  }\n\n  get canvasClass() {\n    return this.getAttribute('canvas-class');\n  }\n\n  set canvasClass(value) {\n    this.setAttribute('canvas-class', value);\n  }\n\n  connectedCallback() {\n    if (!this.width) {\n      this.width = 300;\n    }\n    if (!this.height) {\n      this.height = 300;\n    }\n    if (!this.canvasClass) {\n      this.canvasClass = \"border: solid 1px black;\";\n    }\n\n    this.initializeCanvas();\n  }\n\n  initializeCanvas(parent = document.body, parentDivStyle = \"position: relative;\") {\n    this.#backgroundCanvas.width = this.width\n    this.#backgroundCanvas.height = this.height\n    this.#backgroundCanvas.style = \"position: absolute !important\"\n    this.#backgroundCanvas.className = this.canvasClass\n    this.#parentDiv.style = parentDivStyle\n\n    this.#backgroundCanvas.getContext(\"2d\").translate(this.#backgroundCanvas.width * 0.5,\n                                                      this.#backgroundCanvas.height * 0.5);\n\n    parent.appendChild(this.#parentDiv);\n  }\n\n  attributeChangedCallback(name, oldVal, newVal) {\n    if (oldVal !== newVal) {\n      switch (name) {\n        case 'width':\n          this.width = newVal;\n          break;\n        case 'height':\n          this.height = newVal;\n          break;\n        case 'canvas-class':\n          this.canvasClass = newVal\n          break;\n      }\n    }\n  }\n\n  async #update(turtle){\n    while(true) {\n      await turtle.runTurtleActionsAndAnimation();\n    }\n  }\n\n  #buildForwardCanvas() {\n    let foregroundCanvas = document.createElement(\"canvas\");\n    foregroundCanvas.style = \"position: absolute;\"\n    this.#parentDiv.appendChild(foregroundCanvas);\n    let foregroundCanvasContext = foregroundCanvas.getContext(\"2d\")\n\n    foregroundCanvas.width = this.width\n    foregroundCanvas.height = this.height\n\n    foregroundCanvasContext.translate(\n      foregroundCanvas.width * 0.5,\n      foregroundCanvas.height * 0.5\n    );\n\n    return foregroundCanvasContext\n  }\n\n  #idleSprite(idleSprite, forwardCanvas) {\n    idleSprite = new Image();\n    idleSprite.src = idleTurtle;\n\n    return new Sprite(1, 10, idleSprite, forwardCanvas, 0.2);\n  }\n\n  #moveSprite(moveSprite, forwardCanvas) {\n    moveSprite = new Image();\n    moveSprite.src = moveTurtle;\n\n    return new Sprite(1, 8, moveSprite, forwardCanvas, 0.2);\n  }\n\n  buildSprite(rows, colums, image, scale) {\n    return new Sprite(rows, colums, image, null, scale);\n  }\n\n  createTurtle(idleSprite = null, moveSprite = null) {\n    let forwardCanvas = this.#buildForwardCanvas();\n\n    if (idleSprite) idleSprite.setCanvas(forwardCanvas);\n    if (moveSprite) moveSprite.setCanvas(forwardCanvas);\n\n    let turtle = new Turtle(\n      this.#backgroundCanvas.getContext(\"2d\"),\n      forwardCanvas,\n      (idleSprite == null) ? this.#idleSprite(idleSprite, forwardCanvas) : idleSprite,\n      (moveSprite == null) ? this.#moveSprite(moveSprite, forwardCanvas) : moveSprite,\n      this.width,\n      this.height\n    );\n\n    this.#update(turtle);\n\n    return turtle;\n  }\n\n  getImageData(x, y, width, height) {\n    return this.#backgroundCanvas.getContext('2d').getImageData(x, y, width, height);\n  }\n}\n\nexport { TurtleComponent, Sprite }\n","export function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function angleInRadians(angle) {\n  return angle * Math.PI / 180\n}\n\nexport function angleInDegrees(angle) {\n  return angle * (180 / Math.PI)\n}\n\nexport function positionWithAngle(angle, distance, position) {\n  return {\n    x: position.x + distance * (Math.cos(angleInRadians(angle))),\n    y: position.y + distance * (Math.sin(angleInRadians(angle)))\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__jupyter_widgets_base__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./lib/index.js\");\n"],"sourceRoot":""}