# Generated from ImpLanguage.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,168,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
        1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,22,1,22,1,23,3,23,141,8,23,1,23,4,23,144,8,23,11,23,12,23,145,
        1,24,4,24,149,8,24,11,24,12,24,150,1,25,4,25,154,8,25,11,25,12,25,
        155,1,25,1,25,1,26,1,26,5,26,162,8,26,10,26,12,26,165,9,26,1,26,
        1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,1,0,4,1,0,48,57,4,0,48,57,65,90,95,
        95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,172,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,1,55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,61,1,0,0,0,9,63,
        1,0,0,0,11,66,1,0,0,0,13,69,1,0,0,0,15,73,1,0,0,0,17,77,1,0,0,0,
        19,80,1,0,0,0,21,85,1,0,0,0,23,89,1,0,0,0,25,91,1,0,0,0,27,98,1,
        0,0,0,29,101,1,0,0,0,31,106,1,0,0,0,33,111,1,0,0,0,35,114,1,0,0,
        0,37,120,1,0,0,0,39,123,1,0,0,0,41,126,1,0,0,0,43,128,1,0,0,0,45,
        133,1,0,0,0,47,140,1,0,0,0,49,148,1,0,0,0,51,153,1,0,0,0,53,159,
        1,0,0,0,55,56,5,43,0,0,56,2,1,0,0,0,57,58,5,45,0,0,58,4,1,0,0,0,
        59,60,5,40,0,0,60,6,1,0,0,0,61,62,5,41,0,0,62,8,1,0,0,0,63,64,5,
        60,0,0,64,65,5,61,0,0,65,10,1,0,0,0,66,67,5,61,0,0,67,68,5,61,0,
        0,68,12,1,0,0,0,69,70,5,110,0,0,70,71,5,111,0,0,71,72,5,116,0,0,
        72,14,1,0,0,0,73,74,5,97,0,0,74,75,5,110,0,0,75,76,5,100,0,0,76,
        16,1,0,0,0,77,78,5,111,0,0,78,79,5,114,0,0,79,18,1,0,0,0,80,81,5,
        115,0,0,81,82,5,107,0,0,82,83,5,105,0,0,83,84,5,112,0,0,84,20,1,
        0,0,0,85,86,5,101,0,0,86,87,5,114,0,0,87,88,5,114,0,0,88,22,1,0,
        0,0,89,90,5,61,0,0,90,24,1,0,0,0,91,92,5,97,0,0,92,93,5,115,0,0,
        93,94,5,115,0,0,94,95,5,101,0,0,95,96,5,114,0,0,96,97,5,116,0,0,
        97,26,1,0,0,0,98,99,5,105,0,0,99,100,5,102,0,0,100,28,1,0,0,0,101,
        102,5,116,0,0,102,103,5,104,0,0,103,104,5,101,0,0,104,105,5,110,
        0,0,105,30,1,0,0,0,106,107,5,101,0,0,107,108,5,108,0,0,108,109,5,
        115,0,0,109,110,5,101,0,0,110,32,1,0,0,0,111,112,5,102,0,0,112,113,
        5,105,0,0,113,34,1,0,0,0,114,115,5,119,0,0,115,116,5,104,0,0,116,
        117,5,105,0,0,117,118,5,108,0,0,118,119,5,101,0,0,119,36,1,0,0,0,
        120,121,5,100,0,0,121,122,5,111,0,0,122,38,1,0,0,0,123,124,5,111,
        0,0,124,125,5,100,0,0,125,40,1,0,0,0,126,127,5,59,0,0,127,42,1,0,
        0,0,128,129,5,116,0,0,129,130,5,114,0,0,130,131,5,117,0,0,131,132,
        5,101,0,0,132,44,1,0,0,0,133,134,5,102,0,0,134,135,5,97,0,0,135,
        136,5,108,0,0,136,137,5,115,0,0,137,138,5,101,0,0,138,46,1,0,0,0,
        139,141,5,45,0,0,140,139,1,0,0,0,140,141,1,0,0,0,141,143,1,0,0,0,
        142,144,7,0,0,0,143,142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,
        145,146,1,0,0,0,146,48,1,0,0,0,147,149,7,1,0,0,148,147,1,0,0,0,149,
        150,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,50,1,0,0,0,152,154,
        7,2,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,
        1,0,0,0,156,157,1,0,0,0,157,158,6,25,0,0,158,52,1,0,0,0,159,163,
        5,35,0,0,160,162,8,3,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,
        1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,
        6,26,0,0,167,54,1,0,0,0,6,0,140,145,150,155,163,1,6,0,0
    ]

class ImpLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    TRUE = 22
    FALSE = 23
    NUM = 24
    ID = 25
    WS = 26
    COMMENT = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'('", "')'", "'<='", "'=='", "'not'", "'and'", 
            "'or'", "'skip'", "'err'", "'='", "'assert'", "'if'", "'then'", 
            "'else'", "'fi'", "'while'", "'do'", "'od'", "';'", "'true'", 
            "'false'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "NUM", "ID", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "TRUE", "FALSE", "NUM", "ID", "WS", "COMMENT" ]

    grammarFileName = "ImpLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


