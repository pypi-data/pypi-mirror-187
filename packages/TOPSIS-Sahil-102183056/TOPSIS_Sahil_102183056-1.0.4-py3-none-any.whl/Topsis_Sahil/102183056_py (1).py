# -*- coding: utf-8 -*-
"""102183056.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bkz-Li4xT1gHcTmmsBM1MsGVE89_sVYd
"""

import pandas as pd
import numpy as np
import sys

def topsis(data,weights,impact,result):
    # File Not Found error
    if  (data.empty):
        print(f"ERROR : Don't exist!!")
        exit(1)
    else:
        nCol = len(data.columns)

        # less then 3 columns in input dataset
        if nCol < 3:
            print("ERROR : Input file have less then 3 columns")
            exit(1)

        # Handeling non-numeric value
        for i in range(1, nCol):
            pd.to_numeric(data.iloc[:, i], errors='coerce')
            data.iloc[:, i].fillna(
                (data.iloc[:, i].mean()), inplace=True)

        # Handling errors of weighted and impact arrays
        for i in range(len(weights) - 1):
            if str(weights[i]) + ',' == str(weights[i + 1])[:-1]:
              print("Weights array is not seperated by comma")
              break

        for i in range(len(impact) - 1):
          if str(impact[i]) + ',' == str(impact[i + 1])[:-1]:
             print("Impact array is not seperated by comma")  
             break


        for i in impact:
            if not (i == '+' or i == '-'):
                print("ERROR : In impact array please check again")
                exit(1)

        # Checking number of column,weights and impacts is same or not
        if nCol != len(weights)+1 or nCol != len(impact)+1:
            print(
                "ERROR : Number of weights, number of impacts and number of columns not same")
            exit(1)
            
        ##Call the function
        topsis_fun(data, weights, impact)

         ##  Writing final dataset to the result csv file
        data.to_csv('/content/102183056-result-2.csv', index=False)

def Normalize(dataset, nCol, weights):
    for i in range(0, nCol):
        temp = 0
        for j in range(len(dataset)):
            temp = temp + dataset.iloc[j, i]**2
        temp = temp**0.5
        for j in range(len(dataset)):
            dataset.iat[j, i] = (
                dataset.iloc[j, i] / temp)*weights[i-1]
    return dataset


def func(dataset, nCol1, impact):
    positive = (dataset.max().values)[0:]
    negative = (dataset.min().values)[0:]
    for i in range(0, nCol1):
        if impact[i] == '-':
            positive[i] = negative[i]
            negative[i] = positive[i]
    return positive, negative


def topsis_fun(data, weights, impact):
    ##remove 1st column which is the name column
    data.drop(data.columns[0], axis=1, inplace=True)
    nCol1=len(data.columns)
    data = Normalize(data, nCol1, weights)

    # Calculating positive and negative values
    positive, negative = func(data, nCol1, impact)

    score = []
    for i in range(len(data)):
        temp_p= 0
        temp_n=0
        for j in range(0, nCol1):
            temp_p = temp_p + (positive[j] - data.iloc[i, j])**2
            temp_n = temp_n + (negative[j] - data.iloc[i, j])**2
        temp_p, temp_n = temp_p**0.5, temp_n**0.5
        score.append(temp_n/(temp_p + temp_n))
    data['Score'] = score

    # calculating the rank according to topsis score
    data['Rank'] = (data['Score'].rank(
        method='max', ascending=False))
    data = data.astype({"Rank": int})


if __name__ == "__main__":
  data=pd.read_csv('/content/102183056-data.csv .csv')
  weights=[2,2,3,3,4]
  impact=["-","+","-","+","-"]
  result=pd.read_csv('/content/102183056-result-2.csv')
  print(data)
  topsis(data,weights,impact,result)
  print(data)