# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ft_capability_pb2 as ft__capability__pb2
import ft_streams_pb2 as ft__streams__pb2
import ft_types_pb2 as ft__types__pb2


class streamsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateStreamThread = channel.unary_unary(
                '/foxtrot.streams/CreateStreamThread',
                request_serializer=ft__streams__pb2.stream_thread_request.SerializeToString,
                response_deserializer=ft__streams__pb2.stream_thread_response.FromString,
                )
        self.ListStreamThread = channel.unary_unary(
                '/foxtrot.streams/ListStreamThread',
                request_serializer=ft__types__pb2.empty.SerializeToString,
                response_deserializer=ft__streams__pb2.streamthreadlist.FromString,
                )
        self.DestroyStreamThread = channel.unary_unary(
                '/foxtrot.streams/DestroyStreamThread',
                request_serializer=ft__streams__pb2.stream_thread_request.SerializeToString,
                response_deserializer=ft__streams__pb2.stream_thread_response.FromString,
                )
        self.CreateStream = channel.unary_unary(
                '/foxtrot.streams/CreateStream',
                request_serializer=ft__streams__pb2.stream_registration_request.SerializeToString,
                response_deserializer=ft__streams__pb2.stream_registration_response.FromString,
                )
        self.ListStreams = channel.unary_unary(
                '/foxtrot.streams/ListStreams',
                request_serializer=ft__types__pb2.empty.SerializeToString,
                response_deserializer=ft__streams__pb2.streamlist.FromString,
                )
        self.ReceiveStream = channel.stream_stream(
                '/foxtrot.streams/ReceiveStream',
                request_serializer=ft__streams__pb2.stream_control.SerializeToString,
                response_deserializer=ft__capability__pb2.capability_response.FromString,
                )
        self.DestroyStream = channel.unary_unary(
                '/foxtrot.streams/DestroyStream',
                request_serializer=ft__streams__pb2.stream_registration_request.SerializeToString,
                response_deserializer=ft__streams__pb2.stream_registration_response.FromString,
                )
        self.StreamFlagUpdates = channel.stream_stream(
                '/foxtrot.streams/StreamFlagUpdates',
                request_serializer=ft__streams__pb2.stream_control.SerializeToString,
                response_deserializer=ft__streams__pb2.serverflagupdate.FromString,
                )


class streamsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateStreamThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStreamThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DestroyStreamThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStreams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DestroyStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamFlagUpdates(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_streamsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateStreamThread': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateStreamThread,
                    request_deserializer=ft__streams__pb2.stream_thread_request.FromString,
                    response_serializer=ft__streams__pb2.stream_thread_response.SerializeToString,
            ),
            'ListStreamThread': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStreamThread,
                    request_deserializer=ft__types__pb2.empty.FromString,
                    response_serializer=ft__streams__pb2.streamthreadlist.SerializeToString,
            ),
            'DestroyStreamThread': grpc.unary_unary_rpc_method_handler(
                    servicer.DestroyStreamThread,
                    request_deserializer=ft__streams__pb2.stream_thread_request.FromString,
                    response_serializer=ft__streams__pb2.stream_thread_response.SerializeToString,
            ),
            'CreateStream': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateStream,
                    request_deserializer=ft__streams__pb2.stream_registration_request.FromString,
                    response_serializer=ft__streams__pb2.stream_registration_response.SerializeToString,
            ),
            'ListStreams': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStreams,
                    request_deserializer=ft__types__pb2.empty.FromString,
                    response_serializer=ft__streams__pb2.streamlist.SerializeToString,
            ),
            'ReceiveStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ReceiveStream,
                    request_deserializer=ft__streams__pb2.stream_control.FromString,
                    response_serializer=ft__capability__pb2.capability_response.SerializeToString,
            ),
            'DestroyStream': grpc.unary_unary_rpc_method_handler(
                    servicer.DestroyStream,
                    request_deserializer=ft__streams__pb2.stream_registration_request.FromString,
                    response_serializer=ft__streams__pb2.stream_registration_response.SerializeToString,
            ),
            'StreamFlagUpdates': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamFlagUpdates,
                    request_deserializer=ft__streams__pb2.stream_control.FromString,
                    response_serializer=ft__streams__pb2.serverflagupdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'foxtrot.streams', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class streams(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateStreamThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.streams/CreateStreamThread',
            ft__streams__pb2.stream_thread_request.SerializeToString,
            ft__streams__pb2.stream_thread_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStreamThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.streams/ListStreamThread',
            ft__types__pb2.empty.SerializeToString,
            ft__streams__pb2.streamthreadlist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DestroyStreamThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.streams/DestroyStreamThread',
            ft__streams__pb2.stream_thread_request.SerializeToString,
            ft__streams__pb2.stream_thread_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.streams/CreateStream',
            ft__streams__pb2.stream_registration_request.SerializeToString,
            ft__streams__pb2.stream_registration_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStreams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.streams/ListStreams',
            ft__types__pb2.empty.SerializeToString,
            ft__streams__pb2.streamlist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/foxtrot.streams/ReceiveStream',
            ft__streams__pb2.stream_control.SerializeToString,
            ft__capability__pb2.capability_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DestroyStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.streams/DestroyStream',
            ft__streams__pb2.stream_registration_request.SerializeToString,
            ft__streams__pb2.stream_registration_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamFlagUpdates(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/foxtrot.streams/StreamFlagUpdates',
            ft__streams__pb2.stream_control.SerializeToString,
            ft__streams__pb2.serverflagupdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
