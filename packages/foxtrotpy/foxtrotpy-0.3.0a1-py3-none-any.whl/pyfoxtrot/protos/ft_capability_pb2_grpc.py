# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ft_capability_pb2 as ft__capability__pb2
import ft_types_pb2 as ft__types__pb2


class capabilityStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InvokeCapability = channel.unary_unary(
                '/foxtrot.capability/InvokeCapability',
                request_serializer=ft__capability__pb2.capability_request.SerializeToString,
                response_deserializer=ft__capability__pb2.capability_response.FromString,
                )
        self.DescribeServer = channel.unary_unary(
                '/foxtrot.capability/DescribeServer',
                request_serializer=ft__types__pb2.empty.SerializeToString,
                response_deserializer=ft__capability__pb2.servdescribe.FromString,
                )
        self.FetchData = channel.unary_stream(
                '/foxtrot.capability/FetchData',
                request_serializer=ft__capability__pb2.chunk_request.SerializeToString,
                response_deserializer=ft__capability__pb2.datachunk.FromString,
                )


class capabilityServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InvokeCapability(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_capabilityServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InvokeCapability': grpc.unary_unary_rpc_method_handler(
                    servicer.InvokeCapability,
                    request_deserializer=ft__capability__pb2.capability_request.FromString,
                    response_serializer=ft__capability__pb2.capability_response.SerializeToString,
            ),
            'DescribeServer': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeServer,
                    request_deserializer=ft__types__pb2.empty.FromString,
                    response_serializer=ft__capability__pb2.servdescribe.SerializeToString,
            ),
            'FetchData': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchData,
                    request_deserializer=ft__capability__pb2.chunk_request.FromString,
                    response_serializer=ft__capability__pb2.datachunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'foxtrot.capability', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class capability(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InvokeCapability(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.capability/InvokeCapability',
            ft__capability__pb2.capability_request.SerializeToString,
            ft__capability__pb2.capability_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/foxtrot.capability/DescribeServer',
            ft__types__pb2.empty.SerializeToString,
            ft__capability__pb2.servdescribe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/foxtrot.capability/FetchData',
            ft__capability__pb2.chunk_request.SerializeToString,
            ft__capability__pb2.datachunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
