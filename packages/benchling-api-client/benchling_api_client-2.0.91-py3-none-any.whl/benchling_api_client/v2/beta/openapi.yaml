paths:
  /aa-sequences/{entity_registry_id}:upsert:
    patch:
      description: 'Create or update a registered AA sequence.


        Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value).

        '
      operationId: upsertAaSequence
      parameters:
      - in: path
        name: entity_registry_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AaSequenceUpsert'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AaSequence'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AaSequence'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create or update a registered AA sequence.
      tags:
      - AA Sequences
  /aa-sequences:bulk-upsert:
    post:
      description: 'All entities and their schemas must be within the same registry.


        This operation performs the following actions:

        1. Any existing objects are looked up in Benchling by the provided entity
        registry ID.

        2. Then, all objects are either created or updated accordingly, temporarily
        skipping any schema field links between objects.

        3. Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value). You may link to objects
        being created in the same operation.

        4. Entities are registered, using the provided name and entity registry ID.


        If any action fails, the whole operation is canceled and no objects are created
        or updated.

        '
      operationId: bulkUpsertAASequences
      parameters:
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).

          '
        in: query
        name: returning
        schema:
          example: aaSequences.id,aaSequences.creator.handle
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AaSequencesBulkUpsertRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the resources of the objects that were
            upserted.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk upsert AA sequences
      tags:
      - AA Sequences
  /aa-sequences:find-matching-regions:
    post:
      description: Find matching regions for AA sequences
      operationId: findMatchingRegionsAaSequences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AaSequencesFindMatchingRegion'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            It is used to search for AA sequences that are either subsequences or
            exact matches of the provided target sequences.

            Each returned item represents the group of sequences that partially or
            fully match the target sequence."

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Find matching regions for AA sequences
      tags:
      - AA Sequences
  /aa-sequences:match-amino-acids:
    post:
      description: 'Returns AA Sequences that exactly match the provided amino acids.

        '
      operationId: matchAminoAcidsAaSequences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AaSequencesMatchBases'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AaSequencesPaginatedList'
          description: A filtered list of AA Sequences
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List entities with matching amino acids
      tags:
      - AA Sequences
  /aa-sequences:search-amino-acids:
    post:
      description: 'Returns AA Sequences that contain the provided amino acids. Search
        indexing is asynchronous, so results my be not be available immediately after
        creation.

        '
      operationId: searchAaSequences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AaSequencesSearchBases'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AaSequencesPaginatedList'
          description: A filtered list of AA Sequences
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Search AA Sequences
      tags:
      - AA Sequences
  /apps/{app_id}/configuration:
    get:
      deprecated: true
      description: Get an app's configuration by app id
      operationId: getAppConfigurationByAppID
      parameters:
      - description: the ID of the app
        example: app_e59sjL23Pqn30xHg
        in: path
        name: app_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BenchlingAppConfiguration'
          description: OK
      summary: Get an app's configuration by app id
      tags:
      - Apps
  /apps/{app_id}/manifest.yaml:
    get:
      description: Get app manifest
      operationId: getBenchlingAppManifest
      parameters:
      - example: app_e59sjL23Pqn30xHg
        in: path
        name: app_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            text/yaml:
              schema:
                $ref: '#/components/schemas/BenchlingAppManifest'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get app manifest
      tags:
      - Apps
    put:
      description: Create or update from an app manifest
      operationId: putBenchlingAppManifest
      parameters:
      - example: app_e59sjL23Pqn30xHg
        in: path
        name: app_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/yaml:
            schema:
              $ref: '#/components/schemas/BenchlingAppManifest'
      responses:
        '200':
          content:
            text/yaml:
              schema:
                $ref: '#/components/schemas/BenchlingAppManifest'
          description: Updated
        '201':
          content:
            text/yaml:
              schema:
                $ref: '#/components/schemas/BenchlingAppManifest'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
          description: Conflict
      summary: Create or update from an app manifest
      tags:
      - Apps
  /canvases:
    post:
      description: 'Create an App Canvas that a Benchling App can write to and read
        user interaction from.

        '
      operationId: createCanvas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanvasCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Canvas'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      summary: Create an App Canvas
      tags:
      - Apps
  /canvases/{canvas_id}:
    get:
      description: Get the current state of the App Canvas, including user input elements.
      operationId: getCanvas
      parameters:
      - example: cnvs_Q4mPJ34a
        in: path
        name: canvas_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Canvas'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get App Canvas
      tags:
      - Apps
    patch:
      description: Update App Canvas
      operationId: updateCanvas
      parameters:
      - example: cnvs_Q4mPJ34a
        in: path
        name: canvas_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanvasUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Canvas'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Update App Canvas
      tags:
      - Apps
  /canvases:archive:
    post:
      description: Archive canvases
      operationId: archiveCanvases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanvasesArchive'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanvasesArchivalChange'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Archive canvases
      tags:
      - Apps
  /canvases:unarchive:
    post:
      description: Unarchive canvases
      operationId: unarchiveCanvases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanvasesUnarchive'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanvasesArchivalChange'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Unarchive canvases
      tags:
      - Apps
  /custom-entities/{entity_registry_id}:upsert:
    patch:
      description: 'Create or update a registered custom entity.


        Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value).

        '
      operationId: upsertCustomEntity
      parameters:
      - example: entity_registry_id_001
        in: path
        name: entity_registry_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomEntityUpsertRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEntity'
          description: Updated
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEntity'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create or update a registered custom entity
      tags:
      - Custom Entities
  /custom-entities:bulk-upsert:
    post:
      description: 'All entities and their schemas must be within the same registry.


        This operation performs the following actions:

        1. Any existing objects are looked up in Benchling by the provided entity
        registry ID.

        2. Then, all objects are either created or updated accordingly, temporarily
        skipping any schema field links between objects.

        3. Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value). You may link to objects
        being created in the same operation.

        4. Entities are registered, using the provided name and entity registry ID.


        If any action fails, the whole operation is canceled and no objects are created
        or updated.


        Limit of 2500 custom entities per request.

        '
      operationId: bulkUpsertCustomEntities
      parameters:
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).

          '
        in: query
        name: returning
        schema:
          example: customEntities.id,customEntities.creator.handle
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomEntitiesBulkUpsertRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the resources of the objects that were
            upserted.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk upsert custom entities
      tags:
      - Custom Entities
  /dna-oligos/{entity_registry_id}:upsert:
    patch:
      description: 'Create or update a registered DNA oligo.


        Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value).

        '
      operationId: upsertDnaOligo
      parameters:
      - example: entity_registry_id_001
        in: path
        name: entity_registry_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OligoUpsertRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnaOligo'
          description: Updated
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnaOligo'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create or update a registered DNA oligo
      tags:
      - DNA Oligos
  /dna-oligos:bulk-upsert:
    post:
      description: 'All entities and their schemas must be within the same registry.


        This operation performs the following actions:

        1. Any existing objects are looked up in Benchling by the provided entity
        registry ID.

        2. Then, all objects are either created or updated accordingly, temporarily
        skipping any schema field links between objects.

        3. Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value). You may link to objects
        being created in the same operation.

        4. Entities are registered, using the provided name and entity registry ID.


        If any action fails, the whole operation is canceled and no objects are created
        or updated.


        Limit of 1000 entities per request.

        '
      operationId: bulkUpsertDNAOligos
      parameters:
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).

          '
        in: query
        name: returning
        schema:
          example: dnaOligos.id,dnaOligos.creator.handle
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnaOligosBulkUpsertRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the resources of the objects that were
            upserted.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk upsert DNA oligos
      tags:
      - DNA Oligos
  /dna-sequences/{entity_registry_id}:upsert:
    patch:
      description: 'Create or update a registered DNA sequence.


        Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value).

        '
      operationId: upsertDNASequence
      parameters:
      - in: path
        name: entity_registry_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnaSequenceUpsertRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnaSequence'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnaSequence'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create or update a registered DNA sequence
      tags:
      - DNA Sequences
  /dna-sequences:bulk-upsert:
    post:
      description: 'All entities and their schemas must be within the same registry.


        This operation performs the following actions:

        1. Any existing objects are looked up in Benchling by the provided entity
        registry ID.

        2. Then, all objects are either created or updated accordingly, temporarily
        skipping any schema field links between objects.

        3. Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value). You may link to objects
        being created in the same operation.

        4. Entities are registered, using the provided name and entity registry ID.


        If any action fails, the whole operation is canceled and no objects are created
        or updated.

        '
      operationId: bulkUpsertDnaSequences
      parameters:
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).

          '
        in: query
        name: returning
        schema:
          example: dnaSequences.id,dnaSequences.creator.handle
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnaSequencesBulkUpsertRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the resources of the objects that were
            upserted.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk upsert DNA sequences
      tags:
      - DNA Sequences
  /dna-sequences:match-bases:
    post:
      description: 'Returns DNA Sequences that exactly match the provided bases.

        '
      operationId: matchBasesDnaSequences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnaSequencesMatchBases'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnaSequencesPaginatedList'
          description: A filtered list of DNA Sequences
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List entities with matching bases
      tags:
      - DNA Sequences
  /dna-sequences:search-bases:
    post:
      description: 'Returns DNA Sequences that contain the provided bases. Search
        indexing is asynchronous, so results my be not be available immediately after
        creation.

        '
      operationId: searchDnaSequences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnaSequencesSearchBases'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnaSequencesPaginatedList'
          description: A filtered list of DNA Sequences
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Search DNA Sequences
      tags:
      - DNA Sequences
  /entities:bulk-upsert:
    post:
      description: 'All entities and their schemas must be within the same registry.


        This operation performs the following actions:

        1. Any existing objects are looked up in Benchling by the provided entity
        registry ID.

        2. Then, all objects are either created or updated accordingly, temporarily
        skipping any schema field links between objects.

        3. Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value). You may link to objects
        being created in the same operation.

        4. Entities are registered, using the provided name and entity registry ID.


        If any action fails, the whole operation is canceled and no objects are created
        or updated.

        '
      operationId: bulkUpsertEntities
      parameters:
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).

          '
        in: query
        name: returning
        schema:
          example: customEntities.id,customEntities.creator.handle
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitiesBulkUpsertRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the resources of the objects that were
            upserted.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk upsert entities
      tags:
      - Entities
  /entries:
    post:
      description: Create a notebook entry
      operationId: createEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create a notebook entry
      tags:
      - Entries
  /entry-templates/{entry_template_id}:
    get:
      description: Get a notebook template entry by ID
      operationId: getTemplateEntry
      parameters:
      - description: ID of the entry template
        in: path
        name: entry_template_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryTemplate'
          description: 'Returns a single entry template. Entry templates are templates
            that users can base new notebook entries off of.

            '
      summary: Get a notebook template entry by ID
      tags:
      - Entries
  /general-access-policies:
    get:
      description: Returns a list of general (project/registry) access policies.
      operationId: listGeneralAccessPolicies
      parameters:
      - in: query
        name: nextToken
        schema:
          type: string
      - in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPoliciesPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List general access policies
      tags:
      - Access Policies
  /general-access-policies/{policy_id}:
    get:
      description: Returns a general (project/registry) policy by ID.
      operationId: getGeneralAccessPolicy
      parameters:
      - description: ID of policy to get
        in: path
        name: policy_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPolicy'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get a general access policy by ID
      tags:
      - Access Policies
  /molecules/{entity_registry_id}:upsert:
    patch:
      description: 'Create or update a registered Molecule.


        Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value).

        '
      operationId: upsertMolecule
      parameters:
      - in: path
        name: entity_registry_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoleculeUpsertRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Molecule'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Molecule'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create or update a registered Molecule
      tags:
      - Molecules
  /molecules:bulk-upsert:
    post:
      description: 'All entities and their schemas must be within the same registry.


        This operation performs the following actions:

        1. Any existing objects are looked up in Benchling by the provided entity
        registry ID.

        2. Then, all objects are either created or updated accordingly, temporarily
        skipping any schema field links between objects.

        3. Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value). You may link to objects
        being created in the same operation.

        4. Entities are registered, using the provided name and entity registry ID.


        If any action fails, the whole operation is canceled and no objects are created
        or updated.

        '
      operationId: bulkUpsertMolecules
      parameters:
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).

          '
        in: query
        name: returning
        schema:
          example: molecules.id,molecules.creator.handle
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoleculeBulkUpsertRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the resources of the objects that were
            upserted.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk upsert Molecules
      tags:
      - Molecules
  /organizations:
    get:
      description: "Returns all organizations that the caller has permission to view.\
        \ The following roles have view permission:\n  - tenant admins\n  - members\
        \ of the organization\n"
      operationId: listOrganizations
      parameters:
      - description: 'Comma-separated list of ids. Matches all of the provided IDs,
          or returns a 400 error that includes a list of which IDs are invalid.

          '
        in: query
        name: ids
        schema:
          example: ent_ZJy8RTbo,ent_8GVbVkPj,ent_qREJ33rn
          type: string
      - description: Name of an organization. Restricts results to those with the
          specified name.
        in: query
        name: name
        schema:
          type: string
      - description: Name substring of an organization. Restricts results to those
          with names that include the provided substring.
        in: query
        name: nameIncludes
        schema:
          type: string
      - description: 'Comma-separated list of names. Restricts results to those that
          match any of the specified names, case insensitive.  Warning - this filter
          can be non-performant due to case insensitivity.

          '
        in: query
        name: names.anyOf
        schema:
          example: MyName1,MyName2
          type: string
      - description: 'Comma-separated list of names. Restricts results to those that
          match any of the specified names, case sensitive.

          '
        in: query
        name: names.anyOf.caseSensitive
        schema:
          example: MyName1,MyName2
          type: string
      - description: 'Datetime, in RFC 3339 format. Supports the > and < operators.
          Time zone defaults to UTC. Restricts results to those modified in the specified
          range. e.g. > 2017-04-30.

          '
        in: query
        name: modifiedAt
        schema:
          type: string
      - description: 'Comma-separated list of entry IDs. Restricts results to organizations
          mentioned in those entries.

          '
        in: query
        name: mentionedIn
        schema:
          example: etr_1X1AlQPD, etr_tv7m7B78
          type: string
      - description: Comma-separated list of user or Benchling app IDs. Restricts
          results to organizations that include all the given users/apps as members.
        in: query
        name: hasMembers
        schema:
          type: string
      - description: Comma-separated list of user or Benchling app IDs. Restricts
          results to organizations that include all the given users/apps as admins.
        in: query
        name: hasAdmins
        schema:
          type: string
      - in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      - in: query
        name: sort
        schema:
          default: modifiedAt:desc
          description: 'Sets the sort-order of the response. Valid sorts are modifiedAt
            (modified time, most recent first) and name (organization name, alphabetical).
            Optionally add :asc or :desc to specify ascending or descending order.

            '
          enum:
          - modifiedAt
          - modifiedAt:asc
          - modifiedAt:desc
          - name
          - name:asc
          - name:desc
          nullable: false
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List organizations
      tags:
      - Organizations
  /organizations/{organization_id}:
    get:
      description: "Returns an organization by ID if the caller has permission to\
        \ view. The following roles have view permission:\n  - tenant admins\n  -\
        \ members of the organization\n"
      operationId: getOrganization
      parameters:
      - description: ID of organization to get
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get an organization by ID
      tags:
      - Organizations
  /projects/{projectId}/collaborations:
    get:
      description: 'Returns information about collaborations on the specified project.

        '
      operationId: listProjectCollaborations
      parameters:
      - description: ID of project for which to retrieve collaborations.
        in: path
        name: projectId
        required: true
        schema:
          type: string
      - in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaborationsPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: List project collaborations
      tags:
      - Projects
  /rna-oligos/{entity_registry_id}:upsert:
    patch:
      description: 'Create or update a registered RNA oligo.


        Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value).

        '
      operationId: upsertRnaOligo
      parameters:
      - example: entity_registry_id_001
        in: path
        name: entity_registry_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OligoUpsertRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RnaOligo'
          description: Updated
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RnaOligo'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create or update a registered RNA oligo
      tags:
      - RNA Oligos
  /rna-oligos:bulk-upsert:
    post:
      description: 'All entities and their schemas must be within the same registry.


        This operation performs the following actions:

        1. Any existing objects are looked up in Benchling by the provided entity
        registry ID.

        2. Then, all objects are either created or updated accordingly, temporarily
        skipping any schema field links between objects.

        3. Schema field links can be populated using entity registry IDs or API IDs.
        In the `value` field of the [Field](#/components/schemas/FieldWithResolution)
        resource, the object `{"entityRegistryId": ENTITY_REGISTRY_ID}` may be provided
        instead of the API ID if desired (see example value). You may link to objects
        being created in the same operation.

        4. Entities are registered, using the provided name and entity registry ID.


        If any action fails, the whole operation is canceled and no objects are created
        or updated.


        Limit of 1000 entities per request.

        '
      operationId: bulkUpsertRNAOligos
      parameters:
      - description: 'Comma-separated list of fields to return. Modifies the output
          shape. To return all keys at a given level, enumerate them or use the wildcard,
          ''*''. For more information, [click here](https://docs.benchling.com/docs/getting-started-1#returning-query-parameter).

          '
        in: query
        name: returning
        schema:
          example: rnaOligos.id,rnaOligos.creator.handle
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RnaOligosBulkUpsertRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns the resources of the objects that were
            upserted.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk upsert RNA oligos
      tags:
      - RNA Oligos
  /schema-access-policies:
    get:
      description: Returns a list of schema access policies.
      operationId: listSchemaAccessPolicies
      parameters:
      - in: query
        name: nextToken
        schema:
          type: string
      - in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPoliciesPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List schema access policies
      tags:
      - Access Policies
  /schema-access-policies/{policy_id}:
    get:
      description: Returns a schema access policy by ID.
      operationId: getSchemaAccessPolicy
      parameters:
      - description: ID of policy to get
        in: path
        name: policy_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPolicy'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get a schema access policy by ID
      tags:
      - Access Policies
  /teams:
    get:
      description: "Returns all teams that the caller has permission to view. The\
        \ following roles have view permission:\n  - tenant admins\n  - members of\
        \ the team's organization\n"
      operationId: listTeams
      parameters:
      - description: 'Comma-separated list of ids. Matches all of the provided IDs,
          or returns a 400 error that includes a list of which IDs are invalid.

          '
        in: query
        name: ids
        schema:
          example: team_ZJy8RTbo,team_8GVbVkPj,team_qREJ33rn
          type: string
      - description: Name of a team. Restricts results to those with the specified
          name.
        in: query
        name: name
        schema:
          type: string
      - description: Name substring of a team. Restricts results to those with names
          that include the provided substring.
        in: query
        name: nameIncludes
        schema:
          type: string
      - description: 'Comma-separated list of names. Restricts results to those that
          match any of the specified names, case insensitive.  Warning - this filter
          can be non-performant due to case insensitivity.

          '
        in: query
        name: names.anyOf
        schema:
          example: MyName1,MyName2
          type: string
      - description: 'Comma-separated list of names. Restricts results to those that
          match any of the specified names, case sensitive.

          '
        in: query
        name: names.anyOf.caseSensitive
        schema:
          example: MyName1,MyName2
          type: string
      - description: 'Datetime, in RFC 3339 format. Supports the > and < operators.
          Time zone defaults to UTC. Restricts results to those modified in the specified
          range. e.g. > 2017-04-30.

          '
        in: query
        name: modifiedAt
        schema:
          type: string
      - description: 'Comma-separated list of entry IDs. Restricts results to teams
          mentioned in those entries.

          '
        in: query
        name: mentionedIn
        schema:
          example: etr_1X1AlQPD, etr_tv7m7B78
          type: string
      - description: Restricts results to those in the organization.
        in: query
        name: organizationId
        schema:
          type: string
      - description: Comma-separated list of user or Benchling app IDs. Restricts
          results to teams that include all the given users/apps as members.
        in: query
        name: hasMembers
        schema:
          type: string
      - description: Comma-separated list of user or Benchling app IDs. Restricts
          results to teams that include all the given users/apps as admins.
        in: query
        name: hasAdmins
        schema:
          type: string
      - in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      - in: query
        name: sort
        schema:
          default: modifiedAt:desc
          description: 'Sets the sort-order of the response. Valid sorts are modifiedAt
            (modified time, most recent first) and name (team name, alphabetical).
            Optionally add :asc or :desc to specify ascending or descending order.

            '
          enum:
          - modifiedAt
          - modifiedAt:asc
          - modifiedAt:desc
          - name
          - name:asc
          - name:desc
          nullable: false
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List teams
      tags:
      - Teams
  /teams/{team_id}:
    get:
      description: "Returns a team by ID if the caller has permission to view. The\
        \ following roles have view permission:\n  - tenant admins\n  - members of\
        \ the team's organization\n"
      operationId: getTeam
      parameters:
      - description: ID of team to get
        in: path
        name: team_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get a team by ID
      tags:
      - Teams
  /users:
    get:
      description: "Returns all users that the caller has permission to view. The\
        \ following roles have view permission:\n  - tenant admins\n  - members of\
        \ the user's organizations\n"
      operationId: listUsers
      parameters:
      - description: 'Comma-separated list of ids. Matches all of the provided IDs,
          or returns a 400 error that includes a list of which IDs are invalid.

          '
        in: query
        name: ids
        schema:
          example: ent_ZJy8RTbo,ent_8GVbVkPj,ent_qREJ33rn
          type: string
      - description: Name of a user. Restricts results to those with the specified
          name.
        in: query
        name: name
        schema:
          type: string
      - description: Name substring of a user. Restricts results to those with names
          that include the provided substring.
        in: query
        name: nameIncludes
        schema:
          type: string
      - description: 'Comma-separated list of names. Restricts results to those that
          match any of the specified names, case insensitive.  Warning - this filter
          can be non-performant due to case insensitivity.

          '
        in: query
        name: names.anyOf
        schema:
          example: MyName1,MyName2
          type: string
      - description: 'Comma-separated list of names. Restricts results to those that
          match any of the specified names, case sensitive.

          '
        in: query
        name: names.anyOf.caseSensitive
        schema:
          example: MyName1,MyName2
          type: string
      - description: 'Datetime, in RFC 3339 format. Supports the > and < operators.
          Time zone defaults to UTC. Restricts results to those modified in the specified
          range. e.g. > 2017-04-30.

          '
        in: query
        name: modifiedAt
        schema:
          type: string
      - description: 'Comma-separated list of entry IDs. Restricts results to users
          mentioned in those entries.

          '
        in: query
        name: mentionedIn
        schema:
          example: etr_1X1AlQPD, etr_tv7m7B78
          type: string
      - description: Comma-separated list of organization and/or team API IDs. Restricts
          results to users that are members of all given groups.
        in: query
        name: memberOf
        schema:
          type: string
      - description: Comma-separated list of organization and/or team API IDs. Restricts
          results to users that are admins of all given groups.
        in: query
        name: adminOf
        schema:
          type: string
      - description: Comma-separated list of handles. Restricts results to the users
          with the specified handles.
        in: query
        name: handles
        schema:
          type: string
      - in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      - in: query
        name: sort
        schema:
          default: modifiedAt:desc
          description: 'Sets the sort-order of the response. Valid sorts are modifiedAt
            (modified time, most recent first) and name (user name, alphabetical).
            Optionally add :asc or :desc to specify ascending or descending order.

            '
          enum:
          - modifiedAt
          - modifiedAt:asc
          - modifiedAt:desc
          - name
          - name:asc
          - name:desc
          nullable: false
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPaginatedList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List users
      tags:
      - Users
    post:
      deprecated: true
      description: Creates a single user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create a user
      tags:
      - Users
  /users/{user_id}:
    get:
      description: "Returns a user by ID if the caller has permission to view. The\
        \ following roles have view permission:\n  - tenant admins\n  - members of\
        \ any of the user's organizations\n"
      operationId: getUser
      parameters:
      - description: ID of user to get
        in: path
        name: user_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Get a user by ID
      tags:
      - Users
    patch:
      deprecated: true
      description: Update a single user.
      operationId: updateUser
      parameters:
      - description: ID of user to update
        in: path
        name: user_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Update a user by ID
      tags:
      - Users
  /users/{user_id}/activity:
    get:
      deprecated: true
      description: 'Returns activity metadata for a specific user by ID. This currently
        includes lastSeen data.

        '
      operationId: getUserActivity
      parameters:
      - description: ID of user to get
        in: path
        name: user_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivity'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not Found
      summary: Last user activity
      tags:
      - Users
  /users:bulk-create:
    post:
      deprecated: true
      description: Bulk Create Users.
      operationId: bulkCreateUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBulkCreateRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns a full list of [Users](#/users/bulkCreateUsers)
            resources that were created.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk Create Users
      tags:
      - Users
  /users:bulk-update:
    post:
      deprecated: true
      description: 'There is currently **no support** for swapping emails or handles
        between existing users in the same request.

        '
      operationId: bulkUpdateUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBulkUpdateRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncTaskLink'
          description: 'This endpoint launches a [long-running task](#/Tasks/getTask)
            and returns the Task ID of the launched task.

            When successful, the task returns a full list of [Users](#/users/bulkUpdateUsers)
            resources that were updated.

            '
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Bulk Update Users.
      tags:
      - Users
  /worklists:
    get:
      description: 'List worklists. Individual items within a worklist are summarized.

        '
      operationId: listWorklists
      parameters:
      - description: Number of results to return. Defaults to 50, maximum of 100.
        in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      - description: 'Method by which to order search results. Valid sorts are modifiedAt
          (modified time, most recent first) and name (entity name, alphabetical).
          Optionally add :asc or :desc to specify ascending or descending order.

          '
        in: query
        name: sort
        schema:
          default: modifiedAt:desc
          enum:
          - modifiedAt
          - modifiedAt:asc
          - modifiedAt:desc
          - name
          - name:asc
          - name:desc
          nullable: false
          type: string
      - description: 'Datetime, in RFC 3339 format. Supports the > operator. Time
          zone defaults to UTC. Restricts results to those modified in the specified
          range. e.g. > 2017-04-30.

          '
        in: query
        name: modifiedAt
        schema:
          type: string
      - description: Name of a Worklist. Restricts results to those with the specified
          name.
        in: query
        name: name
        schema:
          type: string
      - description: 'Comma-separated list of ids. Matches all of the provided IDs,
          or returns a 400 error that includes a list of which IDs are invalid.

          '
        in: query
        name: ids
        schema:
          type: string
      - description: 'Comma-separated list of names. Restricts results to those that
          match any of the specified names, case insensitive.  Warning - this filter
          can be non-performant due to case insensitivity.

          '
        in: query
        name: names.anyOf
        schema:
          example: MyName1,MyName2
          type: string
      - description: 'Comma-separated list of names. Restricts results to those that
          match any of the specified names, case sensitive.

          '
        in: query
        name: names.anyOf.caseSensitive
        schema:
          example: MyName1,MyName2
          type: string
      - description: Name substring of a Worklist. Restricts results to those with
          names that include the provided substring.
        in: query
        name: nameIncludes
        schema:
          type: string
      - description: The type of Worklist. All items within the worklist belong to
          this type.
        in: query
        name: worklistType
        schema:
          $ref: '#/components/schemas/WorklistType'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistsPaginatedList'
          description: 'Returns a list of worklists. Items within the worklist are
            returned as summaries only.

            '
          headers:
            Result-Count:
              description: The total number of items that match the given query
              schema:
                type: integer
            x-rate-limit-limit:
              description: The number of allowed requests in the current rate-limit
                period
              schema:
                type: integer
            x-rate-limit-remaining:
              description: The number of requests remaining in the current rate-limit
                period
              schema:
                type: integer
            x-rate-limit-reset:
              description: The number of seconds remaining in the current rate-limit
                period
              schema:
                type: integer
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List worklists
      tags:
      - Worklists
    post:
      description: Create a worklist
      operationId: createWorklist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorklistCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklist'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Create a worklist
      tags:
      - Worklists
  /worklists/{worklist_id}:
    delete:
      description: Permanently deletes a worklist
      operationId: deleteWorklist
      parameters:
      - description: ID of the worklist
        in: path
        name: worklist_id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      summary: Delete a worklist
      tags:
      - Worklists
    get:
      description: Get a worklist by ID
      operationId: getWorklist
      parameters:
      - description: ID of the worklist
        in: path
        name: worklist_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklist'
          description: 'Returns a single worklist. Items within the worklist are returned
            as summaries only.

            '
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      summary: Get a worklist by ID
      tags:
      - Worklists
    patch:
      description: Update a worklist
      operationId: updateWorklist
      parameters:
      - description: ID of the worklist
        in: path
        name: worklist_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorklistUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklist'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Update a worklist
      tags:
      - Worklists
  /worklists/{worklist_id}/items:
    get:
      description: 'List items in a worklist. Items are ordered by their position
        within the worklist.

        '
      operationId: listWorklistItems
      parameters:
      - description: ID of the worklist
        in: path
        name: worklist_id
        required: true
        schema:
          type: string
      - description: Number of results to return. Defaults to 50, maximum of 100.
        in: query
        name: pageSize
        schema:
          default: 50
          maximum: 100
          minimum: 0
          nullable: false
          type: integer
      - description: Token for pagination
        in: query
        name: nextToken
        schema:
          type: string
      - description: 'Archive reason. Restricts items to those with the specified
          archive reason. Use "NOT_ARCHIVED" to filter for unarchived worklist items.
          Use "ANY_ARCHIVED" to filter for archived worklist items regardless of reason.
          Use "ANY_ARCHIVED_OR_NOT_ARCHIVED" to return items for both archived and
          unarchived.

          '
        examples:
          1_not_archived:
            summary: Only include unarchived items (default).
            value: NOT_ARCHIVED
          2_archived_reason:
            summary: Includes items archived for a specific reason.
            value: RETIRED
          3_any_archived:
            summary: Includes items archived for any reason.
            value: ANY_ARCHIVED
          4_any_archived_or_not_archived:
            summary: Includes both archived and unarchived items.
            value: ANY_ARCHIVED_OR_NOT_ARCHIVED
        in: query
        name: archiveReason
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistItemsPaginatedList'
          description: 'Returns a list of items within the worklist.

            '
          headers:
            Result-Count:
              description: The total number of items that match the given query
              schema:
                type: integer
            x-rate-limit-limit:
              description: The number of allowed requests in the current rate-limit
                period
              schema:
                type: integer
            x-rate-limit-remaining:
              description: The number of requests remaining in the current rate-limit
                period
              schema:
                type: integer
            x-rate-limit-reset:
              description: The number of seconds remaining in the current rate-limit
                period
              schema:
                type: integer
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: List worklist items
      tags:
      - Worklists
    post:
      description: 'Appends an item to the end of a worklist if the item is not already
        present in the worklist. Returns 200 OK if the item was already present in
        the worklist and does not change that item''s position.

        '
      operationId: createWorklistItem
      parameters:
      - description: ID of the worklist
        in: path
        name: worklist_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorklistItemCreate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistItem'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorklistItem'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad Request
      summary: Append worklist item
      tags:
      - Worklists
components:
  schemas:
    AaAnnotation:
      properties:
        color:
          type: string
        end:
          type: integer
        id:
          example: prtnann_o7zMPG0P
          type: string
        name:
          maxLength: 255
          type: string
        start:
          type: integer
        type:
          example: Site
          maxLength: 255
          type: string
      type: object
    AaSequence:
      properties:
        aliases:
          description: Array of aliases
          items:
            type: string
          type: array
        aminoAcids:
          description: Amino acids of the AA sequence.
          example: IKTATARRELAETSWTGDRLWGFSDNWAPALRRPSPSALGK
          type: string
        annotations:
          description: Array of annotation objects on the AA sequence.
          items:
            $ref: '#/components/schemas/AaAnnotation'
          type: array
        apiURL:
          description: The canonical url of the AA Sequence in the API.
          example: https://benchling.com/api/v2/aa-sequences/prtn_7nMBOMm0
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        createdAt:
          description: DateTime the AA sequence was created.
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom fields set on the AA sequence.
        entityRegistryId:
          description: Registry ID of the AA sequence if registered.
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          description: ID of the folder that contains the AA sequence.
          nullable: true
          type: string
        id:
          description: ID of the AA sequence.
          example: prtn_ObbdtGhC
          type: string
        length:
          description: Number of amino acids in the AA sequence.
          type: integer
        modifiedAt:
          description: DateTime the AA sequence was last modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the AA sequence.
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          description: Registry the AA sequence is registered in.
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
        webURL:
          description: URL of the protein.
          example: https://benchling.com/benchling/f/lib_55UxcIps-registry/prtn_7nMBOMm0-kedchain11/edit"
          format: uri
          readOnly: true
          type: string
      type: object
    AaSequenceBaseRequest:
      properties:
        aliases:
          description: Aliases to add to the AA sequence
          items:
            type: string
          type: array
        aminoAcids:
          description: 'Amino acids for the AA sequence.

            '
          type: string
        annotations:
          description: 'Annotations to create on the AA sequence.

            '
          items:
            $ref: '#/components/schemas/AaAnnotation'
          type: array
        authorIds:
          description: IDs of users to set as the AA sequence's authors.
          items:
            type: string
          type: array
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: 'Custom fields to add to the AA sequence. Every field should
            have its name as a key, mapping to an object with information about the
            value of the field.

            '
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Fields to set on the AA sequence. Must correspond with the
            schema''s field definitions. Every field should have its name as a key,
            mapping to an object with information about the value of the field.

            '
        folderId:
          description: 'ID of the folder containing the AA sequence.

            '
          type: string
        name:
          description: 'Name of the AA sequence.

            '
          type: string
        schemaId:
          description: 'ID of the AA sequence''s schema.

            '
          type: string
      type: object
    AaSequenceBaseRequestForCreate:
      allOf:
      - $ref: '#/components/schemas/AaSequenceBaseRequest'
      - required:
        - aminoAcids
        - name
    AaSequenceBulkUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/AaSequenceBaseRequestForCreate'
      - required:
        - annotations
    AaSequenceSummary:
      properties:
        entityType:
          enum:
          - aa_sequence
          type: string
        id:
          example: prtn_ObbdtGhC
          type: string
        type:
          deprecated: true
          type: string
      type: object
    AaSequenceUpsert:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/AaSequenceBaseRequestForCreate'
      - required:
        - annotations
    AaSequencesBulkUpsertRequest:
      additionalProperties: false
      maxItems: 1000
      properties:
        aaSequences:
          items:
            $ref: '#/components/schemas/AaSequenceBulkUpsertRequest'
          type: array
      required:
      - aaSequences
      type: object
    AaSequencesFindMatchingRegion:
      additionalProperties: false
      properties:
        registryId:
          description: An optional Registry ID to restrict the region search to
          example: src_ae40j3TZ
          type: string
        schemaId:
          description: Schema ID for the type of AA to match to the source sequence
          example: ts_n4l12nf0
          type: string
        targetAASequenceIds:
          description: API IDs of the AA sequences which matching regions will be
            found for
          example:
          - prtn_W7KgYydE
          - prtn_g7SI2nih
          items:
            type: string
          type: array
      required:
      - targetAASequenceIds
      - schemaId
      type: object
    AaSequencesMatchBases:
      additionalProperties: false
      properties:
        aminoAcids:
          type: string
        archiveReason:
          default: NOT_ARCHIVED
          enum:
          - NOT_ARCHIVED
          - Other
          - Archived
          type: string
        nextToken:
          type: string
        pageSize:
          default: 50
          maximum: 100
          minimum: 0
          type: integer
        registryId:
          description: 'ID of a registry. Restricts results to those registered in
            this registry. Specifying `null` returns unregistered items.

            '
          nullable: true
          type: string
        sort:
          default: modifiedAt:desc
          enum:
          - modifiedAt:asc
          - modifiedAt:desc
          - name:asc
          - name:desc
          type: string
      required:
      - aminoAcids
      type: object
    AaSequencesPaginatedList:
      properties:
        aaSequences:
          items:
            $ref: '#/components/schemas/AaSequence'
          type: array
        nextToken:
          type: string
      type: object
    AaSequencesSearchBases:
      additionalProperties: false
      properties:
        aminoAcids:
          minLength: 3
          type: string
        archiveReason:
          default: NOT_ARCHIVED
          enum:
          - NOT_ARCHIVED
          - Other
          - Archived
          type: string
        nextToken:
          type: string
        pageSize:
          default: 50
          maximum: 100
          minimum: 0
          type: integer
        registryId:
          description: 'ID of a registry. Restricts results to those registered in
            this registry. Specifying `null` returns unregistered items.

            '
          nullable: true
          type: string
        sort:
          default: modifiedAt:desc
          enum:
          - modifiedAt:asc
          - modifiedAt:desc
          - name:asc
          - name:desc
          type: string
      required:
      - aminoAcids
      type: object
    AccessPoliciesPaginatedList:
      additionalProperties: false
      properties:
        nextToken:
          type: string
        policies:
          items:
            $ref: '#/components/schemas/AccessPolicy'
          type: array
      type: object
    AccessPolicy:
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    AppCollaborator:
      allOf:
      - properties:
          type:
            enum:
            - APP
            type: string
      - $ref: '#/components/schemas/AppSummary'
    AppConfigFieldType:
      default: null
      description: Schema field's type, or null for Any.
      enum:
      - dna_sequence_link
      - aa_sequence_link
      - custom_entity_link
      - entity_link
      - mixture_link
      - dropdown
      - part_link
      - translation_link
      - blob_link
      - text
      - long_text
      - batch_link
      - storage_link
      - entry_link
      - assay_request_link
      - assay_result_link
      - assay_run_link
      - boolean
      - float
      - integer
      - datetime
      - date
      - json
      nullable: true
      type: string
    AppSummary:
      properties:
        handle:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    ArchiveRecord:
      properties:
        reason:
          example: Made in error
          type: string
      type: object
    ArchiveRecordSet:
      additionalProperties: false
      description: Currently, we only support setting a null value for archiveRecord,
        which unarchives the item
      example: null
      nullable: true
      type: object
    AssayRunNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          assayRunId:
            example: 588aca02-1a20-4b94-a40f-b3f3a0081749
            nullable: true
            type: string
          assayRunSchemaId:
            example: assaysch_msh1Ly6g
            type: string
          type:
            enum:
            - assay_run
            type: string
        type: object
    AsyncTask:
      properties:
        errors:
          description: 'Present only when status is FAILED for a bulk task. Contains
            information about the individual errors in the bulk task.

            '
          type: object
        message:
          description: Present only when status is FAILED. Contains information about
            the error.
          type: string
        response:
          description: Present only when status is SUCCEEDED. response can be empty
            if there is no data to be returned.
          type: object
        status:
          description: The current state of the task.
          enum:
          - RUNNING
          - SUCCEEDED
          - FAILED
          type: string
      required:
      - status
      type: object
    AsyncTaskLink:
      properties:
        taskId:
          format: uuid
          type: string
      type: object
    BadRequestError:
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/BaseError'
          - properties:
              type:
                enum:
                - invalid_request_error
                type: string
      type: object
    BaseDependencyLink:
      allOf:
      - $ref: '#/components/schemas/SubdependencyLink'
    BaseError:
      properties:
        message:
          type: string
        type:
          type: string
        userMessage:
          type: string
      type: object
    BaseManifestConfig:
      properties:
        description:
          nullable: true
          type: string
        name:
          type: string
      required:
      - name
      type: object
    BaseNotePart:
      properties:
        indentation:
          default: 0
          description: 'All notes have an indentation level - the default is 0 for
            no indent. For lists, indentation gives notes hierarchy - a bulleted list
            with children is modeled as one note part with indentation 1 followed
            by note parts with indentation 2, for example.

            '
          minimum: 0
          type: integer
        type:
          description: 'The type of the note.  Type determines what other fields are
            present.

            '
          type: string
      type: object
    Batch:
      additionalProperties: false
      properties:
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        createdAt:
          description: DateTime at which the the result was created
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          readOnly: true
        defaultConcentration:
          $ref: '#/components/schemas/Measurement'
        entity:
          discriminator:
            mapping:
              aa_sequence: '#/components/schemas/AaSequenceSummary'
              custom_entity: '#/components/schemas/CustomEntitySummary'
              dna_sequence: '#/components/schemas/DnaSequenceSummary'
            propertyName: entityType
          oneOf:
          - $ref: '#/components/schemas/DnaSequenceSummary'
          - $ref: '#/components/schemas/AaSequenceSummary'
          - $ref: '#/components/schemas/CustomEntitySummary'
        fields:
          $ref: '#/components/schemas/Fields'
        id:
          example: bat_UOIr8IjL
          readOnly: true
          type: string
        modifiedAt:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
          readOnly: true
          title: SchemaProperty
        webURL:
          readOnly: true
          type: string
      type: object
    BatchOrInaccessibleResource:
      oneOf:
      - $ref: '#/components/schemas/Batch'
      - $ref: '#/components/schemas/InaccessibleResource'
    BatchWorklistItemsList:
      additionalProperties: false
      properties:
        nextToken:
          type: string
        type:
          enum:
          - batch
          type: string
        worklistItems:
          items:
            $ref: '#/components/schemas/Batch'
          type: array
      type: object
    BenchlingAppConfigList:
      properties:
        configuration:
          items:
            discriminator:
              mapping:
                aa_sequence: '#/components/schemas/ResourceDependencyLink'
                boolean: '#/components/schemas/ScalarConfig'
                box: '#/components/schemas/ResourceDependencyLink'
                box_schema: '#/components/schemas/SchemaDependencyLink'
                container: '#/components/schemas/ResourceDependencyLink'
                container_schema: '#/components/schemas/SchemaDependencyLink'
                custom_entity: '#/components/schemas/ResourceDependencyLink'
                date: '#/components/schemas/ScalarConfig'
                datetime: '#/components/schemas/ScalarConfig'
                dna_oligo: '#/components/schemas/ResourceDependencyLink'
                dna_sequence: '#/components/schemas/ResourceDependencyLink'
                dropdown: '#/components/schemas/DropdownDependencyLink'
                entity_schema: '#/components/schemas/EntitySchemaDependencyLink'
                entry: '#/components/schemas/ResourceDependencyLink'
                entry_schema: '#/components/schemas/SchemaDependencyLink'
                float: '#/components/schemas/ScalarConfig'
                folder: '#/components/schemas/ResourceDependencyLink'
                integer: '#/components/schemas/ScalarConfig'
                json: '#/components/schemas/ScalarConfig'
                location: '#/components/schemas/ResourceDependencyLink'
                location_schema: '#/components/schemas/SchemaDependencyLink'
                mixture: '#/components/schemas/ResourceDependencyLink'
                molecule: '#/components/schemas/ResourceDependencyLink'
                plate: '#/components/schemas/ResourceDependencyLink'
                plate_schema: '#/components/schemas/SchemaDependencyLink'
                project: '#/components/schemas/ResourceDependencyLink'
                registry: '#/components/schemas/ResourceDependencyLink'
                request_schema: '#/components/schemas/SchemaDependencyLink'
                result_schema: '#/components/schemas/SchemaDependencyLink'
                rna_oligo: '#/components/schemas/ResourceDependencyLink'
                rna_sequence: '#/components/schemas/ResourceDependencyLink'
                run_schema: '#/components/schemas/SchemaDependencyLink'
                secure_text: '#/components/schemas/SecureTextConfig'
                text: '#/components/schemas/ScalarConfig'
                workflow_task_schema: '#/components/schemas/WorkflowTaskSchemaDependencyLink'
                workflow_task_status: '#/components/schemas/ResourceDependencyLink'
                worklist: '#/components/schemas/ResourceDependencyLink'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/SchemaDependencyLink'
            - $ref: '#/components/schemas/EntitySchemaDependencyLink'
            - $ref: '#/components/schemas/WorkflowTaskSchemaDependencyLink'
            - $ref: '#/components/schemas/DropdownDependencyLink'
            - $ref: '#/components/schemas/ResourceDependencyLink'
            - $ref: '#/components/schemas/ScalarConfig'
            - $ref: '#/components/schemas/SecureTextConfig'
          maxItems: 100
          type: array
      type: object
    BenchlingAppConfiguration:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BenchlingAppConfigList'
      - properties:
          apiUrl:
            format: uri
            readOnly: true
            type: string
          appId:
            description: The app to which this configuration belongs.
            type: string
          id:
            type: string
          modifiedAt:
            description: DateTime the template was last modified
            type: string
      example:
        apiUrl: https://benchling.com/api/v2-beta/app-configurations/appcfg_e59sjL23Pqn30xHg
        appId: app_e59sjL23Pqn30xHg
        configuration:
        - apiURL: https://benchling.com/api/v2/entity-schemas/ts_dxaorf5c
          description: The antibody used in the integration
          fields:
          - description: A schema field used in the integration
            name: IntegrationField
            resourceId: tsf_6mzt7g34
            resourceName: My Field
          name: IntegrationAntibody
          resourceId: ts_dxaorf5c
          resourceName: My Antibody
          resourceType: entity-schema
        - apiURL: https://benchling.com/api/v2/dropdowns/sfs_j8de0n4b
          description: The dropdown used in the integration
          name: IntegrationDropdown
          options:
          - description: A dropdown option used in the integration
            name: IntegrationDropdownOption
            resourceId: sfso_2an4xe5i
            resourceName: My Dropdown
          resourceId: sfs_j8de0n4b
          resourceName: My dropdown
          resourceType: dropdown
        - apiURL: https://benchling.com/api/v2/plates/plt_xd4hj4eB
          description: The plate used in the integration
          name: IntegrationPlate
          resourceId: plt_xd4hj4eB
          resourceName: My Plate
          resourceType: plate
        id: appcfg_e59sjL23Pqn30xHg
        modifiedAt: '2021-07-13T21:00:49.245Z'
    BenchlingAppManifest:
      properties:
        configuration:
          items:
            anyOf:
            - $ref: '#/components/schemas/SchemaDependency'
            - $ref: '#/components/schemas/EntitySchemaDependency'
            - $ref: '#/components/schemas/WorkflowTaskSchemaDependency'
            - $ref: '#/components/schemas/DropdownDependency'
            - $ref: '#/components/schemas/ResourceDependency'
            - $ref: '#/components/schemas/ManifestScalarConfig'
            - $ref: '#/components/schemas/ManifestArrayConfig'
            discriminator:
              mapping:
                aa_sequence: '#/components/schemas/ResourceDependency'
                array: '#/components/schemas/ManifestArrayConfig'
                boolean: '#/components/schemas/ManifestScalarConfig'
                box: '#/components/schemas/ResourceDependency'
                box_schema: '#/components/schemas/SchemaDependency'
                container: '#/components/schemas/ResourceDependency'
                container_schema: '#/components/schemas/SchemaDependency'
                custom_entity: '#/components/schemas/ResourceDependency'
                date: '#/components/schemas/ManifestScalarConfig'
                datetime: '#/components/schemas/ManifestScalarConfig'
                dna_oligo: '#/components/schemas/ResourceDependency'
                dna_sequence: '#/components/schemas/ResourceDependency'
                dropdown: '#/components/schemas/DropdownDependency'
                entity_schema: '#/components/schemas/EntitySchemaDependency'
                entry: '#/components/schemas/ResourceDependency'
                entry_schema: '#/components/schemas/SchemaDependency'
                float: '#/components/schemas/ManifestScalarConfig'
                folder: '#/components/schemas/ResourceDependency'
                integer: '#/components/schemas/ManifestScalarConfig'
                json: '#/components/schemas/ManifestScalarConfig'
                location: '#/components/schemas/ResourceDependency'
                location_schema: '#/components/schemas/SchemaDependency'
                mixture: '#/components/schemas/ResourceDependency'
                molecule: '#/components/schemas/ResourceDependency'
                plate: '#/components/schemas/ResourceDependency'
                plate_schema: '#/components/schemas/SchemaDependency'
                project: '#/components/schemas/ResourceDependency'
                registry: '#/components/schemas/ResourceDependency'
                request_schema: '#/components/schemas/SchemaDependency'
                result_schema: '#/components/schemas/SchemaDependency'
                rna_oligo: '#/components/schemas/ResourceDependency'
                rna_sequence: '#/components/schemas/ResourceDependency'
                run_schema: '#/components/schemas/SchemaDependency'
                secure_text: '#/components/schemas/ManifestScalarConfig'
                text: '#/components/schemas/ManifestScalarConfig'
                workflow_task_schema: '#/components/schemas/WorkflowTaskSchemaDependency'
                workflow_task_status: '#/components/schemas/ResourceDependency'
                worklist: '#/components/schemas/ResourceDependency'
              propertyName: type
          maxItems: 100
          type: array
        info:
          properties:
            description:
              example: This is my first App!
              type: string
            name:
              example: My First App
              type: string
          type: object
        manifestVersion:
          enum:
          - 1
          type: integer
        security:
          additionalProperties: false
          properties:
            publicKey:
              description: "Public key used to encrypt secure_text values. The value\
                \ is constrained:\n  * value must be a public key PEM certificate\n\
                \  * key type (kty) must be RSA\n  * algorithm must be RSAES_OAEP_SHA_256\n\
                \  * key size must be 2048 bits, with exponent=65537\n  * key usage\
                \ (use) must not be \"signing\". It can be either unspecified, or\
                \ \"encrypt/decrypt\""
              example: '----BEGIN PUBLIC KEY----

                MIGbMBAGByqGSM49AgE...

                ----END PUBLIC KEY----'
              pattern: ^\s*-*BEGIN PUBLIC KEY-*[\s\S]*-*END PUBLIC KEY-*\s*$
              type: string
          type: object
      type: object
    BoxCreationTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          boxSchemaId:
            example: boxsch_MAbGlEtf
            type: string
          type:
            enum:
            - box_creation_table
            type: string
        type: object
    ButtonUiBlock:
      allOf:
      - $ref: '#/components/schemas/InteractiveUiBlock'
      - properties:
          text:
            example: Click me to submit
            type: string
          type:
            enum:
            - BUTTON
            type: string
        required:
        - type
        - text
      type: object
    Canvas:
      allOf:
      - $ref: '#/components/schemas/CanvasBase'
      - properties:
          id:
            example: cnvs_Q4mPJ34a
            type: string
      type: object
    CanvasBase:
      allOf:
      - $ref: '#/components/schemas/CanvasUiBlockList'
      - properties:
          enabled:
            description: 'Overall control for whether the canvas is interactable or
              not. If `false`, every block is disabled and will override the individual
              block''s `enabled` property. If `true` or absent, the interactivity
              status will defer to the block''s `enabled` property.

              '
            type: boolean
          featureId:
            description: Identifier of the feature defined in Benchling App Manifest
              this canvas corresponds to.
            type: string
          resourceId:
            description: Identifier of the resource object to attach canvas to.
            nullable: false
            type: string
          sessionId:
            description: 'Identifier of a session. If specified, app status messages
              from the session will be reported in the canvas.

              '
            example: sesn_SwKtkgB5
            nullable: true
            type: string
        required:
        - featureId
      type: object
    CanvasCreate:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/CanvasBase'
      - required:
        - blocks
        - featureId
      type: object
    CanvasLeafNodeUiBlockList:
      properties:
        children:
          items:
            discriminator:
              mapping:
                BUTTON: '#/components/schemas/ButtonUiBlock'
                CHIP: '#/components/schemas/ChipUiBlock'
                DROPDOWN: '#/components/schemas/DropdownUiBlock'
                LABEL: '#/components/schemas/TextLabelUiBlock'
                MARKDOWN: '#/components/schemas/MarkdownUiBlock'
                SEARCH_INPUT: '#/components/schemas/SearchInputUiBlock'
                SELECTOR_INPUT: '#/components/schemas/SelectorInputUiBlock'
                TEXT_INPUT: '#/components/schemas/TextInputUiBlock'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/ButtonUiBlock'
            - $ref: '#/components/schemas/ChipUiBlock'
            - $ref: '#/components/schemas/DropdownUiBlock'
            - $ref: '#/components/schemas/MarkdownUiBlock'
            - $ref: '#/components/schemas/SearchInputUiBlock'
            - $ref: '#/components/schemas/SelectorInputUiBlock'
            - $ref: '#/components/schemas/TextInputUiBlock'
            - $ref: '#/components/schemas/TextLabelUiBlock'
          type: array
      required:
      - children
      type: object
    CanvasUiBlockList:
      properties:
        blocks:
          items:
            discriminator:
              mapping:
                BUTTON: '#/components/schemas/ButtonUiBlock'
                CHIP: '#/components/schemas/ChipUiBlock'
                DROPDOWN: '#/components/schemas/DropdownUiBlock'
                LABEL: '#/components/schemas/TextLabelUiBlock'
                MARKDOWN: '#/components/schemas/MarkdownUiBlock'
                SEARCH_INPUT: '#/components/schemas/SearchInputUiBlock'
                SECTION: '#/components/schemas/SectionUiBlock'
                SELECTOR_INPUT: '#/components/schemas/SelectorInputUiBlock'
                TEXT_INPUT: '#/components/schemas/TextInputUiBlock'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/ButtonUiBlock'
            - $ref: '#/components/schemas/ChipUiBlock'
            - $ref: '#/components/schemas/DropdownUiBlock'
            - $ref: '#/components/schemas/MarkdownUiBlock'
            - $ref: '#/components/schemas/SearchInputUiBlock'
            - $ref: '#/components/schemas/SectionUiBlock'
            - $ref: '#/components/schemas/SelectorInputUiBlock'
            - $ref: '#/components/schemas/TextInputUiBlock'
            - $ref: '#/components/schemas/TextLabelUiBlock'
          type: array
      required:
      - blocks
      type: object
    CanvasUpdate:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/CanvasBase'
      type: object
    CanvasesArchivalChange:
      additionalProperties: false
      description: 'IDs of all items that were archived or unarchived. This includes
        the IDs of canvases that were archived / unarchived.

        '
      properties:
        canvasIds:
          example:
          - cnvs_Q4mPJ34a
          - cnvs_aNz2kJNv
          items:
            type: string
          type: array
      type: object
    CanvasesArchive:
      additionalProperties: false
      properties:
        canvasIds:
          description: Array of canvas IDs
          example:
          - cnvs_Q4mPJ34a
          - cnvs_aNz2kJNv
          items:
            type: string
          type: array
        reason:
          description: Reason that apps are being archived. Actual reason enum varies
            by tenant.
          enum:
          - Other
          type: string
      required:
      - reason
      - canvasIds
      type: object
    CanvasesUnarchive:
      additionalProperties: false
      properties:
        canvasIds:
          description: Array of app IDs
          example:
          - cnvs_Q4mPJ34a
          - cnvs_aNz2kJNv
          items:
            type: string
          type: array
      required:
      - canvasIds
      type: object
    CheckboxNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          checked:
            description: 'Indicates whether the checkbox is checked or not.

              '
            type: boolean
          links:
            description: 'Array of links referenced in text via an @-mention, hyperlink,
              or the drag-n-dropped preview attached to the note.

              '
            items:
              $ref: '#/components/schemas/EntryLink'
            type: array
          text:
            description: The textual contents of the note.
            type: string
          type:
            enum:
            - list_checkbox
            type: string
        type: object
      description: One "line" of a checklist
    CheckoutRecord:
      description: '

        *assignee field* is set if status is "RESERVED" or "CHECKED_OUT", or null
        if status is "AVAILABLE".


        *comment field* is set when container was last reserved, checked out, or checked
        into.


        *modifiedAt field* is the date and time when container was last checked out,
        checked in, or reserved

        '
      properties:
        assignee:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/UserSummary'
          - $ref: '#/components/schemas/TeamSummary'
        comment:
          type: string
        modifiedAt:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/CheckoutStatus'
      type: object
    CheckoutStatus:
      enum:
      - AVAILABLE
      - RESERVED
      - CHECKED_OUT
      type: string
    ChipUiBlock:
      allOf:
      - properties:
          type:
            enum:
            - CHIP
            type: string
          value:
            type: string
        required:
        - type
        - value
      type: object
    Collaboration:
      allOf:
      - properties:
          accessPolicy:
            $ref: '#/components/schemas/AccessPolicy'
          collaborator:
            discriminator:
              mapping:
                APP: '#/components/schemas/AppCollaborator'
                ORGANIZATION_MEMBER: '#/components/schemas/OrgMembershipCollaborator'
                TEAM_MEMBER: '#/components/schemas/TeamMembershipCollaborator'
                USER: '#/components/schemas/UserCollaborator'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/OrgMembershipCollaborator'
            - $ref: '#/components/schemas/TeamMembershipCollaborator'
            - $ref: '#/components/schemas/UserCollaborator'
            - $ref: '#/components/schemas/AppCollaborator'
      type: object
    CollaborationCreate:
      oneOf:
      - $ref: '#/components/schemas/PrincipalCollaborator'
      - $ref: '#/components/schemas/MemberCollaborator'
      type: object
    CollaborationsPaginatedList:
      additionalProperties: false
      properties:
        collaborations:
          items:
            $ref: '#/components/schemas/Collaboration'
          type: array
        nextToken:
          type: string
      type: object
    ConflictError:
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/BaseError'
          - properties:
              conflicts:
                items:
                  type: object
                type: array
      type: object
    Container:
      properties:
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
          readOnly: true
        barcode:
          nullable: true
          type: string
        checkoutRecord:
          allOf:
          - $ref: '#/components/schemas/CheckoutRecord'
          readOnly: true
        contents:
          items:
            $ref: '#/components/schemas/ContainerContent'
          readOnly: true
          type: array
        createdAt:
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          readOnly: true
        fields:
          $ref: '#/components/schemas/Fields'
        id:
          example: con_ZBL9QQWD
          readOnly: true
          type: string
        modifiedAt:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        parentStorageId:
          nullable: true
          type: string
        parentStorageSchema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
          readOnly: true
        projectId:
          nullable: true
          type: string
        quantity:
          $ref: '#/components/schemas/ContainerQuantity'
        restrictedSampleParties:
          items:
            oneOf:
            - $ref: '#/components/schemas/UserSummaryWithType'
            - $ref: '#/components/schemas/TeamSummaryWithType'
          type: array
        restrictionStatus:
          allOf:
          - $ref: '#/components/schemas/SampleRestrictionStatus'
        sampleOwners:
          items:
            oneOf:
            - $ref: '#/components/schemas/UserSummaryWithType'
            - $ref: '#/components/schemas/TeamSummaryWithType'
          type: array
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
          readOnly: true
        volume:
          $ref: '#/components/schemas/DeprecatedContainerVolumeForResponse'
        webURL:
          readOnly: true
          type: string
      type: object
    ContainerContent:
      properties:
        batch:
          allOf:
          - $ref: '#/components/schemas/BatchOrInaccessibleResource'
          nullable: true
        concentration:
          $ref: '#/components/schemas/Measurement'
        entity:
          allOf:
          - $ref: '#/components/schemas/EntityOrInaccessibleResource'
          nullable: true
      type: object
    ContainerLabels:
      properties:
        barcode:
          example: VIAL001
          type: string
        id:
          example: cnt_12345
          type: string
        name:
          example: My Container
          type: string
      type: object
    ContainerQuantity:
      description: Quantity of a container, well, or transfer. Supports mass, volume,
        and other quantities.
      properties:
        units:
          enum:
          - L
          - mL
          - uL
          - nL
          - pL
          - gal (US)
          - qt (US)
          - pt (US)
          - kg
          - g
          - mg
          - ug
          - ng
          - pg
          - lb
          - oz
          - mol
          - mmol
          - umol
          - nmol
          - pmol
          - cells
          - (x10^3) cells
          - (x10^4) cells
          - (x10^5) cells
          - (x10^6) cells
          - (x10^7) cells
          - (x10^8) cells
          - (x10^9) cells
          - items
          - units
          - null
          example: mL
          nullable: true
          type: string
        value:
          example: 10
          nullable: true
          type: number
      type: object
    ContainerWorklistItemsList:
      additionalProperties: false
      properties:
        nextToken:
          type: string
        type:
          enum:
          - container
          type: string
        worklistItems:
          items:
            $ref: '#/components/schemas/Container'
          type: array
      type: object
    CustomEntitiesBulkUpsertRequest:
      additionalProperties: false
      maxItems: 2500
      properties:
        customEntities:
          items:
            $ref: '#/components/schemas/CustomEntityBulkUpsertRequest'
          type: array
      required:
      - customEntities
      type: object
    CustomEntity:
      properties:
        aliases:
          items:
            example: sBN000
            type: string
          type: array
        apiURL:
          description: The canonical url of the Custom Entity in the API.
          example: https://benchling.com/api/v2/custom-entities/bfi_xCUXNVyG
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        authors:
          items:
            $ref: '#/components/schemas/UserSummary'
          type: array
        createdAt:
          example: '2017-04-18T05:54:56.247545+00:00'
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          - readOnly: true
        customFields:
          $ref: '#/components/schemas/CustomFields'
        entityRegistryId:
          example: sBN000
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          example: lib_R8KcsjhW
          nullable: true
          type: string
        id:
          example: bfi_xCUXNVyG
          type: string
        modifiedAt:
          example: '2017-04-18T05:55:48.685345+00:00'
          format: date-time
          readOnly: true
          type: string
        name:
          example: sBN000
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          example: src_NetYd96a
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          example:
            id: ts_EM122lfJ
            name: Strain
          nullable: true
        webURL:
          example: https://benchling.com/benchling/f/R8KcsjhW-academic-registry/bfi-xCUXNVyG-sbn000/edit
          readOnly: true
          type: string
      type: object
    CustomEntityBaseRequest:
      properties:
        aliases:
          description: Aliases to add to the custom entity
          items:
            type: string
          type: array
        authorIds:
          description: IDs of users to set as the custom entity's authors.
          items:
            type: string
          type: array
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: 'Custom fields to add to the custom entity. Every field should
            have its name as a key, mapping to an object with information about the
            value of the field.

            '
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Schema fields to set on the custom entity. Must correspond
            with the schema''s field definitions. Every field should have its name
            as a key, mapping to an object with information about the value of the
            field.

            '
        folderId:
          description: ID of the folder that the entity is moved into
          type: string
        name:
          type: string
        schemaId:
          type: string
      type: object
    CustomEntityBaseRequestForCreate:
      allOf:
      - $ref: '#/components/schemas/CustomEntityBaseRequest'
      - required:
        - name
        - schemaId
    CustomEntityBulkUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/CustomEntityBaseRequestForCreate'
    CustomEntitySummary:
      properties:
        entityType:
          enum:
          - custom_entity
          type: string
        id:
          example: bfi_xCUXNVyG
          type: string
        type:
          deprecated: true
          type: string
      type: object
    CustomEntityUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityUpsertBaseRequest'
      - $ref: '#/components/schemas/CustomEntityBaseRequestForCreate'
    CustomField:
      properties:
        value:
          type: string
      type: object
    CustomFields:
      additionalProperties:
        $ref: '#/components/schemas/CustomField'
      example:
        Legacy ID:
          value: STR100
      type: object
    DeprecatedContainerVolumeForResponse:
      allOf:
      - $ref: '#/components/schemas/ContainerQuantity'
      - description: 'The deprecated "volume" type key in API responses can also contain
          non-volume quantities for back-compatibility purposes. Use the "quantity"
          type key instead.

          '
    DnaAnnotation:
      allOf:
      - $ref: '#/components/schemas/SequenceFeatureBase'
      - properties:
          end:
            type: integer
          start:
            type: integer
          strand:
            maximum: 1
            minimum: -1
            type: integer
          type:
            type: string
        type: object
    DnaOligo:
      allOf:
      - $ref: '#/components/schemas/Oligo'
      - properties:
          apiURL:
            example: https://benchling.com/api/v2/dna-oligos/seq_bhuDUw9D
            type: string
          bases:
            example: ACTTTTT
            type: string
    DnaOligosBulkUpsertRequest:
      additionalProperties: false
      maxItems: 1000
      properties:
        dnaOligos:
          items:
            $ref: '#/components/schemas/OligoBulkUpsertRequest'
          type: array
      required:
      - dnaOligos
      type: object
    DnaSequence:
      properties:
        aliases:
          items:
            type: string
          type: array
        annotations:
          items:
            $ref: '#/components/schemas/DnaAnnotation'
          type: array
        apiURL:
          description: The canonical url of the DNA Sequence in the API.
          example: https://benchling.com/api/v2/dna-sequences/seq_asQya4lk
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        bases:
          type: string
        createdAt:
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        customFields:
          $ref: '#/components/schemas/CustomFields'
        entityRegistryId:
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          nullable: true
          type: string
        id:
          type: string
        isCircular:
          type: boolean
        length:
          type: integer
        modifiedAt:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        primers:
          items:
            $ref: '#/components/schemas/Primer'
          type: array
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
        translations:
          items:
            $ref: '#/components/schemas/Translation'
          type: array
        webURL:
          readOnly: true
          type: string
      type: object
    DnaSequenceBaseRequest:
      properties:
        aliases:
          description: Aliases to add to the DNA sequence
          items:
            type: string
          type: array
        annotations:
          description: 'Annotations to create on the DNA sequence.

            '
          items:
            $ref: '#/components/schemas/DnaAnnotation'
          type: array
        authorIds:
          description: IDs of users to set as the DNA sequence's authors.
          items:
            type: string
          type: array
        bases:
          description: 'Base pairs for the DNA sequence.

            '
          type: string
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: 'Custom fields to add to the DNA sequence. Every field should
            have its name as a key, mapping to an object with information about the
            value of the field.

            '
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Fields to set on the DNA sequence. Must correspond with the
            schema''s field definitions. Every field should have its name as a key,
            mapping to an object with information about the value of the field.

            '
        folderId:
          description: 'ID of the folder containing the DNA sequence.

            '
          type: string
        isCircular:
          description: 'Whether the DNA sequence is circular or linear.

            '
          type: boolean
        name:
          description: 'Name of the DNA sequence.

            '
          type: string
        primers:
          items:
            $ref: '#/components/schemas/Primer'
          type: array
        schemaId:
          description: 'ID of the DNA sequence''s schema.

            '
          type: string
        translations:
          description: 'Translations to create on the DNA sequence. Translations are
            specified by either a combination of ''start'' and ''end'' fields, or
            a list of regions. Both cannot be provided.

            '
          items:
            $ref: '#/components/schemas/Translation'
          type: array
      type: object
    DnaSequenceBaseRequestForCreate:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/DnaSequenceBaseRequest'
      - required:
        - bases
        - isCircular
        - name
    DnaSequenceBulkUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/DnaSequenceBaseRequestForCreate'
      - required:
        - annotations
        - primers
    DnaSequenceSummary:
      properties:
        entityType:
          enum:
          - dna_sequence
          type: string
        id:
          example: seq_ObbdtGhC
          type: string
        type:
          deprecated: true
          type: string
      type: object
    DnaSequenceUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityUpsertBaseRequest'
      - $ref: '#/components/schemas/DnaSequenceBaseRequestForCreate'
      - required:
        - annotations
        - primers
    DnaSequencesBulkUpsertRequest:
      additionalProperties: false
      maxItems: 1000
      properties:
        dnaSequences:
          items:
            $ref: '#/components/schemas/DnaSequenceBulkUpsertRequest'
          type: array
      required:
      - dnaSequences
      type: object
    DnaSequencesMatchBases:
      additionalProperties: false
      properties:
        archiveReason:
          default: NOT_ARCHIVED
          enum:
          - NOT_ARCHIVED
          - Other
          - Archived
          type: string
        bases:
          type: string
        nextToken:
          type: string
        pageSize:
          default: 50
          maximum: 100
          minimum: 0
          type: integer
        registryId:
          description: 'ID of a registry. Restricts results to those registered in
            this registry. Specifying `null` returns unregistered items.

            '
          nullable: true
          type: string
        sort:
          default: modifiedAt:desc
          enum:
          - modifiedAt:asc
          - modifiedAt:desc
          - name:asc
          - name:desc
          type: string
      required:
      - bases
      type: object
    DnaSequencesPaginatedList:
      properties:
        dnaSequences:
          items:
            $ref: '#/components/schemas/DnaSequence'
          type: array
        nextToken:
          type: string
      type: object
    DnaSequencesSearchBases:
      additionalProperties: false
      properties:
        archiveReason:
          default: NOT_ARCHIVED
          enum:
          - NOT_ARCHIVED
          - Other
          - Archived
          type: string
        bases:
          example: GATTACAA
          minLength: 8
          type: string
        nextToken:
          type: string
        pageSize:
          default: 50
          maximum: 100
          minimum: 0
          type: integer
        registryId:
          description: 'ID of a registry. Restricts results to those registered in
            this registry. Specifying `null` returns unregistered items.

            '
          example: src_pwKo8pHh
          nullable: true
          type: string
        schemaId:
          description: 'ID of the DNA sequence''s schema.

            '
          example: ts_Y6t0Zbhg
          type: string
        sort:
          default: modifiedAt:desc
          enum:
          - modifiedAt:asc
          - modifiedAt:desc
          - name:asc
          - name:desc
          type: string
      required:
      - bases
      type: object
    DropdownDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - properties:
          options:
            items:
              $ref: '#/components/schemas/BaseManifestConfig'
            type: array
          requiredConfig:
            default: false
            nullable: false
            type: boolean
          type:
            $ref: '#/components/schemas/DropdownDependencyTypes'
        type: object
      - required:
        - type
      type: object
    DropdownDependencyLink:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseDependencyLink'
      - properties:
          options:
            items:
              $ref: '#/components/schemas/SubdependencyLink'
            type: array
          type:
            $ref: '#/components/schemas/DropdownDependencyTypes'
      - required:
        - type
    DropdownDependencyTypes:
      enum:
      - dropdown
      type: string
    DropdownUiBlock:
      allOf:
      - $ref: '#/components/schemas/UserInputUiBlock'
      - properties:
          dropdownId:
            type: string
          type:
            enum:
            - DROPDOWN
            type: string
        required:
        - type
        - dropdownId
      type: object
    EntitiesBulkUpsertRequest:
      additionalProperties: false
      properties:
        aaSequences:
          items:
            $ref: '#/components/schemas/AaSequenceBulkUpsertRequest'
          type: array
        customEntities:
          items:
            $ref: '#/components/schemas/CustomEntityBulkUpsertRequest'
          type: array
        dnaOligos:
          items:
            $ref: '#/components/schemas/OligoBulkUpsertRequest'
          type: array
        dnaSequences:
          items:
            $ref: '#/components/schemas/DnaSequenceBulkUpsertRequest'
          type: array
        molecules:
          items:
            $ref: '#/components/schemas/MoleculeBulkUpsertRequest'
          type: array
        rnaOligos:
          items:
            $ref: '#/components/schemas/OligoBulkUpsertRequest'
          type: array
      type: object
    Entity:
      oneOf:
      - $ref: '#/components/schemas/DnaSequence'
      - $ref: '#/components/schemas/AaSequence'
      - $ref: '#/components/schemas/Mixture'
      - $ref: '#/components/schemas/DnaOligo'
      - $ref: '#/components/schemas/RnaOligo'
      - $ref: '#/components/schemas/CustomEntity'
      type: object
    EntityBulkUpsertBaseRequest:
      allOf:
      - $ref: '#/components/schemas/EntityUpsertBaseRequest'
      - properties:
          entityRegistryId:
            description: Registry ID of the entity in Benchling.
            type: string
      - required:
        - entityRegistryId
    EntityLabels:
      properties:
        entityRegistryId:
          example: REAG000
          nullable: true
          type: string
        id:
          example: bfi_12345
          type: string
        name:
          example: Deionized Water
          type: string
      type: object
    EntityOrInaccessibleResource:
      oneOf:
      - $ref: '#/components/schemas/Entity'
      - $ref: '#/components/schemas/InaccessibleResource'
      type: object
    EntitySchemaDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/SchemaBaseDependency'
      - properties:
          subtype:
            $ref: '#/components/schemas/SchemaDependencySubtypes'
          type:
            enum:
            - entity_schema
            type: string
        type: object
      - required:
        - type
      type: object
    EntitySchemaDependencyLink:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/SchemaBaseDependencyLink'
      - properties:
          subtype:
            $ref: '#/components/schemas/SchemaDependencySubtypes'
          type:
            enum:
            - entity_schema
            type: string
      - required:
        - type
    EntityUpsertBaseRequest:
      properties:
        archiveRecord:
          $ref: '#/components/schemas/ArchiveRecordSet'
        fields:
          $ref: '#/components/schemas/FieldsWithResolution'
        name:
          type: string
        registryId:
          type: string
        schemaId:
          type: string
      required:
      - registryId
      - name
      - schemaId
      type: object
    EntityWorklistItemsList:
      additionalProperties: false
      properties:
        nextToken:
          type: string
        type:
          enum:
          - bioentity
          type: string
        worklistItems:
          items:
            $ref: '#/components/schemas/GenericEntity'
          type: array
      type: object
    Entry:
      description: 'Entries are notes that users can take. They''re organized by "days"
        (which are user-configurable) and modeled within each day as a list of "notes."
        Each note has a type - the simplest is a "text" type, but lists, tables, and
        external files are also supported.


        *Note:* the current Entry resource has a few limitations:

        - Formatting information is not yet supported. Header formatting, bolding,
        and other stylistic information is not presented.

        - Data in tables is presented as text always - numeric values will need to
        be parsed into floats or integers, as appropriate.


        Note: Data in Results tables are not accessible through this API call. Results
        table data can be called through the Results API calls.

        '
      properties:
        apiURL:
          description: The canonical url of the Entry in the API.
          example: https://benchling.com/api/v2/entries/etr_tv7m7B78
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          description: 'ArchiveRecord Resource if the entry is archived. This is null
            if the entry is not archived.

            '
          nullable: true
        assignedReviewers:
          description: 'Array of users assigned to review the entry, if any.

            '
          items:
            $ref: '#/components/schemas/UserSummary'
          type: array
        authors:
          description: 'Array of UserSummary Resources of the authors of the entry.
            This defaults to the creator but can be manually changed.

            '
          items:
            $ref: '#/components/schemas/UserSummary'
          type: array
        createdAt:
          description: DateTime the entry was created at
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          description: UserSummary Resource of the user who created the entry
          readOnly: true
        customFields:
          $ref: '#/components/schemas/CustomFields'
        days:
          description: 'Array of day objects. Each day object has a date field (string)
            and notes field (array of notes, expand further for details on note types).

            '
          items:
            $ref: '#/components/schemas/EntryDay'
          type: array
        displayId:
          description: User-friendly ID of the entry
          type: string
        entryTemplateId:
          description: ID of the Entry Template this Entry was created from
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          description: ID of the folder that contains the entry
          type: string
        id:
          description: ID of the entry
          type: string
        modifiedAt:
          description: DateTime the entry was last modified
          type: string
        name:
          description: Title of the entry
          type: string
        reviewRecord:
          description: Review record if set
          nullable: true
          type: object
        schema:
          allOf:
          - $ref: '#/components/schemas/EntrySchema'
          description: Entry schema if set
          nullable: true
          title: SchemaProperty
          type: object
        webURL:
          description: URL of the entry
          type: string
      type: object
    EntryCreate:
      additionalProperties: false
      properties:
        authorIds:
          oneOf:
          - deprecated: true
            type: string
          - description: 'IDs of users to set as the entry''s authors. Defaults to
              the creator.

              '
            items:
              type: string
            type: array
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom fields to add to the entry
        entryTemplateId:
          description: ID of the template to clone the entry from
          type: string
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Fields to set on the entry. Must correspond with the schema''s
            field definitions.

            '
        folderId:
          description: ID of the folder that will contain the entry
          type: string
        initialTables:
          description: 'An array of table API IDs and blob id pairs to seed tables
            from the template while creating the entry. The entryTemplateId parameter
            must be set to use this parameter. The Table API ID should be the API
            Identifier of the tables in the given template.

            - If a template table has one row the values in that row act as default
            values for cloned entries.

            - If a template table has multiple rows there is no default value and
            those rows are added to the cloned entry along with the provided csv data.

            - If a table has default values they will be populated in any respective
            undefined columns in the csv data.

            - If a table has no default values, undefined columns from csv data will
            be empty.

            - If no csv data is provided for a table, the table in the entry will
            be populated with whatever values are in the respective template table.

            '
          items:
            $ref: '#/components/schemas/InitialTable'
          type: array
        name:
          description: Name of the entry
          type: string
        schemaId:
          description: ID of the entry's schema
          type: string
      required:
      - name
      - folderId
      type: object
    EntryDay:
      properties:
        date:
          description: A Date string
          type: string
        notes:
          items:
            description: 'Notes are the main building blocks of entries. Each note
              corresponds roughly to a paragraph.

              '
            discriminator:
              mapping:
                assay_run: '#/components/schemas/AssayRunNotePart'
                box_creation_table: '#/components/schemas/BoxCreationTableNotePart'
                code: '#/components/schemas/SimpleNotePart'
                external_file: '#/components/schemas/ExternalFileNotePart'
                list_bullet: '#/components/schemas/SimpleNotePart'
                list_checkbox: '#/components/schemas/CheckboxNotePart'
                list_number: '#/components/schemas/SimpleNotePart'
                mixture_prep_table: '#/components/schemas/MixturePrepTableNotePart'
                plate_creation_table: '#/components/schemas/PlateCreationTableNotePart'
                registration_table: '#/components/schemas/RegistrationTableNotePart'
                results_table: '#/components/schemas/ResultsTableNotePart'
                table: '#/components/schemas/TableNotePart'
                text: '#/components/schemas/SimpleNotePart'
              propertyName: type
            oneOf:
            - $ref: '#/components/schemas/SimpleNotePart'
            - $ref: '#/components/schemas/TableNotePart'
            - $ref: '#/components/schemas/CheckboxNotePart'
            - $ref: '#/components/schemas/ExternalFileNotePart'
            - $ref: '#/components/schemas/AssayRunNotePart'
            - $ref: '#/components/schemas/ResultsTableNotePart'
            - $ref: '#/components/schemas/RegistrationTableNotePart'
            - $ref: '#/components/schemas/PlateCreationTableNotePart'
            - $ref: '#/components/schemas/BoxCreationTableNotePart'
            - $ref: '#/components/schemas/MixturePrepTableNotePart'
            type: object
          type: array
      type: object
    EntryLink:
      description: 'Links are contained within notes to reference resources that live
        outside of the entry. A link can target an external resource via an http(s)://
        hyperlink or a Benchling resource via @-mentions and drag-n-drop.

        '
      properties:
        id:
          description: 'For linked Benchling resources, this will be the ID of that
            resource (e.g., ''seq_RhYGVnHF''). Omitted for "link" types.

            '
          type: string
        type:
          description: 'The type of resource being linked. For hyperlinks: ''link''.
            For linked Benchling resources, one of: ''user'', ''request'', ''entry'',
            ''stage_entry'', ''protocol'', ''workflow'', ''custom_entity'', ''aa_sequence'',
            ''dna_sequence'', ''batch'', ''box'', ''container'', ''location'', ''plate''.

            '
          enum:
          - link
          - user
          - request
          - entry
          - stage_entry
          - protocol
          - workflow
          - custom_entity
          - aa_sequence
          - dna_sequence
          - batch
          - box
          - container
          - location
          - plate
          type: string
        webURL:
          description: 'Canonical URL of the linked Benchling resource (if you have
            at least READ authorization for that resource), or the explicit URL provided
            as hyperlink for "link" types. Note: locations do not currently have a
            URL.

            '
          nullable: true
          type: string
      type: object
    EntrySchema:
      description: Entry schema
      properties:
        id:
          description: ID of the entry schema
          type: string
        modifiedAt:
          description: DateTime the Entry Schema was last modified
          example: '2017-04-18T05:55:48.685345+00:00'
          format: date-time
          type: string
        name:
          description: Name of the entry schema
          type: string
      type: object
    EntryTable:
      description: 'Actual tabular data with rows and columns of text on the note.

        '
      properties:
        columnLabels:
          description: 'Array of strings, with one item per column. Defaults to null,
            if the user is using the default, but is set if the user has given a custom
            name to the column.

            '
          items:
            nullable: true
            type: string
          type: array
        name:
          description: 'Name of the table - defaults to e.g. Table1 but can be renamed.

            '
          type: string
        rows:
          description: Array of row objects.
          items:
            $ref: '#/components/schemas/EntryTableRow'
          type: array
      type: object
    EntryTableCell:
      properties:
        link:
          allOf:
          - $ref: '#/components/schemas/EntryLink'
          description: 'A Link Resource if this cell contained a hyperlink. Otherwise,
            link will be omitted from the cell object. (Note: inventory and user types
            are not yet supported.)

            '
        text:
          description: 'The textual content of the cell. If the cell was originally
            a formula, this will be the evaluated version of the formula.

            '
          type: string
      type: object
    EntryTableRow:
      description: Each has property 'cells' that is an array of cell objects
      properties:
        cells:
          items:
            $ref: '#/components/schemas/EntryTableCell'
          type: array
      type: object
    EntryTemplate:
      additionalProperties: false
      description: 'Entry templates are templates that users can base new notebook
        entries off of.

        '
      properties:
        apiURL:
          description: The canonical url of the Entry Template in the API.
          example: https://benchling.com/api/v2/entry-templates/tmpl_tv7m7B78
          format: uri
          readOnly: true
          type: string
        createdAt:
          description: DateTime the template was created at
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          description: UserSummary Resource of the user who created the template
          readOnly: true
        customFields:
          $ref: '#/components/schemas/CustomFields'
        days:
          description: 'Array of day objects. Each day object has a day index (integer)
            and notes field (array of notes, expand further for details on note types).

            '
          items:
            $ref: '#/components/schemas/EntryTemplateDay'
          type: array
        fields:
          $ref: '#/components/schemas/Fields'
        id:
          description: ID of the entry template
          type: string
        modifiedAt:
          description: DateTime the template was last modified
          type: string
        name:
          description: Title of the template
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/EntrySchema'
          description: Entry schema if set
          nullable: true
          title: SchemaProperty
          type: object
        templateCollectionId:
          description: ID of the collection that contains the template
          type: string
        webURL:
          description: URL of the template
          type: string
      type: object
    EntryTemplateDay:
      properties:
        day:
          description: 1 indexed day signifier.
          minimum: 1
          type: integer
        notes:
          items:
            description: 'Notes are the main building blocks of entries. Each note
              corresponds roughly to a paragraph.

              '
            oneOf:
            - $ref: '#/components/schemas/SimpleNotePart'
            - $ref: '#/components/schemas/TableNotePart'
            - $ref: '#/components/schemas/CheckboxNotePart'
            - $ref: '#/components/schemas/ExternalFileNotePart'
            - $ref: '#/components/schemas/AssayRunNotePart'
            - $ref: '#/components/schemas/LookupTableNotePart'
            - $ref: '#/components/schemas/ResultsTableNotePart'
            - $ref: '#/components/schemas/RegistrationTableNotePart'
            - $ref: '#/components/schemas/PlateCreationTableNotePart'
            - $ref: '#/components/schemas/BoxCreationTableNotePart'
            - $ref: '#/components/schemas/MixturePrepTableNotePart'
            type: object
          type: array
      type: object
    ExternalFileNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          externalFileId:
            description: 'The ID of the external file. Use the ''Get an external file''
              endpoint to retrieve metadata about it.

              '
            type: string
          links:
            description: 'Array of links referenced in the caption via an @-mention,
              hyperlink, or the drag-n-dropped preview attached to the note.

              '
            items:
              $ref: '#/components/schemas/EntryLink'
            type: array
          text:
            description: The caption of the file attachment.
            type: string
          type:
            enum:
            - external_file
            type: string
        type: object
      description: An attached user-uploaded file
    Field:
      properties:
        displayValue:
          nullable: true
          readOnly: true
          type: string
        isMulti:
          readOnly: true
          type: boolean
        textValue:
          example: Amp
          nullable: true
          readOnly: true
          type: string
        type:
          allOf:
          - $ref: '#/components/schemas/FieldType'
          readOnly: true
        value:
          description: 'For single link fields, use the id of the item you want to
            link (eg. "seq_jdf8BV24").

            For multi-link fields, use an array of ids of the items you want to link
            (eg. ["seq_jdf8BV24"])

            '
          nullable: true
          oneOf:
          - type: string
          - type: boolean
          - type: number
          - type: object
          - items:
              type: string
            type: array
      required:
      - value
      type: object
    FieldConstraintsMixin:
      properties:
        isMulti:
          default: null
          description: Schema field's isMulti property, or null for either.
          nullable: true
          type: boolean
        isRequired:
          default: null
          description: Schema field's isRequired property, or null for either.
          nullable: true
          type: boolean
        type:
          $ref: '#/components/schemas/AppConfigFieldType'
      type: object
    FieldDefinitionsLink:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/SubdependencyLink'
      - $ref: '#/components/schemas/FieldConstraintsMixin'
      type: object
    FieldDefinitionsManifest:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - $ref: '#/components/schemas/FieldConstraintsMixin'
      - properties:
          requiredConfig:
            default: false
            nullable: false
            type: boolean
        type: object
      type: object
    FieldType:
      enum:
      - dna_sequence_link
      - aa_sequence_link
      - custom_entity_link
      - entity_link
      - mixture_link
      - dropdown
      - part_link
      - translation_link
      - blob_link
      - text
      - long_text
      - batch_link
      - storage_link
      - entry_link
      - assay_request_link
      - assay_result_link
      - assay_run_link
      - boolean
      - float
      - integer
      - datetime
      - date
      - json
      type: string
    FieldValueWithResolution:
      oneOf:
      - type: string
      - type: boolean
      - type: number
      - items:
          type: string
        type: array
      - additionalProperties: false
        description: Look up an entity by its entity registry ID
        properties:
          entityRegistryId:
            type: string
        required:
        - entityRegistryId
        type: object
    FieldWithResolution:
      allOf:
      - $ref: '#/components/schemas/Field'
      - properties:
          value:
            allOf:
            - $ref: '#/components/schemas/FieldValueWithResolution'
            nullable: true
        type: object
    Fields:
      additionalProperties:
        $ref: '#/components/schemas/Field'
      type: object
    FieldsWithResolution:
      additionalProperties:
        $ref: '#/components/schemas/FieldWithResolution'
      example:
        Linked Peptide:
          value: prtn_ObbdtGhC
        Linked Sequence:
          value:
            entityRegistryId: DNA001
        Linked Strains:
          value:
          - entityRegistryId: STRAIN001
          - entityRegistryId: STRAIN002
      type: object
    ForbiddenError:
      properties:
        error:
          properties:
            invalidId:
              type: string
            message:
              type: string
            type:
              type: string
            userMessage:
              type: string
          type: object
      type: object
    GenericEntity:
      additionalProperties: false
      properties:
        aliases:
          items:
            type: string
          type: array
        apiURL:
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        authors:
          description: 'Array of UserSummary Resources of the authors of the entry.
            This defaults to the creator but can be manually changed.

            '
          items:
            $ref: '#/components/schemas/UserSummary'
          type: array
        createdAt:
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          - description: UserSummary of the user who created the request
            readOnly: true
        customFields:
          $ref: '#/components/schemas/CustomFields'
        entityRegistryId:
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          type: string
        id:
          type: string
        modifiedAt:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
          title: SchemaProperty
        webURL:
          readOnly: true
          type: string
      type: object
    InaccessibleResource:
      additionalProperties: false
      properties:
        inaccessibleId:
          type: string
        type:
          description: 'The type of this inaccessible item. Example values: "custom_entity",
            "container", "plate", "dna_sequence"

            '
          example: custom_entity
          type: string
      type: object
    Ingredient:
      properties:
        amount:
          description: 'The amount value of this ingredient in its mixture, in string
            format (to preserve full precision). Pair with `units`. Supports scientific
            notation (1.23e4). One ingredient on this mixture can have an amount value
            of `"QS"`.

            '
          example: '12'
          nullable: true
          type: string
        catalogIdentifier:
          example: DION_004
          nullable: true
          type: string
        componentEntity:
          allOf:
          - $ref: '#/components/schemas/EntityLabels'
          - description: The entity that uniquely identifies this component.
        componentLotContainer:
          allOf:
          - $ref: '#/components/schemas/ContainerLabels'
          description: The container representing the component lot for this ingredient.
            This is only present if the mixture schema supports component lots in
            "inventory" format.
          nullable: true
        componentLotEntity:
          allOf:
          - $ref: '#/components/schemas/EntityLabels'
          description: The entity representing the component lot for this ingredient.
            This is only present if the mixture schema supports component lots in
            "inventory" format.
          nullable: true
        componentLotText:
          description: Text representing the component lot for this ingredient. This
            is only present if the mixture schema supports component lots in "text"
            format.
          example: DION_004-source_001
          nullable: true
          type: string
        hasParent:
          type: boolean
        notes:
          nullable: true
          type: string
        targetAmount:
          description: The target amount for this ingredient such that this ingredient's
            proportion in its mixture would preserve the equivalent ingredient's proportion
            in the parent mixture. Pair with `units`.
          example: '123'
          nullable: true
          readOnly: true
          type: string
        units:
          $ref: '#/components/schemas/IngredientMeasurementUnits'
      type: object
    IngredientMeasurementUnits:
      enum:
      - nL
      - uL
      - mL
      - L
      - mg
      - g
      - Units
      example: mL
      nullable: true
      type: string
    InitialTable:
      additionalProperties: false
      properties:
        csvData:
          description: blobId of an uploaded csv blob. The CSV should be formatted
            with column headers of `columnProvenanceUUID` which can be found in the
            [EntryTemplate](#/components/schemas/EntryTemplate). For more information
            on uploading a blob, [click here](https://docs.benchling.com/docs/uploading-a-blob-to-benchling).
          type: string
        templateTableID:
          description: Template table API ID
          type: string
      type: object
    InteractiveUiBlock:
      properties:
        enabled:
          nullable: true
          type: boolean
        id:
          example: user_defined_id
          type: string
      required:
      - id
      type: object
    LookupTableNotePart:
      allOf:
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          type:
            enum:
            - lookup_table
            type: string
        type: object
    ManifestArrayConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - properties:
          defaultElementName:
            type: string
          elementDefinition:
            items:
              anyOf:
              - $ref: '#/components/schemas/SchemaDependency'
              - $ref: '#/components/schemas/EntitySchemaDependency'
              - $ref: '#/components/schemas/WorkflowTaskSchemaDependency'
              - $ref: '#/components/schemas/DropdownDependency'
              - $ref: '#/components/schemas/ResourceDependency'
              - $ref: '#/components/schemas/ManifestScalarConfig'
            type: array
          type:
            enum:
            - array
            type: string
        type: object
      - required:
        - type
        - elementDefinition
      type: object
    ManifestScalarConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - properties:
          requiredConfig:
            default: false
            nullable: false
            type: boolean
          type:
            $ref: '#/components/schemas/ScalarConfigTypes'
        type: object
      - required:
        - type
      type: object
    MarkdownUiBlock:
      additionalProperties: false
      properties:
        type:
          enum:
          - MARKDOWN
          type: string
        value:
          example: '# This is a markdown block

            1. with **bold text**.'
          type: string
      required:
      - type
      - value
      type: object
    Measurement:
      properties:
        units:
          description: Can only be null if value is also null
          nullable: true
          type: string
        value:
          description: Can only be null if units is also null
          nullable: true
          type: number
      required:
      - value
      - units
      type: object
    MemberCollaborator:
      allOf:
      - $ref: '#/components/schemas/PrincipalCollaborator'
      - properties:
          role:
            enum:
            - ADMIN
            - MEMBER
            type: string
        required:
        - role
      description: 'TEAM and ORGANIZATION collaborator groups must also specify the
        role of the collaborator.

        '
      type: object
    Mixture:
      properties:
        aliases:
          items:
            example: FRM000
            type: string
          type: array
        allowMeasuredIngredients:
          description: Derived from the mixture's schema.
          readOnly: true
          type: boolean
        amount:
          description: The positive numerical amount value of this mixture in string
            format (to preserve full precision). Pair with `units`. Supports scientific
            notation (1.23e4).
          example: '123'
          type: string
        apiURL:
          description: The canonical url of the Mixture in the API.
          example: https://benchling.com/api/v2/mixtures/mxt_xCUXNVyG
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        authors:
          items:
            $ref: '#/components/schemas/UserSummary'
          type: array
        createdAt:
          example: '2017-04-18T05:54:56.247545+00:00'
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          - readOnly: true
        customFields:
          $ref: '#/components/schemas/CustomFields'
        entityRegistryId:
          example: FRM000
          nullable: true
          type: string
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: Mixtures can have up to one parent mixture field.
        folderId:
          example: lib_R8KcsjhW
          nullable: true
          type: string
        id:
          example: mxt_xCUXNVyG
          type: string
        ingredients:
          description: List of ingredients on this mixture.
          items:
            $ref: '#/components/schemas/Ingredient'
          type: array
        modifiedAt:
          example: '2017-04-18T05:55:48.685345+00:00'
          format: date-time
          readOnly: true
          type: string
        name:
          example: FRM000
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          example: src_NetYd96a
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          example:
            id: ts_EM122lfJ
            name: Prep
        units:
          $ref: '#/components/schemas/MixtureMeasurementUnits'
        webURL:
          example: https://benchling.com/benchling/f/R8KcsjhW-academic-registry/mxt-xCUXNVyG-sbn000/edit
          readOnly: true
          type: string
      type: object
    MixtureMeasurementUnits:
      enum:
      - nL
      - uL
      - mL
      - L
      - g
      - kg
      - Units
      example: L
      nullable: true
      type: string
    MixturePrepTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          mixtureSchemaId:
            example: ts_eGNPfqCX
            type: string
          type:
            enum:
            - mixture_prep_table
            type: string
        type: object
    Molecule:
      additionalProperties: false
      properties:
        aliases:
          description: Array of aliases.
          items:
            type: string
          type: array
        apiURL:
          description: The canonical url of the Molecule in the API.
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        canonicalizedSmiles:
          description: The canonicalized chemical structure in SMILES format.
          example: Nc1nc(=O)n([H:1])cc1C1CC1
          type: string
        createdAt:
          description: DateTime the Molecule was created.
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom fields set on the Molecule.
        entityRegistryId:
          description: Registry ID of the Molecule if registered.
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          description: ID of the folder that contains the Molecule.
          type: string
        id:
          description: ID of the Molecule.
          example: mol_bhuDUw9D
          type: string
        modifiedAt:
          description: DateTime the Molecule was last modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the Molecule.
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          description: Registry the Molecule is registered in.
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
        webURL:
          description: URL of the Molecule.
          example: https://benchling.com/benchling/f/lib_R8KcsjhW-molecules/mol_xCUXNVyG-molecule1/edit
          format: uri
          readOnly: true
          type: string
      type: object
    MoleculeBaseRequest:
      additionalProperties: false
      properties:
        aliases:
          description: Aliases to add to the Molecule.
          items:
            type: string
          type: array
        authorIds:
          description: IDs of users to set as the Molecule's authors.
          items:
            type: string
          type: array
        chemicalStructure:
          allOf:
          - $ref: '#/components/schemas/MoleculeStructure'
          description: 'Chemical structure of the Molecule.

            '
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: 'Custom fields to add to the Molecule. Every field should have
            its name as a key, mapping to an object with information about the value
            of the field.

            '
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Fields to set on the Molecule. Must correspond with the schema''s
            field definitions. Every field should have its name as a key, mapping
            to an object with information about the value of the field.

            '
        folderId:
          description: 'ID of the folder containing the Molecule.

            '
          type: string
        name:
          description: 'Name of the Molecule.

            '
          type: string
        schemaId:
          description: 'ID of the Molecule''s schema.

            '
          type: string
      type: object
    MoleculeBaseRequestForCreate:
      allOf:
      - $ref: '#/components/schemas/MoleculeBaseRequest'
      - required:
        - name
        - chemicalStructure
    MoleculeBulkUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/MoleculeBaseRequestForCreate'
    MoleculeStructure:
      additionalProperties: false
      properties:
        structureFormat:
          enum:
          - smiles
          - molfile
        value:
          description: Chemical structure in SMILES or molfile format.
          example: Nc1nc(=O)n([H:1])cc1C1CC1
          type: string
      type: object
    MoleculeUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityUpsertBaseRequest'
      - $ref: '#/components/schemas/MoleculeBaseRequestForCreate'
    NotFoundError:
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/BaseError'
          - properties:
              invalidId:
                type: string
              type:
                enum:
                - invalid_request_error
                type: string
      type: object
    Oligo:
      discriminator:
        mapping:
          DNA: DnaOligo
          RNA: RnaOligo
        propertyName: nucleotideType
      properties:
        aliases:
          description: Array of aliases
          items:
            type: string
          type: array
        apiURL:
          description: The canonical url of the Oligo in the API.
          format: uri
          readOnly: true
          type: string
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        bases:
          description: Base pairs of the Oligo.
          example: ACTTTTT
          type: string
        createdAt:
          description: DateTime the Oligo was created.
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: Custom fields set on the Oligo.
        entityRegistryId:
          description: Registry ID of the Oligo if registered.
          nullable: true
          type: string
        fields:
          $ref: '#/components/schemas/Fields'
        folderId:
          description: ID of the folder that contains the Oligo.
          nullable: true
          type: string
        id:
          description: ID of the Oligo.
          example: seq_bhuDUw9D
          type: string
        length:
          description: Number of bases in the Oligo.
          type: integer
        modifiedAt:
          description: DateTime the Oligo was last modified.
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the Oligo.
          type: string
        nucleotideType:
          description: Nucleotide type of the Oligo.
          enum:
          - DNA
          - RNA
          type: string
        registrationOrigin:
          allOf:
          - $ref: '#/components/schemas/RegistrationOrigin'
          nullable: true
          readOnly: true
        registryId:
          description: Registry the Oligo is registered in.
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
        webURL:
          description: URL of the Oligo.
          example: https://benchling.com/benchling/f/lib_hBHqKbzE-oligos/seq_bhuDUw9D-test-oligo-abc/edit
          format: uri
          readOnly: true
          type: string
      type: object
    OligoBaseRequest:
      properties:
        aliases:
          description: Aliases to add to the Oligo
          items:
            type: string
          type: array
        authorIds:
          description: IDs of users to set as the Oligo's authors.
          items:
            type: string
          type: array
        bases:
          description: 'Base pairs of the oligo.

            '
          type: string
        customFields:
          allOf:
          - $ref: '#/components/schemas/CustomFields'
          description: 'Custom fields to add to the Oligo. Every field should have
            its name as a key, mapping to an object with information about the value
            of the field.

            '
        fields:
          allOf:
          - $ref: '#/components/schemas/Fields'
          description: 'Fields to set on the Oligo. Must correspond with the schema''s
            field definitions. Every field should have its name as a key, mapping
            to an object with information about the value of the field.

            '
        folderId:
          description: 'ID of the folder containing the Oligo.

            '
          type: string
        name:
          description: 'Name of the Oligo.

            '
          type: string
        schemaId:
          description: 'ID of the oligo''s schema.

            '
          type: string
      type: object
    OligoBaseRequestForCreate:
      allOf:
      - $ref: '#/components/schemas/OligoBaseRequest'
      - required:
        - bases
        - name
    OligoBulkUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityBulkUpsertBaseRequest'
      - $ref: '#/components/schemas/OligoBaseRequestForCreate'
    OligoUpsertRequest:
      allOf:
      - $ref: '#/components/schemas/EntityUpsertBaseRequest'
      - $ref: '#/components/schemas/OligoBaseRequestForCreate'
    OrgMembershipCollaborator:
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationSummary'
        role:
          enum:
          - ADMIN
          - MEMBER
          type: string
        type:
          enum:
          - ORGANIZATION_MEMBERSHIP
          type: string
    Organization:
      properties:
        handle:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    OrganizationSummary:
      properties:
        handle:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    OrganizationsPaginatedList:
      allOf:
      - $ref: '#/components/schemas/Pagination'
      - properties:
          organizations:
            items:
              $ref: '#/components/schemas/Organization'
            type: array
      type: object
    Pagination:
      properties:
        nextToken:
          type: string
    PartySummary:
      properties:
        handle:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    Plate:
      additionalProperties: false
      properties:
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
        barcode:
          description: Barcode of the plate
          nullable: true
          type: string
        createdAt:
          description: DateTime the container was created
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        fields:
          $ref: '#/components/schemas/Fields'
        id:
          description: ID of the plate
          type: string
        modifiedAt:
          description: DateTime the plate was last modified
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the plate, defaults to barcode if name is not provided.
          type: string
        parentStorageId:
          description: ID of containing parent inventory (e.g. loc_k2lNspzS).
          nullable: true
          type: string
        projectId:
          description: ID of the project if set
          nullable: true
          type: string
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
          title: SchemaProperty
        type:
          enum:
          - matrix_plate
          - well_plate
          type: string
        webURL:
          readOnly: true
          type: string
        wells:
          additionalProperties:
            oneOf:
            - $ref: '#/components/schemas/Well'
            - $ref: '#/components/schemas/InaccessibleResource'
          description: Well contents of the plate, keyed by position string (eg. "A1").
          type: object
      type: object
    PlateCreationTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          plateSchemaId:
            example: pltsch_LRIuH0yJ
            type: string
          type:
            enum:
            - plate_creation_table
            type: string
        type: object
    PlateWorklistItemsList:
      additionalProperties: false
      properties:
        nextToken:
          type: string
        type:
          enum:
          - plate
          type: string
        worklistItems:
          items:
            $ref: '#/components/schemas/Plate'
          type: array
      type: object
    Primer:
      properties:
        bases:
          readOnly: true
          type: string
        bindPosition:
          readOnly: true
          type: integer
        color:
          readOnly: true
          type: string
        end:
          type: integer
        name:
          readOnly: true
          type: string
        oligoId:
          type: string
        overhangLength:
          readOnly: true
          type: integer
        start:
          type: integer
        strand:
          example: 1
          type: integer
      type: object
    PrincipalCollaborator:
      properties:
        accessPolicyId:
          example: datapol_Z3aTqsBt
          type: string
        collaboratorId:
          example: ent_asdf72354
          type: string
      required:
      - accessPolicyId
      - collaboratorId
      type: object
    RegistrationOrigin:
      properties:
        originEntryId:
          nullable: true
          readOnly: true
          type: string
        registeredAt:
          format: date-time
          readOnly: true
          type: string
      type: object
    RegistrationTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          entitySchemaId:
            example: ts_hMbJPSA8
            type: string
          type:
            enum:
            - registration_table
            type: string
        type: object
    ResourceDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - properties:
          requiredConfig:
            default: false
            nullable: false
            type: boolean
          type:
            $ref: '#/components/schemas/ResourceDependencyTypes'
        type: object
      - required:
        - type
      type: object
    ResourceDependencyLink:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseDependencyLink'
      - properties:
          type:
            $ref: '#/components/schemas/ResourceDependencyTypes'
      - required:
        - type
    ResourceDependencyTypes:
      enum:
      - aa_sequence
      - box
      - container
      - custom_entity
      - dna_oligo
      - dna_sequence
      - entry
      - folder
      - location
      - mixture
      - molecule
      - plate
      - project
      - registry
      - rna_oligo
      - rna_sequence
      - workflow_task_status
      - worklist
      type: string
    ResultsTableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - $ref: '#/components/schemas/StructuredTableApiIdentifiers'
      - properties:
          assayResultSchemaId:
            example: assaysch_msh1Ly6g
            type: string
          type:
            enum:
            - results_table
            type: string
        type: object
    RnaOligo:
      allOf:
      - $ref: '#/components/schemas/Oligo'
      - properties:
          apiURL:
            example: https://benchling.com/api/v2/rna-oligos/seq_bhuDUw9D
            type: string
          bases:
            example: ACUUUUU
            type: string
          nucleotideType:
            example: RNA
            type: string
    RnaOligosBulkUpsertRequest:
      additionalProperties: false
      maxItems: 1000
      properties:
        rnaOligos:
          items:
            $ref: '#/components/schemas/OligoBulkUpsertRequest'
          type: array
      required:
      - rnaOligos
      type: object
    SampleRestrictionStatus:
      enum:
      - RESTRICTED
      - UNRESTRICTED
      - NOT_APPLICABLE
      type: string
    ScalarConfig:
      additionalProperties: false
      properties:
        description:
          nullable: true
          readOnly: true
          type: string
        name:
          type: string
        requiredConfig:
          default: false
          nullable: false
          type: boolean
        type:
          $ref: '#/components/schemas/ScalarConfigTypes'
        value:
          nullable: true
          type: string
      required:
      - name
      - type
      - value
      type: object
    ScalarConfigTypes:
      enum:
      - text
      - float
      - integer
      - boolean
      - date
      - datetime
      - secure_text
      - json
      type: string
    SchemaBaseDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseManifestConfig'
      - properties:
          fieldDefinitions:
            items:
              allOf:
              - $ref: '#/components/schemas/FieldDefinitionsManifest'
            type: array
          requiredConfig:
            default: false
            nullable: false
            type: boolean
        type: object
      type: object
    SchemaBaseDependencyLink:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/BaseDependencyLink'
      - properties:
          fieldDefinitions:
            items:
              allOf:
              - $ref: '#/components/schemas/FieldDefinitionsLink'
            type: array
    SchemaDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/SchemaBaseDependency'
      - properties:
          type:
            $ref: '#/components/schemas/SchemaDependencyTypes'
        type: object
      - required:
        - type
      type: object
    SchemaDependencyLink:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/SchemaBaseDependencyLink'
      - properties:
          type:
            $ref: '#/components/schemas/SchemaDependencyTypes'
      - required:
        - type
    SchemaDependencySubtypes:
      enum:
      - aa_sequence
      - dna_sequence
      - custom_entity
      - mixture
      - molecule
      - dna_oligo
      - rna_oligo
      - rna_sequence
      type: string
    SchemaDependencyTypes:
      enum:
      - container_schema
      - plate_schema
      - location_schema
      - box_schema
      - run_schema
      - result_schema
      - request_schema
      - entry_schema
      - workflow_task_schema
      type: string
    SchemaSummary:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    SearchInputUiBlock:
      allOf:
      - $ref: '#/components/schemas/UserInputUiBlock'
      - properties:
          itemType:
            enum:
            - dna_sequence
            - dna_oligo
            - aa_sequence
            - custom_entity
            - mixture
            - box
            - container
            - location
            - plate
            type: string
          schemaId:
            nullable: true
            type: string
          type:
            enum:
            - SEARCH_INPUT
            type: string
        required:
        - type
        - itemType
        - schemaId
      type: object
    SectionUiBlock:
      allOf:
      - $ref: '#/components/schemas/CanvasLeafNodeUiBlockList'
      - properties:
          type:
            enum:
            - SECTION
            type: string
      type: object
    SecureTextConfig:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/ScalarConfig'
    SelectorInputUiBlock:
      allOf:
      - $ref: '#/components/schemas/UserInputUiBlock'
      - properties:
          options:
            items:
              type: string
            type: array
          type:
            enum:
            - SELECTOR_INPUT
            type: string
        required:
        - type
        - options
      type: object
    SequenceFeatureBase:
      properties:
        color:
          description: Hex color code used when displaying this feature in the UI.
          example: '#F58A5E'
          type: string
        customFields:
          items:
            $ref: '#/components/schemas/SequenceFeatureCustomField'
          maxItems: 100
          type: array
        name:
          maxLength: 2048
          type: string
        notes:
          example: Cong et al Science. 2013 Jan 3.
          maxLength: 10000
          type: string
      type: object
    SequenceFeatureCustomField:
      description: A name and value pair associated with a sequence feature (annotation
        or translation). For genbank imports, these are the qualifiers associated
        with each feature.
      properties:
        name:
          description: Name of the custom field
          type: string
        value:
          description: Value of the custom field
          type: string
      type: object
    SimpleNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          links:
            description: 'Array of links referenced in text via an @-mention, hyperlink,
              or the drag-n-dropped preview attached to the note.

              '
            items:
              $ref: '#/components/schemas/EntryLink'
            type: array
          text:
            description: The textual contents of the note.
            type: string
          type:
            enum:
            - text
            - code
            - list_bullet
            - list_number
            type: string
        type: object
      description: 'Simple note parts include the following types: - ''text'': plain
        text - ''code'': preformatted code block - ''list_bullet'': one "line" of
        a bulleted list - ''list_number'': one "line" of a numbered list

        '
    StructuredTableApiIdentifiers:
      properties:
        apiId:
          type: string
        columns:
          items:
            $ref: '#/components/schemas/StructuredTableColumnInfo'
          type: array
      type: object
    StructuredTableColumnInfo:
      properties:
        columnProvenanceUUID:
          type: string
        isReadOnly:
          type: boolean
        name:
          type: string
      type: object
    SubdependencyLink:
      properties:
        description:
          nullable: true
          readOnly: true
          type: string
        name:
          type: string
        requiredConfig:
          default: false
          nullable: false
          type: boolean
        resourceId:
          nullable: true
          type: string
        resourceName:
          nullable: true
          readOnly: true
          type: string
      required:
      - name
      - resourceId
      type: object
    TableNotePart:
      allOf:
      - $ref: '#/components/schemas/BaseNotePart'
      - properties:
          links:
            description: 'Array of links referenced in the caption via an @-mention,
              hyperlink, or the drag-n-dropped preview attached to the note.

              '
            items:
              $ref: '#/components/schemas/EntryLink'
            type: array
          table:
            allOf:
            - $ref: '#/components/schemas/EntryTable'
            type: object
          text:
            description: The caption of the table.
            type: string
          type:
            enum:
            - table
            type: string
        type: object
      description: A table with rows and columns of text
    Team:
      allOf:
      - $ref: '#/components/schemas/TeamSummary'
      - example:
          handle: elion_team
          id: team_5cjIguqc
          name: Elion's Team
          organization: Elion's Org
      - properties:
          organization:
            $ref: '#/components/schemas/OrganizationSummary'
      type: object
    TeamMembershipCollaborator:
      properties:
        role:
          enum:
          - ADMIN
          - MEMBER
          type: string
        team:
          $ref: '#/components/schemas/TeamSummary'
        type:
          enum:
          - TEAM_MEMBERSHIP
          type: string
    TeamSummary:
      allOf:
      - $ref: '#/components/schemas/PartySummary'
      - example:
          handle: elion_team
          id: team_5cjIguqc
          name: Elion's Team
    TeamSummaryWithType:
      allOf:
      - $ref: '#/components/schemas/TeamSummary'
      - properties:
          type:
            enum:
            - team
            type: string
      - example:
          handle: elion_team
          id: team_5cjIguqc
          name: Elion's Team
          type: team
    TeamsPaginatedList:
      allOf:
      - $ref: '#/components/schemas/Pagination'
      - properties:
          teams:
            items:
              $ref: '#/components/schemas/Team'
            type: array
    TextInputUiBlock:
      allOf:
      - $ref: '#/components/schemas/UserInputUiBlock'
      - properties:
          placeholder:
            nullable: true
            type: string
          type:
            enum:
            - TEXT_INPUT
            type: string
        required:
        - type
      type: object
    TextLabelUiBlock:
      additionalProperties: false
      properties:
        text:
          example: This is a label element.
          type: string
        type:
          enum:
          - LABEL
          type: string
      required:
      - type
      - text
      type: object
    Translation:
      allOf:
      - $ref: '#/components/schemas/SequenceFeatureBase'
      - properties:
          aminoAcids:
            readOnly: true
            type: string
          end:
            type: integer
          geneticCode:
            description: The genetic code to use when translating the nucleotide sequence
              into amino acids.
            enum:
            - STANDARD
            - VERTEBRATE_MITOCHONDRIAL
            - YEAST_MITOCHONDRIAL
            - MOLD_PROTOZOAN_COELENTERATE_MITOCHONDRIAL_MYCOPLASMA_SPIROPLASMA
            - INVERTEBRATE_MITOCHONDRIAL
            - CILIATE_DASYCLADACEAN_HEXAMITA_NUCLEAR
            - ECHINODERM_FLATWORM_MITOCHONDRIAL
            - EUPLOTID_NUCLEAR
            - BACTERIAL_ARCHAEAL_PLANT_PLASTID
            - ALTERNATIVE_YEAST_NUCLEAR
            - ASCIDIAN_MITOCHONDRIAL
            - ALTERNATIVE_FLATWORM_MITOCHONDRIAL
            - CHLOROPHYCEAN_MITOCHONDRIAL
            - TREMATODE_MITOCHONDRIAL
            - SCENEDESMUS_OBLIQUUS_MITOCHONDRIAL
            - THRAUSTOCHYTRIUM_MITOCHONDRIAL
            - RHABDOPLEURIDAE_MITOCHONDRIAL
            - CANDIDATE_DIVISION_SR1_GRACILIBACTERIA
            - PACHYSOLEN_TANNOPHILUS_NUCLEAR
            - MESODINIUM_NUCLEAR
            - PERITRICH_NUCLEAR
            - CEPHALODISCIDAE_MITOCHONDRIAL_UAA_TYR
            type: string
          regions:
            items:
              properties:
                end:
                  type: integer
                start:
                  type: integer
              type: object
            type: array
          start:
            type: integer
          strand:
            example: 1
            type: integer
        type: object
    User:
      allOf:
      - $ref: '#/components/schemas/UserSummary'
      - example:
          email: lpasteur@benchling.com
          handle: lpasteur
          id: ent_a0SApq3z
          isSuspended: false
          name: Louis Pasteur
      - properties:
          email:
            type: string
          isSuspended:
            type: boolean
          passwordLastChangedAt:
            nullable: true
            type: string
      type: object
    UserActivity:
      properties:
        lastSeen:
          format: date-time
          nullable: true
          type: string
        userId:
          type: string
      type: object
    UserBulkCreateRequest:
      additionalProperties: false
      properties:
        users:
          items:
            $ref: '#/components/schemas/UserCreate'
          type: array
      type: object
    UserBulkUpdate:
      additionalProperties: false
      allOf:
      - properties:
          id:
            type: string
        required:
        - id
        type: object
      - $ref: '#/components/schemas/UserUpdate'
    UserBulkUpdateRequest:
      additionalProperties: false
      properties:
        users:
          items:
            $ref: '#/components/schemas/UserBulkUpdate'
          type: array
      type: object
    UserCollaborator:
      allOf:
      - properties:
          type:
            enum:
            - USER
            type: string
      - $ref: '#/components/schemas/UserSummary'
      type: object
    UserCreate:
      additionalProperties: false
      properties:
        email:
          description: Email of the User
          type: string
        handle:
          description: Handle of the User
          type: string
        name:
          description: Name of the User
          type: string
      required:
      - name
      - email
      - handle
      type: object
    UserInputUiBlock:
      allOf:
      - $ref: '#/components/schemas/InteractiveUiBlock'
      - properties:
          value:
            nullable: true
            type: string
        required:
        - value
      type: object
    UserSummary:
      allOf:
      - $ref: '#/components/schemas/PartySummary'
      - example:
          handle: lpasteur
          id: ent_a0SApq3z
          name: Louis Pasteur
    UserSummaryWithType:
      allOf:
      - $ref: '#/components/schemas/UserSummary'
      - properties:
          type:
            enum:
            - user
            type: string
      - example:
          handle: lpasteur
          id: ent_a0SApq3z
          name: Louis Pasteur
          type: user
    UserUpdate:
      additionalProperties: false
      properties:
        email:
          description: Email of the User
          type: string
        handle:
          description: Handle of the User
          type: string
        isSuspended:
          description: Suspended status of the User
          type: boolean
        name:
          description: Name of the User
          type: string
      type: object
    UsersPaginatedList:
      allOf:
      - $ref: '#/components/schemas/Pagination'
      - properties:
          users:
            items:
              $ref: '#/components/schemas/User'
            type: array
    Well:
      additionalProperties: false
      properties:
        archiveRecord:
          allOf:
          - $ref: '#/components/schemas/ArchiveRecord'
          nullable: true
          readOnly: true
        barcode:
          description: Barcode of the well
          type: string
        checkoutRecord:
          allOf:
          - $ref: '#/components/schemas/CheckoutRecord'
          readOnly: true
        contents:
          description: Array of well contents, each with a batch and concentration
          items:
            $ref: '#/components/schemas/ContainerContent'
          type: array
        createdAt:
          description: DateTime the well was created
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/UserSummary'
        fields:
          $ref: '#/components/schemas/Fields'
        id:
          description: ID of the well
          readOnly: true
          type: string
        modifiedAt:
          description: DateTime the well was last modified
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the well, defaults to barcode if name is not provided.
          type: string
        parentStorageId:
          description: ID of containing parent inventory, a plate well with a coordinate
            (e.g. plt_2bAks9dx:a2).
          nullable: true
          type: string
        parentStorageSchema:
          $ref: '#/components/schemas/SchemaSummary'
        projectId:
          description: ID of the project if set
          nullable: true
          type: string
        quantity:
          $ref: '#/components/schemas/ContainerQuantity'
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaSummary'
          nullable: true
        volume:
          $ref: '#/components/schemas/DeprecatedContainerVolumeForResponse'
        webURL:
          readOnly: true
          type: string
      type: object
    WorkflowTaskSchemaDependency:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/SchemaBaseDependency'
      - properties:
          output:
            properties:
              fieldDefinitions:
                items:
                  allOf:
                  - $ref: '#/components/schemas/FieldDefinitionsManifest'
                type: array
            type: object
          type:
            enum:
            - workflow_task_schema
            type: string
        type: object
      - required:
        - type
      type: object
    WorkflowTaskSchemaDependencyLink:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/SchemaBaseDependencyLink'
      - properties:
          output:
            properties:
              fieldDefinitions:
                items:
                  allOf:
                  - $ref: '#/components/schemas/FieldDefinitionsLink'
                type: array
            type: object
          type:
            enum:
            - workflow_task_schema
            type: string
      - required:
        - type
    Worklist:
      additionalProperties: false
      description: 'A worklist and its items as summaries.

        '
      properties:
        apiURL:
          description: The canonical url of the Worklist in the API.
          example: https://benchling.com/api/v2-alpha/worklists/wk_dnn2JtWq
          format: uri
          readOnly: true
          type: string
        createdAt:
          description: Date and time the worklist was created
          example: 2017-04-23 01:30:50.970926+00:00
          format: date-time
          readOnly: true
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserSummary'
          - description: UserSummary of the user who created the worklist
          - readOnly: true
        id:
          description: ID of the worklist
          readOnly: true
          type: string
        modifiedAt:
          description: Date and time the worklist was last modified
          example: 2017-04-23 01:30:50.970926+00:00
          format: date-time
          readOnly: true
          type: string
        name:
          description: Name of the worklist
          type: string
        type:
          $ref: '#/components/schemas/WorklistType'
        worklistItems:
          items:
            $ref: '#/components/schemas/WorklistItemSummary'
          type: array
      type: object
    WorklistCreate:
      additionalProperties: false
      properties:
        collaborations:
          items:
            $ref: '#/components/schemas/CollaborationCreate'
          type: array
        name:
          description: Name of the worklist
          type: string
        type:
          $ref: '#/components/schemas/WorklistType'
        worklistItemIds:
          description: 'An ordered set of IDs to assign as worklist items. IDs should
            reference existing items which fit the worklist''s specific type. For
            instance, a worklist of type container should only have item IDs which
            represent containers.

            '
          items:
            type: string
          type: array
      required:
      - name
      - type
      type: object
    WorklistItem:
      oneOf:
      - $ref: '#/components/schemas/Batch'
      - $ref: '#/components/schemas/Container'
      - $ref: '#/components/schemas/GenericEntity'
      - $ref: '#/components/schemas/Plate'
      type: object
    WorklistItemCreate:
      additionalProperties: false
      properties:
        itemId:
          description: The ID of the item to add to the worklist.
          type: string
      required:
      - itemId
      type: object
    WorklistItemSummary:
      additionalProperties: false
      description: 'A summary of an item in a worklist.

        '
      properties:
        id:
          description: ID of the item
          type: string
        name:
          description: Name of the item
          type: string
      type: object
    WorklistItemsPaginatedList:
      description: An object containing an ordered set of Worklist Items
      discriminator:
        mapping:
          batch: '#/components/schemas/BatchWorklistItemsList'
          bioentity: '#/components/schemas/EntityWorklistItemsList'
          container: '#/components/schemas/ContainerWorklistItemsList'
          plate: '#/components/schemas/PlateWorklistItemsList'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/ContainerWorklistItemsList'
      - $ref: '#/components/schemas/EntityWorklistItemsList'
      - $ref: '#/components/schemas/PlateWorklistItemsList'
      - $ref: '#/components/schemas/BatchWorklistItemsList'
      type: object
    WorklistType:
      additionalProperties: false
      description: 'The type of items a worklist contains.

        '
      enum:
      - batch
      - bioentity
      - container
      - plate
      type: string
    WorklistUpdate:
      additionalProperties: false
      properties:
        name:
          description: Name of the worklist
          type: string
        worklistItemIds:
          description: 'An ordered set of IDs to assign as worklist items. IDs should
            reference existing items which fit the worklist''s specific type. For
            instance, a worklist of type container should only have item IDs which
            represent containers.

            Replaces any existing worklist items with this set.

            '
          items:
            type: string
          type: array
      type: object
    WorklistsPaginatedList:
      additionalProperties: false
      description: An object containing an array of Worklists
      properties:
        nextToken:
          example: Im5ldyB0ZXN0Ig==
          type: string
        worklists:
          items:
            $ref: '#/components/schemas/Worklist'
          type: array
      type: object
  securitySchemes:
    basicApiKeyAuth:
      description: Use issued API key for standard access to the API
      scheme: basic
      type: http
    basicClientIdSecretAuth:
      description: Auth used as part of client credentials OAuth flow prior to receiving
        a bearer token.
      scheme: basic
      type: http
    oAuth:
      description: OAuth2 Client Credentials flow intended for service access
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: /api/v2/token
      type: oauth2
externalDocs:
  description: Additional API Documentation
  url: https://docs.benchling.com/v2-beta
info:
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Benchling API
  version: 2.0.0
openapi: 3.0.1
security:
- oAuth: []
- basicApiKeyAuth: []
servers:
- url: /api/v2-beta
tags:
- description: 'AA Sequences are the working units of cells that make everything run
    (they help make structures, catalyze reactions and allow for signaling - a kind
    of internal cell communication). On Benchling, these are comprised of a string
    of amino acids and collections of other attributes, such as annotations and primers.

    '
  name: AA Sequences
- description: View access policies.
  name: Access Policies
- description: Create and manage Benchling apps on your tenant
  name: Apps
- description: 'Benchling supports custom entities for biological entities that are
    neither sequences or proteins. Custom entities must have an entity schema set
    and can have both schema fields and custom fields.

    '
  name: Custom Entities
- description: DNA Oligos are short linear DNA sequences that can be attached as primers
    to full DNA sequences. Just like other entities, they support schemas, tags, and
    aliases.
  name: DNA Oligos
- description: 'DNA sequences are the bread and butter of the Benchling Molecular
    Biology suite. On Benchling, these are comprised of a string of nucleotides and
    collections of other attributes, such as annotations and primers.

    '
  name: DNA Sequences
- description: Entities include DNA and AA sequences, oligos, molecules, custom entities,
    and other biological objects in Benchling. Entities support schemas, tags, and
    aliases, and can be registered.
  name: Entities
- description: Entries are rich text documents that allow you to capture all of your
    experimental data in one place.
  name: Entries
- description: Molecules are groups of atoms held together by bonds, representing
    entities smaller than DNA Sequences and AA Sequences. Just like other entities,
    they support schemas, tags, and aliases.
  name: Molecules
- description: View organization objects.
  name: Organizations
- description: Manage project objects.
  name: Projects
- description: RNA Oligos are short linear RNA sequences that can be attached as primers
    to full DNA sequences. Just like other entities, they support schemas, tags, and
    aliases.
  name: RNA Oligos
- description: View team objects.
  name: Teams
- description: View user objects.
  name: Users
- description: Worklists are a convenient way to organize items for bulk actions,
    and are complementary to folders and projects
  name: Worklists
