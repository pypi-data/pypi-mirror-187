Metadata-Version: 2.1
Name: mp3cloud
Version: 0.1.1
Summary: Search and download any music from freemp3cloud.com
Home-page: https://github.com/rtcq/freemp3cloud-downloader
License: MIT
Author: Momo
Author-email: lo3me@proton.me
Requires-Python: >=3.8,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: bs4 (>=0.0.1,<0.0.2)
Requires-Dist: requests (>=2.28.1,<3.0.0)
Requires-Dist: rich (>=12.6.0,<13.0.0)
Project-URL: Bug Tracker, https://github.com/rtcq/freemp3cloud-downloader/issues
Project-URL: Repository, https://github.com/rtcq/freemp3cloud-downloader
Description-Content-Type: text/markdown

# FreeMp3Cloud Downloader
A lightweight wrapper around [FreeMp3Cloud.com](https://freemp3cloud.com) to download songs by the given query.

## Installation
```
pip install mp3cloud
```
**`cURL` should be installed too**

## Usage
### CLI
Downloading a song:
```
python -m mp3cloud "[TRACK_NAME] [ARTIST_NAME]"
```
Getting all the URLs provided for the query gathered in a `.txt` file:
```
python -m mp3cloud "[TRACK_NAME] [ARTIST_NAME]" --save-urls --no-download
```
### Python programs
Seeing the results of the query:
```py
from mp3cloud import search

songs = search("[TRACK_NAME] [ARTIST_NAME]")
for song in songs:
    print(song.name, song.artist, song.url, song.duration, song.is_high_quality)
```
To download a song:
```py
from mp3cloud.utils import download_song
download_song(songs[0])
```

## Todo
- [ ] Setting metadata for the downloaded song
- [ ] Filter by quality

