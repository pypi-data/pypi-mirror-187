# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional, Union
import numpy as np
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer

from .CustomSerializers.TensorSerializer import TensorSerializer
from .HeroData import HeroData
from .HeroDataType import HeroDataType


class HeroNumbers(HeroData):

    def __init__(self, value: Union[np.ndarray, bool, int, float, complex]):
        
        HeroData.__init__(self)

        if isinstance(value, np.ndarray):
            self._value = value
        else:
            self._value = np.array(value)

    @staticmethod
    def create(obj):
        return HeroNumbers(obj)

    @staticmethod
    def create_from_dict(data: dict):
        return data['_value']

    def __eq__(self, other: HeroNumbers):
        if not super(HeroNumbers, self).__eq__(other):
            return False
        return (self._value == other._value).all()

    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "HeroNumbers"

    # Datatype attributes.
    _attributes = Attributes("HN", version=0, member_count=1, known_types=[])

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        super(HeroNumbers, self).serialize(writer_fun)
        writer_fun(self._value, "Tensor", "V", TensorSerializer())

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = super(HeroNumbers, HeroNumbers).deserialize(reader_fun)
        data["_value"], _ = reader_fun("Tensor", TensorSerializer())
        return data
