Metadata-Version: 2.1
Name: botlib
Version: 200
Summary: The Python3 bot Namespace
Home-page: https://github.com/bthate/botlib
Author: Bart Thate
Author-email: bthate67@gmail.com
License: Public Domain
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: License :: Public Domain
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python
Classifier: Topic :: Utilities
Description-Content-Type: text/x-rst

**NAME**

 BOTLIB - The Python3 ``bot`` Namespace


**SYNOPSIS**


 ``bot [-c|-d|-h] [icfg|mre|pwd|dpl|ftc|nme|rem|rss]``

 ` -h show help``
 ``-c start console``
 ``-d daemonize``


**DESCRIPTION**

**BOTLIB** is a linbrary providing the ``bot`` namespace package. 

The bot package provides an Object class, that allows for save/load to/from
json files on disk. Objects can be searched with database functions and uses
read-only files to improve persistence and a type in filename for
reconstruction. Methods are factored out into functions to have a clean
namespace to read JSON data into.

The bot package stores it's data on disk where objects are time versioned
and the last version saved on disk is served to the user layer. Files are JSON
dumps that are read-only so thus should provide (disk) persistence more chance.
Paths carry the type in the path name what makes reconstruction from filename
easier then reading type from the object.


**INSTALL**


install with pip or download from http://pypi.org/project/botlib:


 python3 -m pip install botlib 


a bot program as a demo of this library is provided.


**CONFIGURATION**


configuration is done by calling the cfg command of the bot:

 bot cfg server=<server> channel=<channel> nick=<nick>``

 (*) default channel/server is #bot on localhost


use the -c option to start the bot as a console:


 $ bot -c
 BOT started at Thu Jan 19 20:29:54 2023 mods=irc,rss version=200 console=True
 > cmd
 cfg,cmd,dlt,dpl,flt,fnd,ftc,log,met,mre,nme,pwd,rem,rss,thr


**PROGRAMMING**

basic usage is this::

 >>> import bot
 >>> o = bot.Object()
 >>> o.key = "value"
 >>> o.key
 >>> 'value'

Objects try to mimic a dictionary while trying to be an object with normal
attribute access as well. hidden methods are provided, the methods are
factored out into functions like get, items, keys, register, set, update
and values.

load/save from/to disk::

 >>> from bot import Object, load, save
 >>> o = Object()
 >>> o.key = "value"
 >>> p = save(o)
 >>> obj = Object()
 >>> load(obj, p)
 >>> obj.key
 >>> 'value'

great for giving objects peristence by having their state stored in files::

 >>> from bot import Object, save
 >>> o = Object()
 >>> save(o)
 'bot.objects.Object/e71c9a1f456a4dcf813bb81d32c8e0f2/2021-08-31/15:31:05.717063'


**COMMANDS**

the bot has the following commands.

|
| ``$ bot cmd``
| ``cfg,cmd,dlt,dne,dpl,flt,fnd,ftc,met,mre,nme,pwd,rem,rss,thr,upt,ver``
|

here is a short description of the commands.

|
| ``cfg`` - shows the irc configuration, also edits the config
| ``cmd`` - shows all commands
| ``dlt`` - removes a user from bot
| ``dne`` - flag todo as done
| ``dpl`` - sets display items for a rss feed
| ``flt`` - shows a list of bot registered to the bus
| ``fnd`` - allows you to display objects on the datastore, read-only json files on disk 
| ``ftc`` - runs a rss feed fetching batch
| ``log`` - logs some text
| ``met`` - adds a users with there irc userhost
| ``mre`` - displays cached output, channel wise.
| ``nme`` - set name of a rss feed
| ``pwd`` - combines a nickserv name/password into a sasl password
| ``rem`` - removes a rss feed by matching is to its url
| ``rss`` - adds a feed to fetch, fetcher runs every 5 minutes
| ``tdo`` - adds a todo item, no options returns list of todo's
| ``thr`` - show the running threads
| ``upt`` - show uptime
|

**AUTHOR**

Bart Thate


**COPYRIGHT**

BOTLIB is placed in the Public Domain. No Copyright, No License.



