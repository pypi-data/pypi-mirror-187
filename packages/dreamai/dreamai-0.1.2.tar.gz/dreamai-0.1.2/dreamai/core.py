# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['load_yaml', 'save_obj', 'load_obj', 'yml_to_pip', 'params', 'merge_dicts', 'dict_values', 'dict_keys', 'sort_dict',
           'locals_to_params', 'list_map', 'add_extension_', 'add_extension']

# %% ../nbs/00_core.ipynb 3
from .imports import *

# %% ../nbs/00_core.ipynb 4
def load_yaml(file):
    with open(file) as f:
        env = load(f, Loader=Loader)
    return env

def save_obj(path, obj):
    with open(path, 'wb') as f:
        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)

def load_obj(path):
    with open(path, 'rb') as f:
        return pickle.load(f)

def yml_to_pip(yml):
    "Get pip packages from a conda environment `yml` file."
    env = load_yaml(yml)
    env_pip = env['dependencies'][-1]['pip']
    return " ".join(env_pip).replace('==', '>=')

def params(m):
    "Return all parameters of `m`."
    return [p for p in m.parameters()]

def merge_dicts(d1,d2):
    d = {}
    for k in d1:
        d[k] = d1[k]
    for k in d2:
        d[k] = d2[k]
    return d

def dict_values(d):
    return list(d.values())

def dict_keys(d):
    return list(d.keys())

def sort_dict(d, by_value=False):
    "Sort a dictionary by key by default or by value if `by_value` is True."
    idx = int(by_value)
    return {k: v for k, v in sorted(d.items(), key=lambda item:item[idx])}

def locals_to_params(l, omit=[], expand=['kwargs']):
    "Convert all the local variables to a dictionary of parameters."
    if 'kwargs' not in expand:
        expand.append('kwargs')
    l = copy.deepcopy(l)
    if 'self' in l.keys():
        del l['self']
    if '__class__' in l.keys():
        del l['__class__']
    keys = dict_keys(l)
    for k in keys:
        if k in expand:
            for k2 in l[k]:
                if k2 not in l.keys():
                    l[k2] = l[k][k2]
            del l[k]
        if k in omit:
            del l[k]
    return l

def list_map(l, m):
    "Apply `m` to each element of `l`."
    return list(pd.Series(l).apply(m))

def add_extension_(x, data_path='', ext='.jpg', make_str=True):
    "Helper function for add_extension."
    if ext[0] != '.': ext = '.'+ext
    x = Path(data_path)/(x+ext)
    if make_str:
        return str(x)
    return x

def add_extension(l:list, # List of file names or file paths
                  data_path='', # Path to the data folder. It will be added before the file paths.
                  ext:str='.jpg', # Extension to add to the file names.
                  make_str=True): # If True, convert the file paths to strings.
    "Add an extension to the file names/paths in list `l`."
    fn = partial(add_extension_, data_path=data_path, ext=ext, make_str=make_str)
    return list_map(l, fn)
